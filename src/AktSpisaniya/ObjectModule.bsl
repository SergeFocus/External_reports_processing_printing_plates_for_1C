Перем мВалютаРегламентированногоУчета Экспорт;

// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ПЕЧАТНОЙ ФОРМЫ АКТА СПИСАНИЯ ТМЦ

//Функция возвращает информацию об Фамилие и И.О. физлиц, 
// и их должности
Функция мДанныеФизЛица(ФизЛицо, Организация, ДатаСреза) Экспорт
	Результат = Новый Структура("Должность, ФамилияИО");
	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо",   ФизЛицо);
		
	ЗапросПоЛицам.Текст = "ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА ФИОФизЛицСрезПоследних.Фамилия = """"
	                      |			ТОГДА ФИОФизЛицСрезПоследних.ФизЛицо.Наименование
	                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
	                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
	                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
	                      |				ИНАЧЕ """"
	                      |			КОНЕЦ + ВЫБОР
	                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
	                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
	                      |				ИНАЧЕ """"
	                      |			КОНЕЦ
	                      |	КОНЕЦ КАК ФамилияИО,
	                      |	РаботникиОрганизацийСрезПоследних.Должность
	                      |ИЗ
	                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо,
	                      |			РаботникиОрганизацийСрезПоследних.Должность КАК Должность
	                      |		ИЗ
	                      |			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	                      |					&ДатаСреза,
	                      |					Сотрудник.ФизЛицо = &ФизЛицо
	                      |						И Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	                      |		ГДЕ
	                      |			РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
	                      |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизацийСрезПоследних.ФизЛицо";
		
	  Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
	  Если Выборка.Количество() = 0 Тогда
		  Результат.ФамилияИО = ФизЛицо.Наименование;
	  Иначе
		  Пока Выборка.Следующий() Цикл
			  Результат.ФамилияИО = Выборка.ФамилияИО;
			  Результат.Должность = Выборка.Должность;
		  КонецЦикла;
	  КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтветственныеЛицаОрганизации()

// Финкция возвращает пустую таблицу значений под
// табличную часть документа основания.
// 
Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("Сумма");

	Возврат Товары;

КонецФункции

// Получает сумму списания активов для заполнения печатных форм документов
Функция мПолучитьСуммуСписанияАктивов(ТекДокумент) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	Если ТекДокумент.Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор И (НЕ СчетКт = &СчетГТД)) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("ДатаКон", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", ТекДокумент.Ссылка);
		Запрос.УстановитьПараметр("СчетГТД", ПланыСчетов.Хозрасчетный.ГТД);
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСуммСписания.Свернуть("Номенклатура","Количество,Сумма");
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции

// По переданной структуре полей формирует запрос по табличной части документа.
//
// Параметры: 
//  ДокументСсылка    - ссылка документа, 
//  ИмяТабличнойЧасти - строка, имя табличной части,
//  СтруктураПолей    - структура, ключ структуры содержит псевдоним поля запроса, значение - строку запроса,
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция мСформироватьЗапросПоТабличнойЧасти(ДокументСсылка, ИмяТабличнойЧасти, СтруктураПолей) Экспорт

	ТекстЗапроса = "";

	Для Каждого Реквизит Из СтруктураПолей Цикл

		ТекстЗапроса  = ТекстЗапроса + ",
		|	Док." + Реквизит.Значение + " КАК " + СокрЛП(Реквизит.Ключ);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Док.НомерСтроки " + ТекстЗапроса + "
	|
	|ИЗ 
	|	Документ." + ДокументСсылка.Метаданные().Имя + "."+ СокрЛП(ИмяТабличнойЧасти) + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументСсылка);

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТабличнойЧасти()

// Функция собирает данные по документу основанию ТребованиеНакладная и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоТребованиеНакладная()
	
	Товары = ИнициализацияТаблицыСтрок();
	

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Счет",                         "Счет");
	СтруктураПолей.Вставить("Материал",                     "Номенклатура");
	СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество",                   "Количество");
	
	// Поиск сумм списания активов для заполнения Цены и Суммы
	ТаблицаСуммСписания = мПолучитьСуммуСписанияАктивов(СсылкаНаОбъект);
	
	ТаблицаМатериалов = мСформироватьЗапросПоТабличнойЧасти(СсылкаНаОбъект, "Материалы", СтруктураПолей).Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = СтрокаТЧ.Материал;
		Строчка.ТоварНаименование   = СтрокаТЧ.МатериалНаименование;
		Строчка.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмеренияНаименование;
		Строчка.Количество   = СтрокаТЧ.Количество;
		
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			Строчка.Цена = 0;
			Строчка.Сумма = 0;
		Иначе
			Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			Строчка.Цена  = Цена;
			Строчка.Сумма = Цена * СтрокаТЧ.Количество;
		КонецЕсли;

	КонецЦикла;

	ТаблицаМатериалов = мСформироватьЗапросПоТабличнойЧасти(СсылкаНаОбъект, "МатериалыЗаказчика", СтруктураПолей).Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = СтрокаТЧ.Материал;
		Строчка.ТоварНаименование   = СтрокаТЧ.МатериалНаименование;
		Строчка.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмеренияНаименование;
		Строчка.Количество   = СтрокаТЧ.Количество;
		
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			Строчка.Цена = 0;
			Строчка.Сумма = 0;
		Иначе
			Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			Строчка.Цена  = Цена;
			Строчка.Сумма = Цена * СтрокаТЧ.Количество;
		КонецЕсли;

	КонецЦикла;
	
	ДанныеДляПечати = Новый Структура();

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоТребованиеНакладная()

// Функция собирает данные по документу основанию ПередачаМатериаловВЭксплуатацию и 
// возвращает типизированную структуру с данными
// 
Функция СобратьДанныеПоПередачаМатериаловВЭксплуатацию()
	
	Товары = ИнициализацияТаблицыСтрок();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Счет",                         "СчетУчетаБУ");
	СтруктураПолей.Вставить("Материал",                     "Номенклатура");
	СтруктураПолей.Вставить("МатериалНаименование",         "Номенклатура.НаименованиеПолное");
	СтруктураПолей.Вставить("НоменклатурныйНомер",          "Номенклатура.Код");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияНаименование", "Номенклатура.БазоваяЕдиницаИзмерения");
	СтруктураПолей.Вставить("ЕдиницаИзмеренияКод",          "Номенклатура.БазоваяЕдиницаИзмерения.Код");
	СтруктураПолей.Вставить("Количество",                   "Количество");
	
	
	// Поиск сумм списания активов для заполнения Цены и Суммы
	ТаблицаСуммСписания = мПолучитьСуммуСписанияАктивов(СсылкаНаОбъект);
	
	ТаблицаМатериалов = мСформироватьЗапросПоТабличнойЧасти(СсылкаНаОбъект, "Спецодежда", СтруктураПолей).Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = СтрокаТЧ.Материал;
		Строчка.ТоварНаименование   = СтрокаТЧ.МатериалНаименование;
		Строчка.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмеренияНаименование;
		Строчка.Количество   = СтрокаТЧ.Количество;
		
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			Строчка.Цена = 0;
			Строчка.Сумма = 0;
		Иначе
			Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			Строчка.Цена  = Цена;
			Строчка.Сумма = Цена * СтрокаТЧ.Количество;
		КонецЕсли;

	КонецЦикла;

	ТаблицаМатериалов = мСформироватьЗапросПоТабличнойЧасти(СсылкаНаОбъект, "Спецоснастка", СтруктураПолей).Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = СтрокаТЧ.Материал;
		Строчка.ТоварНаименование   = СтрокаТЧ.МатериалНаименование;
		Строчка.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмеренияНаименование;
		Строчка.Количество   = СтрокаТЧ.Количество;
		
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			Строчка.Цена = 0;
			Строчка.Сумма = 0;
		Иначе
			Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			Строчка.Цена  = Цена;
			Строчка.Сумма = Цена * СтрокаТЧ.Количество;
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаМатериалов = мСформироватьЗапросПоТабличнойЧасти(СсылкаНаОбъект, "ИнвентарьИХозяйственныеПринадлежности", СтруктураПолей).Выгрузить();
	Для Каждого СтрокаТЧ Из ТаблицаМатериалов Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = СтрокаТЧ.Материал;
		Строчка.ТоварНаименование   = СтрокаТЧ.МатериалНаименование;
		Строчка.ЕдиницаИзмерения   = СтрокаТЧ.ЕдиницаИзмеренияНаименование;
		Строчка.Количество   = СтрокаТЧ.Количество;
		
		СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(СтрокаТЧ.Материал, "Номенклатура");
		Если СтрокаСуммСписания = Неопределено Тогда
			Строчка.Цена = 0;
			Строчка.Сумма = 0;
		Иначе
			Цена = ?(СтрокаСуммСписания.Количество = 0, 0, СтрокаСуммСписания.Сумма / СтрокаСуммСписания.Количество);
			Строчка.Цена  = Цена;
			Строчка.Сумма = Цена * СтрокаТЧ.Количество;
		КонецЕсли;

	КонецЦикла;
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоПередачаМатериаловВЭксплуатацию()

// Функция создает табличный документ акта списания
//
// Параметры 
//  ДанныеДляПечати - типизированная струтктура данных для заполнения параметров макета
//
Функция ПечатьАктСписания(ДанныеДляПечати)

	ТабДокумент = Новый ТабличныйДокумент;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнешняяОбработка_АктСписания";
	Макет = ПолучитьМакет("АктСписания");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	//ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ИтогоСумма = 0;

	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если Не ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;

		ИтогоСумма = ИтогоСумма + Строчка.Сумма;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.ИтогоСумма = ИтогоСумма;
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если СписаниеПодтверждает = 1 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ЧленКомиссии");
		Для Каждого СтрокаСостава из Комиссия Цикл
			ЧленКомиссии = СтрокаСостава.ЧленКомиссии;
			Если ЗначениеЗаполнено(ЧленКомиссии) Тогда
				ЕстьКомиссия = Истина;
				ДолжностьЧленаКомиссии = СокрЛП(СтрокаСостава.ДолжностьЧленКомиссии);
				
				ОбластьМакета.Параметры.ЧленКомиссии = ЧленКомиссии;
				ОбластьМакета.Параметры.ДолжностьЧленаКомиссии = СокрЛП(ДолжностьЧленаКомиссии);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТабДокумент.ПолеСверху = 10;
	ТабДокумент.ПолеСлева  = 10;
	ТабДокумент.ПолеСнизу  = 10;
	ТабДокумент.ПолеСправа = 5;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	Возврат ТабДокумент;

КонецФункции // ПечатьАктСписания()

Функция Печать() Экспорт
	
	ДанныеДляПечати = Неопределено;
	
	Если ОткрыватьФормуНастроек Тогда
		ФормаНастроек = ПолучитьФорму("ФормаНастроек",);
		Если НЕ ФормаНастроек.ОткрытьМодально() = Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	Если СписаниеПодтверждает = 2 Тогда 
		ЕстьКомиссия = Ложь; 
		СтрокаКомиссии = "Комиссия в составе: ";
		Для Каждого СтрокаСостава из Комиссия Цикл
			ЧленКомиссии = СтрокаСостава.ЧленКомиссии;
			Если ЗначениеЗаполнено(ЧленКомиссии) Тогда
				ЕстьКомиссия = Истина;
				ДолжностьЧленаКомиссии = СокрЛП(СтрокаСостава.ДолжностьЧленКомиссии);
				СтрокаКомиссии=СтрокаКомиссии+ДолжностьЧленаКомиссии + " "+ЧленКомиссии + ", ";
			КонецЕсли;
		КонецЦикла;
		СтрокаКомиссии=СтрокаКомиссии+" подтверждает  использование для указанных целей следующих материалов:";
		Если НЕ ЕстьКомиссия  Тогда
			Предупреждение("Не указан ни один член комиссии!");
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;	

	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ТребованиеНакладная") Тогда
		ДанныеДляПечати    = СобратьДанныеПоТребованиеНакладная();
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		ДанныеДляПечати    = СобратьДанныеПоПередачаМатериаловВЭксплуатацию();
	Иначе
		//Возврат ПолучитьТабличныйДокументСФПолученный();
	КонецЕсли;
	
	Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("Организация",      СсылкаНаОбъект.Организация);
	ДанныеДляПечати.Вставить("НазваниеОрганизации",      СсылкаНаОбъект.Организация.НаименованиеПолное);
	ДанныеДляПечати.Вставить("Номер",            СсылкаНаОбъект.Номер);
	ДанныеДляПечати.Вставить("Дата",             СсылкаНаОбъект.Дата);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ДанныеДляПечати.Организация, ДанныеДляПечати.Дата,);
	ДанныеДляПечати.Вставить("ФИОРуководителя", "_______________ "+Руководители.Руководитель);
	ДанныеДляПечати.Вставить("РуководительДолжность", Руководители.РуководительДолжность);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Если НазначениеИспользованияИзКомментария Тогда
		ДанныеДляПечати.Вставить("НазначениеИспользования",      СокрЛП(СсылкаНаОбъект.Комментарий));
	Иначе	
		ДанныеДляПечати.Вставить("НазначениеИспользования",      НазначениеИспользования);
	КонецЕсли;
	
	Если СписаниеПодтверждает = 2 Тогда
		ДанныеДляПечати.Вставить("СтрокаКомиссии",      СтрокаКомиссии);
	КонецЕсли;
	
	ТабДокумент = ПечатьАктСписания(ДанныеДляПечати);
	Возврат ТабДокумент;

КонецФункции // Печать

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

Если НЕ (РегламентированнаяОтчетность.ИДКонфигурации() = "БП" и РегламентированнаяОтчетность.РедакцияКонфигурации() = "1.6") Тогда
	ОбщегоНазначения.СообщитьОбОшибке("Регистрируемая печатная форма акта списания предназначена для использования в конфигурации 
					|""Бухгалтерия предприятия"", редакция 1.6.");
КонецЕсли;

СписаниеПодтверждает = ВосстановитьЗначение("АктТМЦКомиссия");
Если Не ЗначениеЗаполнено(СписаниеПодтверждает) Тогда
	СписаниеПодтверждает = 1;
КонецЕсли;

НазначениеИспользованияИзКомментария = ВосстановитьЗначение("АктТМЦИзКомментария");

ТЗ =   ВосстановитьЗначение("АктТМЦСоставКомиссии");
Если ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
	Комиссия.Загрузить(ТЗ);
КонецЕсли;	

СписокНазначенийИспользования =  ВосстановитьЗначение("АктТМЦСписокНазначений");
Если ТипЗнч(СписокНазначенийИспользования) = Тип("СписокЗначений") Тогда
	Если СписокНазначенийИспользования.Количество() > 0 Тогда
		НазначениеИспользования = СписокНазначенийИспользования.Получить(0);
	КонецЕсли;
Иначе
	СписокНазначенийИспользования = Новый СписокЗначений;
КонецЕсли;
ЗначениеНастройкиОткрыватьФормуНастроек = ВосстановитьЗначение("ОткрыватьФормуНастроек");
Если Не ЗначениеЗаполнено(ЗначениеНастройкиОткрыватьФормуНастроек) Тогда
	ОткрыватьФормуНастроек = Истина;
ИНаче
	ОткрыватьФормуНастроек = ЗначениеНастройкиОткрыватьФормуНастроек;
КонецЕсли;	
