Перем апросТовары, Шапка ;

Функция ПечатьТТН() Экспорт
	
	ЗапросТовары = Неопределено;
	Шапка = Неопределено;
	
	ПолучитьТТНИзДокумента(ЗапросТовары, Шапка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если Шапка.ДатаДокумента < Дата("20140114") Тогда
		ЗаполнитьТТН (Шапка, ЗапросТовары, ТабДокумент)
	Иначе 
		ЗаполнитьТТН2014 (Шапка, ЗапросТовары, ТабДокумент)
	КонецЕсли;
	
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура ПолучитьТТНИзДокумента(ЗапросТовары, Шапка)
	
	Перем Запрос;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаОбъект.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",  СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	| 	Организация  КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент   КАК Покупатель,
	|	Контрагент   КАК Плательщик,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов       КАК Курс,
	|	КратностьВзаиморасчетов  КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Получил,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	
	Если СсылкаНаОбъект.ВалютаДокумента = СсылкаНаОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", СсылкаНаОбъект.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", СсылкаНаОбъект.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код			                 КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код 						 КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление   	         КАК ВидУпаковки,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения 					 КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность             КАК Цена,
	|		СУММА(РеализацияТоваровУслуг.Количество)                     КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность)  КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность)  КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                  КАК НомерСтроки,
	|		0                                                            КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код   			   КАК Артикул,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код 						КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность     КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // ПечатьТТН()

Процедура ЗаполнитьТТН (Шапка, ЗапросТовары, ТабДокумент)
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	Макет       = ПолучитьМакет("ТТН");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчетОрганизации) Тогда
		НомерСчета = СсылкаНаОбъект.БанковскийСчетОрганизации.НомерСчета;
		Банк       = СсылкаНаОбъект.БанковскийСчетОрганизации.Банк;
		МФО		   = СсылкаНаОбъект.БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОГрузоотправитель.Вставить("НомерСчета",       НомерСчета);
		СведенияОГрузоотправитель.Вставить("Банк",             Банк);
		СведенияОГрузоотправитель.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузоотправительЕДРПОУ = СведенияОГрузоотправитель.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ГрузополучательЕДРПОУ  = СведенияОГрузополучателе.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ПлательщикЕДРПОУ       = СведенияОПокупателе.КодПоЕДРПОУ;
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	
	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование;
		//		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;
		
		ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаСНДС / Количество);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// увеличим итоги по дукументу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		
	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтпускРазрешил;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого   = Шапка.Получил;
	
	ОбластьМакета.Параметры.СерияДоверенности = Шапка.ДоверенностьСерия;
	ОбластьМакета.Параметры.НомерДоверенности = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДатаДоверенности  = Формат(Шапка.ДоверенностьДата, "ДФ = ""дд.ММ.гггг""");
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьТТН2014 (Шапка, ЗапросТовары, ТабДокумент)
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	Макет       = ПолучитьМакет("ТТН2014");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект.БанковскийСчетОрганизации) Тогда
		НомерСчета = СсылкаНаОбъект.БанковскийСчетОрганизации.НомерСчета;
		Банк       = СсылкаНаОбъект.БанковскийСчетОрганизации.Банк;
		МФО		   = СсылкаНаОбъект.БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОГрузоотправитель.Вставить("НомерСчета",       НомерСчета);
		СведенияОГрузоотправитель.Вставить("Банк",             Банк);
		СведенияОГрузоотправитель.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = Грузоотправитель;
	ОбластьМакета.Параметры.ГрузополучательПредставление  = Грузополучатель;
	ОбластьМакета.Параметры.ПлательщикПредставление       = ЗаказчикПлательщик;
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	ОбластьМакета.Параметры.СупрДок = "Видаткова накладна №"+ ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект) + ", рахунок-фактура, експертний висновок";
	ОбластьМакета.Параметры.ФИОКраткоВодителя = Экспедитор;
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.Ответственный = Ответственный; //ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	
	ОбластьМакета.Параметры.СерияДоверенности = Шапка.ДоверенностьСерия;
	ОбластьМакета.Параметры.НомерДоверенности = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДатаДоверенности  = Формат(Шапка.ДоверенностьДата, "ДФ = ""дд.ММ.гггг""");
	
	СуммаСНДС   = Окр((ЗапросТовары.Итог("Сумма") + ?(Шапка.СуммаВключаетНДС, 0, ЗапросТовары.Итог("СуммаНДС"))), 2);
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ОбластьМакета.Параметры.СуммаНДС                = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"), Константы.ВалютаРегламентированногоУчета.Получить());
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	КоличествоСтрок = ЗапросТовары.Количество();
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;
	
	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 1;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование;
		//		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаБезНДС = СуммаСНДС - ВыборкаСтрок.СуммаНДС;
		
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;
		
		ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// увеличим итоги по дукументу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		Ном             = Ном + 1;
		
	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
	ОбластьМакета.Параметры.ИтогоМасса      = ИтогоМасса;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	ОбластьМакета.Параметры.Экспедитор = Экспедитор ;
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Функция осуществляет печать формы "1-Т"
// на основании документа "ПеремещениеТоваров".
//
Функция ПечатьТТН_ПеремещениеТоваров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаОбъект.СкладОтправитель);
	Запрос.УстановитьПараметр("ТекущийДокумент",    СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидСкладаНТТ",       Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	Организация  КАК Грузополучатель,
	|	Организация  КАК Грузоотправитель,
	|	Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	&ПустойКонтрагент КАК Покупатель,
	|	&ПустойКонтрагент КАК Плательщик,
	|	ВЫБОР КОГДА (СкладОтправитель.ВидСклада = &ВидСкладаНТТ ИЛИ СкладПолучатель.ВидСклада = &ВидСкладаНТТ) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьНТТ,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокПеремещение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = ДокПеремещение.СкладОтправитель
	|
	|ГДЕ
	|	ДокПеремещение.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ЕстьНТТ",         Шапка.ЕстьНТТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код         				     КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код 						 КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление   	         КАК ВидУпаковки,
	|	ВложенныйЗапрос.Цена                                         КАК Цена,
	|	0                                         					 КАК Сумма,
	|	ВложенныйЗапрос.Количество                                   КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки                                  КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                                        КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ВЫБОР КОГДА &ЕстьНТТ ТОГДА ДокТовар.Цена ИНАЧЕ 0 КОНЕЦ КАК Цена,
	|		СУММА(ДокТовар.Количество)          КАК Количество,
	|		МИНИМУМ(ДокТовар.НомерСтроки)       КАК НомерСтроки,
	|		0                                   КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ДокТовар
	|	ГДЕ
	|		ДокТовар.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ВЫБОР КОГДА &ЕстьНТТ ТОГДА ДокТовар.Цена ИНАЧЕ 0 КОНЕЦ
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	|	ВложенныйЗапрос.Цена,
	|	0,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокТовар.Номенклатура КАК Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА &ЕстьНТТ
	|				ТОГДА ДокТовар.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена,
	|		СУММА(ДокТовар.Количество) КАК Количество,
	|		МИНИМУМ(ДокТовар.НомерСтроки) КАК НомерСтроки,
	|		1 КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ДокТовар
	|	ГДЕ
	|		ДокТовар.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА &ЕстьНТТ
	|				ТОГДА ДокТовар.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ДокТовар.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокТара.Номенклатура                                  КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДокТара.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ДокТара.Номенклатура.Код             			      КАК Артикул,
	|	ДокТара.Номенклатура.БазоваяЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ДокТара.Номенклатура.БазоваяЕдиницаИзмерения.Код 						 КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ДокТара.Номенклатура.БазоваяЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	0                                                     КАК Цена,
	|	0                                                     КАК Сумма,
	|	ДокТара.Количество                                    КАК Количество,
	|	ДокТара.НомерСтроки                                   КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ДокТара
	|
	|ГДЕ
	|	ДокТара.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Количество  = ВыборкаСтрок.Количество;
		
		Если ВыборкаСтрок.Метка <> 0
			ИЛИ НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			Цена      = 0;
			СуммаСНДС = 0;
		Иначе
			Если ВыборкаСтрок.Цена = 0 Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрок.Номенклатура, 
				ТипЦен, Шапка.ДатаДокумента, 
				мВалютаРегламентированногоУчета, 1, 1);
			Иначе
				Цена = ВыборкаСтрок.Цена;
			КонецЕсли;
			
			СуммаСНДС = Окр(Количество * Цена, 2);
		КонецЕсли;
		
		ВыборкаСтрок.Цена  = Цена;
		ВыборкаСтрок.Сумма = СуммаСНДС;
		
	КонецЦикла;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если Шапка.ДатаДокумента < Дата("20140114") Тогда
		ЗаполнитьТТН_ПеремещениеТоваров  (Шапка, ЗапросТовары, ТабДокумент)
	Иначе 
		ЗаполнитьТТН2014_ПеремещениеТоваров  (Шапка, ЗапросТовары, ТабДокумент)
	КонецЕсли;
	
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТТН_ПеремещениеТоваров()

Процедура ЗаполнитьТТН_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент)
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	Макет       = ПолучитьМакет("ТТН");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузоотправительЕДРПОУ = СведенияОГрузоотправитель.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ГрузополучательЕДРПОУ  = СведенияОГрузополучателе.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ПлательщикЕДРПОУ       = СведенияОПокупателе.КодПоЕДРПОУ;
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ЗапросТовары.Итог("Количество");
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ЗапросТовары.Итог("Сумма");
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтпускРазрешил;
	
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ЗапросТовары.Итог("Сумма"), Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьТТН2014_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент)
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	
	Макет       = ПолучитьМакет("ТТН2014");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	//////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = Грузоотправитель;
	ОбластьМакета.Параметры.ГрузополучательПредставление  = Грузополучатель;
	ОбластьМакета.Параметры.ПлательщикПредставление       = ЗаказчикПлательщик;
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	
	ОбластьМакета.Параметры.СупрДок = "Видаткова накладна №"+ ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект) + ", рахунок-фактура, експертний висновок";
	ОбластьМакета.Параметры.ФИОКраткоВодителя = ФамилияИнициалыФизЛица(Водитель);
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	
	ОбластьМакета.Параметры.Бухгалтер = ОбщегоНазначения.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ЗапросТовары.Итог("Сумма"), Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	Ном = 1;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		Ном = Ном + 1;
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ЗапросТовары.Итог("Количество");
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ЗапросТовары.Итог("Сумма");
	ОбластьМакета.Параметры.ИтогоМасса      = ИтогоМасса;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	ОбластьМакета.Параметры.ФИОКраткоВодителя = ФамилияИнициалыФизЛица(Водитель) + " водій";
	
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Предупреждение(НСтр("ru='Не выбран документ!';uk='Не обраний документ!'"));
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ТабДокумент = ПечатьТТН_ПеремещениеТоваров();
	Иначе
		ТабДокумент = ПечатьТТН();
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, НСтр("ru='Товарно-транспортная накладная ';uk='Товарно-транспортна накладна'") + НомерТТН + НСтр("ru=' от ';uk=' від '") + Формат(СсылкаНаОбъект.Дата,"ДФ=dd.MM.yyyy"));
	
КонецПроцедуры

// Процедура устанавливает тип цен.
//
Процедура УстановитьТипЦен()
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;
	Иначе
		ТипЦен = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // УстановитьТипЦен()

// Процедура устанавливает видимость и доступность реквизитов.
//
Процедура УстановитьВидимостьДоступность()
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДоступностьТипаЦен = Истина;
	Иначе
		ДоступностьТипаЦен = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.НадписьТипЦен.Доступность = ДоступностьТипаЦен;
	ЭлементыФормы.ТипЦен.Доступность        = ДоступностьТипаЦен;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

Процедура УстановитьНомер()
	
	НомерТТН = ОбщегоНазначения.ПолучитьНомерНаПечать(СсылкаНаОбъект);
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И НомерТТН <> "" Тогда
		
		НомерТТН = "Р" + НомерТТН;
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПеремещениеТоваров") И НомерТТН <> "" Тогда
		
		НомерТТН = "П" + НомерТТН;
		
	Иначе
		
		НомерТТН = "";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ЗапросТовары = Неопределено;
	Шапка = Неопределено;
	
	УстановитьНомер();
	УстановитьТипЦен();
	УстановитьВидимостьДоступность();
	ЗаполнитьПунктРазгрузки();
	
	Экспедитор = ФамилияИнициалыФизЛица(Водитель) + " водій";
	
	КодЯзыкаПечать = "uk";
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПолучитьТТНИзДокумента(ЗапросТовары, Шапка);
			
			СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
			СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
			СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
			
			ЗаказчикПлательщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);	
			Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
			Грузополучатель =  ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
			
			Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
			
			// Отпуск товара разрешил
			ФИООтпускРазрешил       = Руководители.РуководительПредставление;
			ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
			
			Ответственный = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Документ".
//
Процедура ДокументПриИзменении(Элемент)
	
	УстановитьНомер();
	УстановитьТипЦен();
	УстановитьВидимостьДоступность();
	ЗаполнитьПунктРазгрузки();
КонецПроцедуры

// Процедура - заполнитьПунктРазгрузки в форму
//
Процедура ЗаполнитьПунктРазгрузки()
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") и Не СсылкаНаОбъект.Ссылка.Пустая()  Тогда
		ФактическийАдрес =	УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СсылкаНаОбъект.Контрагент,СсылкаНаОбъект.Дата);
		ПунктРазгрузки  = ФактическийАдрес.ФактическийАдрес;
	КонецЕсли;
	
КонецПроцедуры

