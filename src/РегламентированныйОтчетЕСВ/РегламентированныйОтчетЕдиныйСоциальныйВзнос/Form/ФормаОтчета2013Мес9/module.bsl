////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// поле табличного документа
//каждая закладка отчета - это объект ПолеТабличногоДокумента
Перем мПереченьТаблиц;
Перем мТаблица1;
Перем мТаблица5;
Перем мТаблица6;
Перем мТаблица7;
Перем мСлужебныеДанные;

// хранит дерево значений - список
// выводимых на печать страниц
Перем мДеревоВыбранныхСтраниц;

Перем мСоставПоказателей Экспорт;

//хранит нужные статьи налоговых деклараций
Перем МассивНужныхСтатей;

// переменный для хранения бухгалтерских итогов
Перем мБухИтоги, мБухИтогиРС, мБухИтогиКорРС;

// хранит форматную строку представления
// денежных показателей отчета
Перем мСтрокаФормата;

Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;

// хранят структуру многострочных разделов
Перем мСтруктураМногострочныхРазделов Экспорт;
Перем мСтруктураИсхКолвоСтрокРазделов;

Перем  КолИсхСтрокИдГруппы5, КолИсхСтрокИдГруппы6, КолИсхСтрокИдГруппы7; 

// хранит коллекцию цветов раскраски автоматически
// заполняемых ячеек табличного документа
Перем мСтруктураЦветовРаскраски;

// хранит значение делителя при представлении
// чисел в назначенной размерности
Перем мДелитель;

// хранит версию формы отчета
Перем мВерсияФормы;

Перем БольничныеПредприятие,БольничныеФСС;

Перем ОписаниеТиповЧисло;

Перем СтрокиДекларации;

Перем Счет65_1,Счет66,Счет66_1,Счет66_2,Счет66_3,Счет65_2,Счет65_6,Счет81_5,Счет91,Счет92,Счет93,Счет301;

Перем мПечатныеФормы Экспорт;
Перем ЕстьДуплекс;

Перем мМенеджерЗвит1С Экспорт;

Перем ВерсияВыгрузки;

Перем мПодразделение;

Перем тзРаботники;
Перем тзГПХ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
Процедура ЗаполнитьНачальныеНастройки() Экспорт

	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2013Мес9");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл

		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			// имеются автоматически заполняемые ячейки

			// Для обеспечения возможности назначения разных вариантов заполнения одного и того же показателя
			// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения ячеек по каждой
			// странице многостраничного раздела.
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
		Конецесли;

	КонецЦикла;

	ФормироватьСтруктуруСтраницОтчета();
	
	УстановитьСистемуюОбластьПечатиОтчета();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//  требуется редакция по наименованиям ПолейТабличныхДокументов
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	МассивТипов = Новый Массив; 
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(1));

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета               = Новый ДеревоЗначений;
	мДеревоСтраницОтчета.Колонки.Добавить("Представление",            ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",              ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",   ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля", ОписаниеТиповСтрока100);
	мДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	мДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",            ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",         ОписаниеТиповЧисло1);
	мДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",        ОписаниеТиповЧисло1);

	мДеревоСтраницОтчета.Строки.Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПереченьТаблиц";
	СтрокаУровня1.Представление            = НСтр("ru='Перечень таблиц отчета';uk='Перелік таблиць звіту'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПереченьТаблиц";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица1";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1';uk='Таблиця 1'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТаблица1";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечати";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица5";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 5';uk='Додаток 5'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТаблица5";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
 
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица6";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6';uk='Таблиця 6'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТаблица6";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечати";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица7";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 7';uk='Таблиця 7'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаТаблица7";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечати";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()


// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СКК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

//// Функция вычисляет кредитовый оборот счета, указанного в качестве параметра 
//Функция КО(Счет)
//                                         
//	Перем Итог;
//
//	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);
//
//	Возврат Итог;
//
//КонецФункции // КО()

//// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
//// первого параметра функции, с кредита счета, указанного в качестве второго 
//// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
//// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
////
//// Параметры:
////  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
////                 оборот в дебет счета;
////  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
////                 оборот с кредита счета.
////
//// Возвращаемое значение:
////  Число        - сумма перекрестного оборота.
////
//Функция ОБ(СчетД, СчетК)
//
//	Перем Итог;
//
//	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
//
//	Возврат Итог;
//
//КонецФункции // ОБ()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло)

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, ТочностьЕдиницыИзмерения) * мДелитель; 

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция собирает значения редактирукемых ячеек табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
Функция СобратьДанныеТекущегоТаблПоля(ТабличноеПоле, ДляЗвит1С = Ложь)

	СтруктураПоказателейВнутрСвязи = Новый Структура;

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		//Если ТекущаяОбласть.Защита Тогда
		//	Если Не СтруктураПоказателейВнутрСвязи.Свойство(ТекущаяОбласть.Имя) Тогда
		//		Продолжить;
		//	КонецЕсли;
		//КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		Если ДляЗвит1С = Ложь Тогда
		
			Если    Лев(ИмяПоказателя, 3) = мИдГруппы5
				ИЛИ Лев(ИмяПоказателя, 3) = мИдГруппы6 
				ИЛИ Лев(ИмяПоказателя, 3) = мИдГруппы7 Тогда
				Продолжить;	
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2013Мес9");

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // ПолучитьТаблицуВариантовЗаполнения()

// Обновляет пользовательские настройки по вариантам заполнения
// показателей отчета в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СоставПоказателей2013Мес9");

	ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

	ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

	ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

	ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);

	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следуящая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока15  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку

				// Для обеспечения назначения разных вариантов заполнения одного и того же показателя
				// на разных страницах, создаем массив, хранящий информацию о вариантах заполнения
				// таблиц по каждой странице многостраничного раздела.
				МассивВариантовЗаполненияСтраниц = Новый Массив;
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// Соответственно, из структуры вариантов автозаполнения удаляем элемент,
				// хранящий параметры автозаполнения ячеек текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В данном случае обновляем таблицу значений, содержащей
				// пользовательские настройки параметров автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;

						Если ЭлементМассива.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;

					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии формы для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя, а в текущей - отключено.
							// В этом случае удаляем ячейку из таблицы пользовательских настроек вариантов автозаполнения.
							ЭлементМассива.Удалить(СтрокаТаблицы);

							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьВариантыЗаполнения()

// Обновляет пользовательские настройки страниц отчета
// в случае изменения версии формы отчета.
//
// Возвращаемое значение:
//   Булево - признак модифицированность пользовательских настроек.
//
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = мДеревоСтраницОтчета.Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из мДеревоСтраницОтчета.Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(мДеревоСтраницОтчета.ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если мДеревоСтраницОтчета.Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.Строки.Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = мДеревоСтраницОтчета.Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.Строки Цикл

			Если мПользовательскиеНастройкиСтраниц.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц.Строки Цикл

			Если мДеревоСтраницОтчета.Строки.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
	Для каждого ТекСтрока Из мДеревоСтраницОтчета.Строки Цикл
	
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			НомСтр = мДеревоСтраницОтчета.Строки.Индекс(ТекСтрока);

			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 

	мДеревоСтраницОтчета =  мПользовательскиеНастройкиСтраниц.Скопировать();

	Возврат ЕстьИзменения;

КонецФункции // ОбновитьНастройкиСтраниц()

// Обрабатывает полученный из формы ФормаНастройкиСтраниц дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//  унифицирована для всех отчетов
Процедура УстановитьСистемуюОбластьПечатиОтчета()

	Если ТипЗнч(мДеревоСтраницОтчета) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.Строки Цикл
		
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						
						УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				
				УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
				
			КонецЦикла;

			Продолжить;

		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);

		УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметров);
		
	КонецЦикла;

КонецПроцедуры // 

// Процедура управляет системным выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//  процедура унифицирована
Процедура УстановитьСистемуюОбластьПечатиСтраницыОтчета(СтруктураПараметровЛиста)
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
  
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	
	ТабличноеПоле = ЭлементыФормы[ИмяТабличногоПоля];
	
	Если НЕ ТабличноеПоле.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
	    ИмяОбластиПечати = "ПредупреждениеОПечати";
	ИначеЕсли ПустаяСтрока(ИмяОбластиТаблПоля) Тогда
		ИмяОбластиПечати = "";
	Иначе
		ИмяОбластиПечати = ИмяОбластиТаблПоля;
	КонецЕсли;
	
	ТабличноеПоле.ОбластьПечати = ТабличноеПоле.Области.Найти(ИмяОбластиПечати);
	
КонецПроцедуры // ВывестиНаПечатьЛист()

// Управляет видимостью страниц основной панели формы.
//
Процедура ПоказатьСтраницыОтчета()

	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли; 

	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = НСтр("ru='Настройка страниц';uk='Настройка сторінок'");

	КнопкиНастройки.Текст = ИсходныйТекст;

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)";
	КонецЕсли;

КонецПроцедуры // ПоказатьСтраницыОтчета()

// Процедура управляет показом в форме периода построения отчета,
Процедура ПоказатьПериод()

	ПериодОтчета = Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'");
	
	// Период в заголовке отчета
	// Для показа периода в заголовке берется текст из заголовка основной формы
	ЭтаФорма.Заголовок = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление() + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' (за %1 г.)';uk=' (за %1 р.)'"), Формат(мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'")); 
	
КонецПроцедуры // ПоказатьПериод()

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
Процедура ЗаполнитьСведенияОбОрганизации()

	ОргНазв = Организация.НаименованиеПолное;
	СписокПоказателей = Новый СписокЗначений;
	//СписокПоказателей.Добавить("","ФИОРук");
	//СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ИННБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ФормаСобственности");
    СписокПоказателей.Добавить("","НомерРегистрацииПФ");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","ОПФГ");
	СписокПоказателей.Добавить("","КПР");
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СписокПоказателей);
	
	мПереченьТаблиц.Области.ЕДРПОУ.Значение              = СведенияОбОрганизации.КодПоЕДРПОУ;
	мПереченьТаблиц.Области.НазваниеОрганизации.Значение 		= ОргНазв;
	мПереченьТаблиц.Области.МестонахождениеОрганизации.Значение = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мПереченьТаблиц.Области.ТелефонОрганизации.Значение 		= УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	//мПереченьТаблиц.Области.РуководительФИО.Значение       = СведенияОбОрганизации.ФИОРук;
	//мПереченьТаблиц.Области.БухгалтерФИО.Значение          = СведенияОбОрганизации.ФИОБух;
	мПереченьТаблиц.Области.РуководительИНН.Значение       = СведенияОбОрганизации.ИННРук;
	мПереченьТаблиц.Области.БухгалтерИНН.Значение          = СведенияОбОрганизации.ИННБух;
	
	Данные = Новый Структура("СтруктурнаяЕдиница",Организация, "ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(КонецДня(ДатаПодписи), Данные);
	Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Если Результат <> Неопределено Тогда
		ДанныеФИО = Новый Структура("ФизЛицо",Результат.ФизическоеЛицо);
		ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаПодписи, ДанныеФИО);
		мПереченьТаблиц.Области.РуководительФИО.Значение = СокрЛП(ФИОСрез.Фамилия) + " " + ФИОСрез.Имя + " " + ФИОСрез.Отчество;
	КонецЕсли;

	Данные = Новый Структура("СтруктурнаяЕдиница",Организация, "ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	ОтвЛица = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(КонецДня(ДатаПодписи), Данные);
	Результат = ОтвЛица.Найти(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Если Результат <> Неопределено Тогда
		ДанныеФИО = Новый Структура("ФизЛицо",Результат.ФизическоеЛицо);
		ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаПодписи, ДанныеФИО);
		мПереченьТаблиц.Области.БухгалтерФИО.Значение = СокрЛП(ФИОСрез.Фамилия) + " " + ФИОСрез.Имя + " " + ФИОСрез.Отчество;
	КонецЕсли;
	
	ОПФГ = СведенияОбОрганизации.ОПФГ;
	КодКВЕД = СведенияОбОрганизации.КодКВЕД;
	НомерРегистрацииПФ = СведенияОбОрганизации.НомерРегистрацииПФ;
	НалоговаяИнспекция    = СведенияОбОрганизации.НалоговаяИнспекция;

	мТаблица1.Области.ОргФормаХозяйствования.Значение = ОПФГ;
	мТаблица1.Области.КВЕД.Значение = КодКВЕД;
	мТаблица1.Области.НомерРегистрацииПФ.Значение = НомерРегистрацииПФ;
	
	//мПереченьТаблиц.Области.КодОрганаПФУ.Значение = СведенияОбОрганизации.КодОрганаПФУ;
    Если (НалоговаяИнспекция <> Неопределено) Тогда 
		мПереченьТаблиц.Области.КодОрганаПФУ.Значение = НалоговаяИнспекция.Код;
	КонецЕсли;
	
	мТаблица1.Области.КлассРискаКод.Значение = СведенияОбОрганизации.КПР;

	мТаблица1.Области.Адрес.Значение   = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Организация,"Юридический");
	мТаблица1.Области.Телефон.Значение = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(Организация);
	
	ДопСведенияОбОрганизации        = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, мДатаНачалаПериодаОтчета, "uk");
	мТаблица1.Области.РС.Значение    = ДопСведенияОбОрганизации.НомерСчета;
	мТаблица1.Области.Банк.Значение  = ДопСведенияОбОрганизации.Банк;
	мТаблица1.Области.МФО.Значение   = ДопСведенияОбОрганизации.МФО;
	
	Если Не РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП" Тогда
		СхемаНалогообл = Справочники.СхемыНалогообложения.НеПлательщик;
		УчетнаяПолитикаНеЗадана = Ложь;
		мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(мДатаНачалаПериодаОтчета, УчетнаяПолитикаНеЗадана, Организация, "Нал");
		Если НЕ УчетнаяПолитикаНеЗадана Тогда 
			СхемаНалогообл = мУчетнаяПолитика.СхемаНалогообложения;
			СистНалОблож = ?(СхемаНалогообл.НалогНаПрибыль, "Платник збору на загальних підставах", "Платник єдиного податку");
			мТаблица1.Области.СистНалОблож.Значение = СистНалОблож;
		КонецЕсли;
	Иначе
	  //Пользователь сам должен заполнить  поле СистемуНалогообложения
	КонецЕсли;
	
	ПоказатьПериод();
	
	мТаблица5.Области.Начальная.Значение = "Х";
	мТаблица6.Области.Начальная.Значение = "Х";
	мТаблица7.Области.Начальная.Значение = "Х";
	
	мТаблица5.Области.Отменяющая.Значение = "";
	мТаблица6.Области.Отменяющая.Значение = "";
	мТаблица7.Области.Отменяющая.Значение = "";
	
	мТаблица5.Области.Дополнительная.Значение = "";
	мТаблица7.Области.Дополнительная.Значение = "";
	
	мСлужебныеДанные.Области.КодЦентраКлючей.Значение = "0";
	
	мПереченьТаблиц.Области.ИсхДата.Значение = ДатаПодписи;
		
	ЗаполнитьОтображениеДанныхВТаблицах();

КонецПроцедуры // ЗаполнитьСведенияОбОрганизации()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность()
	
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в гривнях точность не может превышать 2 знака';uk='Звіт у ПФ: при виведенні сум у гривнях точність не може перевищувати 2 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в тысячах гривень точность не может превышать 3 знака';uk='Звіт у ПФ: при виведенні сум у тисячах гривень точність не може перевищувати 3 знаки'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(НСтр("ru='Отчет в ПФ: при выводе сумм в миллионах гривень точность не может превышать 6 знаков';uk='Звіт у ПФ: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), СтатусСообщения.Внимание);
			ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

	Сообщить(НСтр("ru='После изменения формата вывода значений, для корректного расчета итогов необходимо перезаполнить отчет!';uk='Після зміни формату виводу значень, для корректного розрахунку підсумків треба перезаполвнити звіт!'"), СтатусСообщения.Внимание);	
	
КонецПроцедуры // ПроверитьТочность()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода()
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 3";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=2; ЧС = 6";

	КонецЕсли;

	Для Каждого СтрПоказатели Из мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = мСтрокаФормата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьФорматВывода()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура УстановитьЦветФонаЯчейки(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	Перем ЦветФона;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = "Таблица1";
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Коммент           = Строка.Комментарий;

			ТекОбластьЯчеек = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
			Если (Не ПустаяСтрока(Коммент)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
				ТекОбластьЯчеек.Примечание.Текст = Коммент;
			КонецЕсли;

			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

			ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьЦветФонаЯчейки()

// Обновляет пользовательские настройки при изменении версии формы.
// унифицирована, однако использование пока ... вопрос
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения)
   Перем ДанныеМногострочныхРазделов;
   Перем ИсходноеКоличествоСтрокГруппы;
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
					"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
					"Виконується відновлення користувльницьких настройок.'"), СтатусСообщения.Информация);
	
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();
	
	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	Если ВерсияФормы = "01/01/2011" Тогда
		
		////////Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		////////	Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
		////////		ИмяГруппы       = ЭлементСтруктуры.Ключ;
		////////		СтруктураГруппы = ЭлементСтруктуры.Значение;
		////////			
		////////		Если  ИмяГруппы = мИдГруппы6 Тогда
		////////			Попытка
		////////			СтруктураГруппы.Колонки.Добавить(мИдГруппы6 + "Имя");
		////////			СтруктураГруппы.Колонки.Добавить(мИдГруппы6 + "Отчество");
		////////			Исключение КонецПопытки;
		////////		КонецЕсли;
		////////		
		////////		Если  ИмяГруппы = мИдГруппы7 Тогда
		////////			Попытка
		////////			СтруктураГруппы.Колонки.Добавить(мИдГруппы7 + "Имя");
		////////			СтруктураГруппы.Колонки.Добавить(мИдГруппы7 + "Отчество");
		////////			Исключение КонецПопытки;
		////////		КонецЕсли;
		////////		
		////////	КонецЦикла;
		////////	СписокСохранения.ДанныеМногострочныхРазделов =  ДанныеМногострочныхРазделов;
		////////КонецЕсли;
		////////
		////////СписокСохранения.ВерсияФормы = "01/01/2011";
		////////Модифицированность = Истина;

	КонецЕсли;	
		
	Если Модифицированность ИЛИ ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;

КонецПроцедуры // ОбновитьПользовательскиеНастройки()

// Обновляет параметры автозаполнения текущей ячейки табличного
// документа при их изменении. Вычисляет дельту - разницу между
// введенным вручную и автоматически рассчитанным  значениями.
//
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()

	ИмяТекущейСтраницыПанели  = "Таблица1";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = ЭлементыФормы[ИмяТекТабличногоПоля];
	ТекущаяОбласть       = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяПоказателя        = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");

	Если Не НайденнаяСтрока = Неопределено Тогда
		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

		Если ВариантЗаполнения = 2 Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

			НайденнаяСтрока.Дельта = Дельта;
			ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыАвтозаполненияЯчейки()

// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура ВывестиЭлементыВариантаЗаполнения(ТекущаяЯчейка)

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяЯчейка.СодержитЗначение Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "Таблица1";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		ДоступностьЭлементовВариантаЗаполнения(, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Коммент           = НайденнаяСтрока.Комментарий;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Коммент;

	ДоступностьЭлементовВариантаЗаполнения(ВариантЗаполнения);

КонецПроцедуры // ВывестиЭлементыВариантаЗаполнения()

// Процедура устанавливает новый вариант заполнения активной ячейки,
// выполняет реорганизацию структуры вариантов заполнения ячеек
// и управляет видимостью элементов формы, отображающих параметры
// автозаполнения активной ячейки.
//
// Параметры:
//    НовыйВариант - число, соттветствует варианту заполнения ячейки.
//                   Может принимать значение:
//                       1 - не заполнять автоматически;
//                       2 - заполнять автоматически с корректировкой;
//                       3 - заполнять автоматически без корректировки.
//
Процедура ИзменитьВариантЗаполненияЯчейки(НовыйВариант)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "Таблица1";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	Если НовыйВариант = 1 Тогда

		НайденнаяСтрока.Дельта = 0;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;

	ИначеЕсли НовыйВариант = 2 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
			Расчет();
		КонецЕсли;

		Дельта = ТекущаяОбласть.Значение - НайденнаяСтрока.ЗначениеАвто;

		НайденнаяСтрока.Дельта = Дельта;
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;

	ИначеЕсли НовыйВариант = 3 Тогда

		Если (ТекущаяОбласть.Значение = 0) И (НайденнаяСтрока.Дельта = 0) Тогда
			ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто;
		КонецЕсли;

		НайденнаяСтрока.Дельта = 0;
		НайденнаяСтрока.Комментарий = "";

		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = "";
		
		// Очищаем комментарий редактируемой ячейки
		ТекущаяОбласть.Примечание.Текст = "";

	КонецЕсли;

	УстановитьЦветФонаЯчейки(ИмяПоказателя, НовыйВариант);
	ДоступностьЭлементовВариантаЗаполнения(НовыйВариант);

КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// Процедура устанавливает новое значение автокорректировки активной ячейки,
// участвующей в автозаполнении, выполняет реорганизацию структуры вариантов
// заполнения ячеек и пересчитывает значение активной ячейки с учетом назначенной
// автокорректировки.
//
// Параметры:
//   Дельта - число, новое значение автокорректировки активной ячейки.
//
Процедура ИзменитьЗначениеАвтокорректировки(Дельта)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "Таблица1";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть    = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя     = ТекущаяОбласть.Имя;

	НайденнаяСтрока   = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Дельта = Дельта;
		ТекущаяОбласть.Значение = НайденнаяСтрока.ЗначениеАвто + Дельта;

		Расчет();
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗначениеАвтокорректировки()

// Процедура устанавливает комментарий по активной ячейки, участвующей в автозаполнении,
// выполняет реорганизацию структуры вариантов заполнения ячеек и устанавливает примечание
// по активной ячейке табличного документа.
//
// Параметры:
//   Комментарий - строка, содержащая примечание по активной ячейке.
//
Процедура ИзменитьКомментарийПоЯчейке(Коммент)

	//ТекущаяСтраницаПанели     = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели  = "Таблица1";

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.Комментарий = Коммент;
	КонецЕсли;

	ТекущаяОбласть.Примечание.Текст = Коммент;

КонецПроцедуры // ИзменитьКомментарийПоЯчейке()

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя)

	ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения("Таблица1");
	Если НЕ ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	мТаблица1.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	
КонецПроцедуры // УстановитьЗначениеПоказателя()

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура ОчиститьТабличноеПоле(ВыбТабличноеПоле)

	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
Процедура Очистить()
   Перем ИсходноеКоличествоСтрокГруппы;
   
   ТекИсхНомер     = мПереченьТаблиц.Области.ИсхНомер.Значение;
   ТекКодОрганаПФУ = мПереченьТаблиц.Области.КодОрганаПФУ.Значение;
   
   ТекСрокВыплатыЗП1	= мТаблица1.Области.СрокВыплатыЗП1.Значение;	
   ТекСрокВыплатыЗП2    = мТаблица1.Области.СрокВыплатыЗП2.Значение;	
   ТекМинистерство		= мТаблица1.Области.Министерство.Значение;
   
   // Очищаем содержимое ячеек поля табличного документа
	Для Каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "ВидыРасчетов" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле = ЭлементыФормы[ИмяТекТабличногоПоля];

		ОчиститьТабличноеПоле(ТекТабличноеПоле);

	КонецЦикла;

	мПереченьТаблиц.Области.ИсхНомер.Значение = ТекИсхНомер;
	мПереченьТаблиц.Области.КодОрганаПФУ.Значение = ТекКодОрганаПФУ;
	мПереченьТаблиц.Области.СтраницТаб1.Значение = 4;
   	мТаблица1.Области.СрокВыплатыЗП1.Значение = ТекСрокВыплатыЗП1;	
    мТаблица1.Области.СрокВыплатыЗП2.Значение = ТекСрокВыплатыЗП2;	
	мТаблица1.Области.Министерство.Значение   = ТекМинистерство;	
	
	// Далее выясним, есть ли добавленные в многострочный раздел дополнительные строки.
	// При наличии таких строк удаляем их.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл

		ИмяГруппы        = ЭлементСтруктуры.Ключ;
		СтруктураГруппы  = ЭлементСтруктуры.Значение;
		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = СтруктураГруппы.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их

			НомерВерхЯчейкиОбласти = 999999999;
			НомерНижнЯчейкиОбласти = 0;
			Для Нстр =  ИсходноеКоличествоСтрокГруппы + 1 ПО ТекущееКоличествоСтрок Цикл

				ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
				
				Для каждого Колонка Из СтруктураГруппы.Колонки Цикл
				
					ИмяКолонки = Колонка.Имя;
					ИмяЯчейкиУдаляемойСтроки = Сред(ИмяКолонки,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);

					// область первой ячейки удаляемой строки многострочного раздела
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейкиУдаляемойСтроки];

					// номера строк удаляемой области
					Если НомерВерхЯчейкиОбласти > ОбластьЯчейки.Верх Тогда
					
						НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;	
					
					КонецЕсли;
					Если НомерНижнЯчейкиОбласти < ОбластьЯчейки.Низ Тогда
					
						НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;	
					
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
			
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
			
		КонецЕсли;

		СтруктураГруппы.Очистить();
		Для Сч = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();	
		КонецЦикла;
		
	КонецЦикла;

	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();
	
	ЗаполнитьСведенияОбОрганизации();

	// Выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Расчет();

	// Устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры // Очистить()

Процедура ОбновитьСтруктуруМногострочныхРазделов()
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для обоих многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

		Для НСтр = 1 По СтруктураГруппы.Количество() Цикл

			ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		    НСтрНов = НСтр + 1;
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
				ИмяКолонки    = Колонка.Имя;
				ИмяЯчейки    = Сред(ИмяКолонки,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
				ИмяНовОбластиЯчейки = Сред(ИмяКолонки,1,3) + Формат(НСтрНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
						
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если ОбластьЯчейки.СодержитЗначение Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;

				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ОбновитьСтруктуруМногострочныхРазделов()

// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
// унифицирована, но актуально только для отчетов с наличием таких многостраничных разделов
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   СтруктураПараметровЛиста - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//  процедура унифицирована
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
  
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
	Если ИмяТабличногоПоля = "ПолеТабличногоДокументаПереченьТаблиц" Тогда
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		ОбластьПечати = мПереченьТаблиц.ПолучитьОбласть(ИмяОбластиТаблПоля);
		
		ТабДокумент.Вывести(ОбластьПечати);
		
		РазбитьПечатнуюФорму(ТабДокумент, ИмяЛиста);
		//РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица1" Тогда
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		ОбластьПечати = мТаблица1.ПолучитьОбласть(ИмяОбластиТаблПоля);
		
		ТабДокумент.Вывести(ОбластьПечати);
		
		РазбитьПечатнуюФорму(ТабДокумент, ИмяЛиста);
		//РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица5" Тогда
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, СтруктураГруппы);
	
		Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, мИдГруппы5) Тогда		
			Возврат;
		КонецЕсли;
		
		НомерЛиста =  мПереченьТаблиц.Области.СтраницТаб1.Значение
				   + мПереченьТаблиц.Области.СтраницТаб2.Значение
				   + мПереченьТаблиц.Области.СтраницТаб3.Значение
				   + мПереченьТаблиц.Области.СтраницТаб4.Значение;
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		
		Макет = ПолучитьМакет("Таблица5_2013Мес9");
		
		Шапка  = Макет.ПолучитьОбласть("Шапка");
		ЗначениеВКлетку(мПереченьТаблиц.Области.ЕДРПОУ.Значение + "          ", Ложь, 10, "ЕДРПОУ", Шапка, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.Филиал.Значение + "     ", Ложь, 5, "Филиал", Шапка, Истина);
		ЗначениеВКлетку(Месяц(мДатаНачалаПериодаОтчета), Истина, 2, "Мес", Шапка, Истина);
		ЗначениеВКлетку(Год(мДатаНачалаПериодаОтчета), Истина, 4, "Год", Шапка, Истина);
		Шапка.Параметры.НазваниеОрганизации = мПереченьТаблиц.Области.НазваниеОрганизации.Значение;
		Шапка.Параметры.Начальная 		= мТаблица5.Области.Начальная.Значение;
		Шапка.Параметры.Отменяющая 		= мТаблица5.Области.Отменяющая.Значение;
		Шапка.Параметры.Дополнительная  = мТаблица5.Области.Дополнительная.Значение;
		Шапка.Параметры.ИсхНомер 		= мПереченьТаблиц.Области.ИсхНомер.Значение;
		                                     
		Строка = Макет.ПолучитьОбласть("Строка");
		
		Подвал = Макет.ПолучитьОбласть("Подвал");		
		ЗначениеВКлетку(День(ДатаПодписи),  Истина,    2, "деньПодписи",   Подвал, Истина);
		ЗначениеВКлетку(Месяц(ДатаПодписи), Истина,    2, "месПодписи",    Подвал, Истина);
		ЗначениеВКлетку(Год(ДатаПодписи),   Истина,    4, "годПодписи",    Подвал, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.РуководительИНН.Значение + "          ", Ложь, 10, "РуководительИНН", Подвал, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.БухгалтерИНН.Значение + "          ", Ложь, 10, "БухгалтерИНН", Подвал, Истина);
		Подвал.Параметры.РуководительФИО = мПереченьТаблиц.Области.РуководительФИО.Значение;
		Подвал.Параметры.БухгалтерФИО 	 = мПереченьТаблиц.Области.БухгалтерФИО.Значение;
		
		НоваяСтраница = Истина;
		КоличествоСтрок = 1;
		Для каждого СтрокаГруппы Из СтруктураГруппы Цикл
			
			Если НоваяСтраница Тогда
				НомерЛиста = НомерЛиста + 1;
				Шапка.Параметры.НомерЛиста = НомерЛиста;
				
				ТабДокумент.Вывести(Шапка);
				
				КоличествоСтрок = 1;
				НоваяСтраница = Ложь;
			КонецЕсли;
			
			
			Строка.Параметры.НомерСтроки  = КоличествоСтрок;
			
			Строка.Параметры.Гражданин  = Формат(СтрокаГруппы.Т5_Гражданин,"ЧЦ=1; ЧН=");
			Строка.Параметры.Категория  = СтрокаГруппы.Т5_Категория;
			
			Строка.Параметры.ГПХ  = Формат(СтрокаГруппы.Т5_ГПХ,"ЧЦ=1; ЧН=");
			
			ЗначениеВКлетку(СтрокаГруппы.Т5_ДРФО + "          ", Ложь,    10, "ДРФО",    Строка, Истина);
			Строка.Параметры.Фамилия  = СтрокаГруппы.Т5_Фамилия;
			Строка.Параметры.Имя 	  = СтрокаГруппы.Т5_Имя;
			Строка.Параметры.Отчество = СтрокаГруппы.Т5_Отчество;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т5_ДатаНач) Тогда
				ЗначениеВКлетку(День(СтрокаГруппы.Т5_ДатаНач), Истина,    2, "ДатаНачала",    Строка, Истина);
			Иначе			
			    ЗначениеВКлетку("", Ложь,    2, "ДатаНачала",    Строка, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т5_ДатаКон) Тогда
			    ЗначениеВКлетку(День(СтрокаГруппы.Т5_ДатаКон), Истина,    2, "ДатаОкончания", Строка, Истина);
			Иначе	
				ЗначениеВКлетку("", Ложь,    2, "ДатаОкончания", Строка, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т5_ДатаСозданияРМ) Тогда
			    ЗначениеВКлетку(Формат(СтрокаГруппы.Т5_ДатаСозданияРМ, "ДФ=ddMMyyyy"), Ложь, 8, "ДатаСозданияРМ", Строка, Истина);
			Иначе	
				ЗначениеВКлетку("", Ложь,    8, "ДатаСозданияРМ", Строка, Истина);
			КонецЕсли;
			
			Строка.Параметры.Причина = СтрокаГруппы.Т5_Причина;
			
			ТабДокумент.Вывести(Строка);
			
			Если КоличествоСтрок = 15 Тогда
				ЗначениеВКлетку(КоличествоСтрок, Истина, 2, "КоличествоСтрок", Подвал, Истина);
				ТабДокумент.Вывести(Подвал);
				НоваяСтраница = Истина;
			Иначе
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ НоваяСтраница Тогда
			
			// последняя не полная страница
			
			// дополним пустыми строками
			Строка = Макет.ПолучитьОбласть("Строка");
			Для НомПараметра = 0 По Строка.Параметры.Количество() - 1 Цикл
				Строка.Параметры[НомПараметра] = "";
			КонецЦикла;
			
			Для НомерСтркиПустышки = КоличествоСтрок По 15 Цикл
				Строка.Параметры.НомерСтроки = НомерСтркиПустышки;
				ТабДокумент.Вывести(Строка);
			КонецЦикла;
			
			ЗначениеВКлетку(КоличествоСтрок - 1, Истина, 2, "КоличествоСтрок", Подвал, Истина);
			ТабДокумент.Вывести(Подвал);
		КонецЕсли;
		
		РазбитьПечатнуюФорму(ТабДокумент, ИмяЛиста);
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица6" Тогда
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, СтруктураГруппы);
	
		Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, мИдГруппы6) Тогда		
			Возврат;
		КонецЕсли;
		
		НомерЛиста =  мПереченьТаблиц.Области.СтраницТаб1.Значение
				   + мПереченьТаблиц.Области.СтраницТаб2.Значение
				   + мПереченьТаблиц.Области.СтраницТаб3.Значение
				   + мПереченьТаблиц.Области.СтраницТаб4.Значение
				   + мПереченьТаблиц.Области.СтраницТаб5.Значение;
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		
		Макет = ПолучитьМакет("Таблица6_2013Мес9");
		
		Шапка  = Макет.ПолучитьОбласть("Шапка");
		ЗначениеВКлетку(мПереченьТаблиц.Области.ЕДРПОУ.Значение + "          ", Ложь, 10, "ЕДРПОУ", Шапка, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.Филиал.Значение + "     ", Ложь, 5, "Филиал", Шапка, Истина);
		ЗначениеВКлетку(Месяц(мДатаНачалаПериодаОтчета), Истина, 2, "Мес", Шапка, Истина);
		ЗначениеВКлетку(Год(мДатаНачалаПериодаОтчета), Истина, 4, "Год", Шапка, Истина);
		Шапка.Параметры.НазваниеОрганизации = мПереченьТаблиц.Области.НазваниеОрганизации.Значение;
		Шапка.Параметры.Начальная 		= мТаблица6.Области.Начальная.Значение;
		Шапка.Параметры.Отменяющая 		= мТаблица6.Области.Отменяющая.Значение;
		Шапка.Параметры.ИсхНомер 		= мПереченьТаблиц.Области.ИсхНомер.Значение;
		                                     
		Строка = Макет.ПолучитьОбласть("Строка");
		
		Подвал = Макет.ПолучитьОбласть("Подвал");		
		ЗначениеВКлетку(День(ДатаПодписи),  Истина,    2, "деньПодписи",   Подвал, Истина);
		ЗначениеВКлетку(Месяц(ДатаПодписи), Истина,    2, "месПодписи",    Подвал, Истина);
		ЗначениеВКлетку(Год(ДатаПодписи),   Истина,    4, "годПодписи",    Подвал, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.РуководительИНН.Значение + "          ", Ложь, 10, "РуководительИНН", Подвал, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.БухгалтерИНН.Значение + "          ", Ложь, 10, "БухгалтерИНН", Подвал, Истина);
		Подвал.Параметры.РуководительФИО = мПереченьТаблиц.Области.РуководительФИО.Значение;
		Подвал.Параметры.БухгалтерФИО 	 = мПереченьТаблиц.Области.БухгалтерФИО.Значение;
		
		НоваяСтраница = Истина;
		КоличествоСтрок = 1;
		ИтогоНачислено = 0;
		ИтогоНачисленоМаксБаза = 0;
		ИтогоВзносы = 0;
		
		Для каждого СтрокаГруппы Из СтруктураГруппы Цикл
			
			Если НоваяСтраница Тогда
				НомерЛиста = НомерЛиста + 1;
				Шапка.Параметры.НомерЛиста = НомерЛиста;
				
				ТабДокумент.Вывести(Шапка);
				
				КоличествоСтрок = 1;
				НоваяСтраница = Ложь;
			КонецЕсли;
			
			Строка.Параметры.НомерСтроки  = КоличествоСтрок;
			
			ЗначениеВКлетку(СтрокаГруппы.Т6_ДРФО + "          ", Ложь,    10, "ДРФО",    Строка, Истина);
			Строка.Параметры.ФИО    =  СтрокаГруппы.Т6_ФИО 
									+ " " + СтрокаГруппы.Т6_Имя
									+ " " + СтрокаГруппы.Т6_Отчество;
			
			Строка.Параметры.Гражданин    =  Формат(СтрокаГруппы.Т6_Гражданин,"ЧЦ=1; ЧН=");; 						
			Строка.Параметры.МЖ    		  =  СтрокаГруппы.Т6_МЖ;						
									
			ЗначениеВКлетку(СтрокаГруппы.Т6_Категория, Ложь,    2, "Категория",    Строка, Истина);
			ЗначениеВКлетку(СтрокаГруппы.Т6_ТипСтавки, Ложь,    2, "ТипСтавки",    Строка, Истина);
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т6_МесяцГод) Тогда
				ЗначениеВКлетку(Месяц(СтрокаГруппы.Т6_МесяцГод), Истина,  2,  "Месяц",    Строка, Истина);
				ЗначениеВКлетку(Год(СтрокаГруппы.Т6_МесяцГод), Истина,  4,  "Год",    Строка, Истина);
			Иначе
				ЗначениеВКлетку("    ", Истина,  2,  "Месяц",    Строка, Истина);
				ЗначениеВКлетку("    ", Истина,  4,  "Год",    Строка, Истина);
			КонецЕсли;
			
			ЗначениеВКлетку(СтрокаГруппы.Т6_КвоБольничных, Ложь,    2, "КвоБольничных",    Строка, Истина);			
			ЗначениеВКлетку(СтрокаГруппы.Т6_КвоБезЗП, Ложь,         2, "КвоБезЗП",         Строка, Истина);			
			
			ЗначениеВКлетку(СтрокаГруппы.Т6_КвоТрудОтношений, Ложь, 3, "КвоТрудОтношений", Строка, Истина);			
			
			ЗначениеВКлетку(СтрокаГруппы.Т6_КвоДекрет, Ложь, 3, "КвоДекрет", Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.Т6_СуммаНачислено), Ложь,    9, "СуммаНачисленоГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.Т6_СуммаНачислено), Истина,   2, "СуммаНачисленоКоп",    Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.Т6_СуммаНачисленоМаксБаза), Ложь,    9, "СуммаНачисленоМаксБазаГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.Т6_СуммаНачисленоМаксБаза), Истина,   2, "СуммаНачисленоМаксБазаКоп",    Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.Т6_СуммаВзносов), Ложь,    6, "СуммаВзносовГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.Т6_СуммаВзносов), Истина,   2, "СуммаВзносовКоп",    Строка, Истина);			
			
			Строка.Параметры.НовоеРМ    =  Формат(СтрокаГруппы.Т6_НовоеРМ,"ЧЦ=1; ЧН=");;
			
			ИтогоНачислено 			= ИтогоНачислено 		 + СтрокаГруппы.Т6_СуммаНачислено;
			ИтогоНачисленоМаксБаза  = ИтогоНачисленоМаксБаза + СтрокаГруппы.Т6_СуммаНачисленоМаксБаза;
			ИтогоВзносы 			= ИтогоВзносы 			 + СтрокаГруппы.Т6_СуммаВзносов;
			
			Строка.Параметры.ТрудКнижка  = Формат(СтрокаГруппы.Т6_ТрудКнижка,"ЧЦ=1; ЧН=");
			Строка.Параметры.СпецСтаж    = Формат(СтрокаГруппы.Т6_СпецСтаж,"ЧЦ=1; ЧН=");
			
			ТабДокумент.Вывести(Строка);
			
			Если КоличествоСтрок = 10 Тогда
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоНачислено), Ложь,    9, "СуммаНачисленоГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачислено), Истина,   2, "СуммаНачисленоКоп",    Подвал, Истина);			
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоНачисленоМаксБаза), Ложь,    9, "СуммаНачисленоМаксБазаГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачисленоМаксБаза), Истина,   2, "СуммаНачисленоМаксБазаКоп",    Подвал, Истина);			
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоВзносы), Ложь,    6, "СуммаВзносовГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоВзносы), Истина,   2, "СуммаВзносовКоп",    Подвал, Истина);			
				
				ЗначениеВКлетку(КоличествоСтрок, Истина, 2, "КоличествоСтрок", Подвал, Истина);
				
				ТабДокумент.Вывести(Подвал);
				
				НоваяСтраница = Истина;
				ИтогоНачислено = 0;
				ИтогоНачисленоМаксБаза = 0;
				ИтогоВзносы = 0;
				
			Иначе
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ НоваяСтраница Тогда
			
			// последняя не полная страница
			
			// дополним пустыми строками
			Строка = Макет.ПолучитьОбласть("Строка");
			Для НомПараметра = 0 По Строка.Параметры.Количество() - 1 Цикл
				Строка.Параметры[НомПараметра] = "";
			КонецЦикла;
			
			Для НомерСтркиПустышки = КоличествоСтрок По 10 Цикл
				Строка.Параметры.НомерСтроки = НомерСтркиПустышки;
				ТабДокумент.Вывести(Строка);
			КонецЦикла;
				
			ЗначениеВКлетку(ПолучитьГривны(ИтогоНачислено), Ложь,    9, "СуммаНачисленоГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачислено), Истина,   2, "СуммаНачисленоКоп",    Подвал, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(ИтогоНачисленоМаксБаза), Ложь,    9, "СуммаНачисленоМаксБазаГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачисленоМаксБаза), Истина,   2, "СуммаНачисленоМаксБазаКоп",    Подвал, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(ИтогоВзносы), Ложь,    6, "СуммаВзносовГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоВзносы), Истина,   2, "СуммаВзносовКоп",    Подвал, Истина);			
			
			ЗначениеВКлетку(КоличествоСтрок - 1, Истина, 2, "КоличествоСтрок", Подвал, Истина);
			ТабДокумент.Вывести(Подвал);
			
		КонецЕсли;
		
		РазбитьПечатнуюФорму(ТабДокумент, ИмяЛиста);
		//РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица7" Тогда
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, СтруктураГруппы);
	
		Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, мИдГруппы7) Тогда		
			Возврат;
		КонецЕсли;
		
		НомерЛиста =  мПереченьТаблиц.Области.СтраницТаб1.Значение
				   + мПереченьТаблиц.Области.СтраницТаб2.Значение
				   + мПереченьТаблиц.Области.СтраницТаб3.Значение
				   + мПереченьТаблиц.Области.СтраницТаб4.Значение
				   + мПереченьТаблиц.Области.СтраницТаб5.Значение
				   + мПереченьТаблиц.Области.СтраницТаб6.Значение;
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		
		Макет = ПолучитьМакет("Таблица7_2013");
		
		Шапка  = Макет.ПолучитьОбласть("Шапка");
		ЗначениеВКлетку(мПереченьТаблиц.Области.ЕДРПОУ.Значение + "          ", Ложь, 10, "ЕДРПОУ", Шапка, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.Филиал.Значение + "     ", Ложь, 5, "Филиал", Шапка, Истина);
		ЗначениеВКлетку(Месяц(мДатаНачалаПериодаОтчета), Истина, 2, "Мес", Шапка, Истина);
		ЗначениеВКлетку(Год(мДатаНачалаПериодаОтчета), Истина, 4, "Год", Шапка, Истина);
		Шапка.Параметры.НазваниеОрганизации = мПереченьТаблиц.Области.НазваниеОрганизации.Значение;
		Шапка.Параметры.Начальная 		= мТаблица7.Области.Начальная.Значение;
		Шапка.Параметры.Отменяющая 		= мТаблица7.Области.Отменяющая.Значение;
		Шапка.Параметры.Дополнительная  = мТаблица7.Области.Дополнительная.Значение;
		Шапка.Параметры.ИсхНомер 		= мПереченьТаблиц.Области.ИсхНомер.Значение;
		                                     
		Строка = Макет.ПолучитьОбласть("Строка");
		
		Подвал = Макет.ПолучитьОбласть("Подвал");		
		ЗначениеВКлетку(День(ДатаПодписи),  Истина,    2, "деньПодписи",   Подвал, Истина);
		ЗначениеВКлетку(Месяц(ДатаПодписи), Истина,    2, "месПодписи",    Подвал, Истина);
		ЗначениеВКлетку(Год(ДатаПодписи),   Истина,    4, "годПодписи",    Подвал, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.РуководительИНН.Значение + "          ", Ложь, 10, "РуководительИНН", Подвал, Истина);
		ЗначениеВКлетку(мПереченьТаблиц.Области.БухгалтерИНН.Значение + "          ", Ложь, 10, "БухгалтерИНН", Подвал, Истина);
		Подвал.Параметры.РуководительФИО = мПереченьТаблиц.Области.РуководительФИО.Значение;
		Подвал.Параметры.БухгалтерФИО 	 = мПереченьТаблиц.Области.БухгалтерФИО.Значение;
		
		НоваяСтраница = Истина;
		КоличествоСтрок = 1;
		Для каждого СтрокаГруппы Из СтруктураГруппы Цикл
			
			Если НоваяСтраница Тогда
				НомерЛиста = НомерЛиста + 1;
				Шапка.Параметры.НомерЛиста = НомерЛиста;
				
				ТабДокумент.Вывести(Шапка);
				
				КоличествоСтрок = 1;
				НоваяСтраница = Ложь;
			КонецЕсли;
			
			Строка.Параметры.НомерСтроки  = КоличествоСтрок;
			
			Строка.Параметры.Гражданин    =  СтрокаГруппы.Т7_Гражданин; 						
			
			ЗначениеВКлетку(СтрокаГруппы.Т7_ДРФО + "          ", Ложь,    10, "ДРФО",    Строка, Истина);
			Строка.Параметры.ФИО    =  СтрокаГруппы.Т7_ФИО 
									+ " " + СтрокаГруппы.Т7_Имя
									+ " " + СтрокаГруппы.Т7_Отчество;
			
			ЗначениеВКлетку(СтрокаГруппы.Т7_КодОснования, Ложь,    8, "КодОснования",    Строка, Истина);
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т7_ДатаНач) Тогда
				ЗначениеВКлетку(День(СтрокаГруппы.Т7_ДатаНач), Истина,    2, "ДатаНач",    Строка, Истина);
			Иначе
				ЗначениеВКлетку("", Ложь,    2, "ДатаНач",    Строка, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т7_ДатаКон) Тогда
				ЗначениеВКлетку(День(СтрокаГруппы.Т7_ДатаКон), Истина,    2, "ДатаКон",    Строка, Истина);
			Иначе				
			    ЗначениеВКлетку("", Ложь,    2, "ДатаКон",    Строка, Истина);
			КонецЕсли;
			
			ЗначениеВКлетку(СтрокаГруппы.Т7_Дней,      Ложь,    4, "Дней",         Строка, Истина);
			//ЗначениеВКлетку(СтрокаГруппы.Т7_НормоСмен, Ложь,    3, "НормоСмен",    Строка, Истина);
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т7_Часов) ИЛИ ЗначениеЗаполнено(СтрокаГруппы.Т7_Минут) Тогда
				ЧасовМинут = Формат(СтрокаГруппы.Т7_Часов, "ЧЦ=3; ЧН=; ЧГ=0") + "-" + Формат(СтрокаГруппы.Т7_Минут, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
			Иначе	
			    ЧасовМинут = "";
			КонецЕсли;
			
			ЗначениеВКлетку(ЧасовМинут,            Ложь,    6, "ЧасовМинут", Строка, Истина);
			ЗначениеВКлетку(СтрокаГруппы.Т7_Норма, Ложь,   10, "Норма",      Строка, Истина);
			
			ЗначениеВКлетку(СтрокаГруппы.Т7_ПриказНомер, Ложь,  8,  "ПриказНомер",    Строка, Истина);
			ЗначениеВКлетку(Формат(СтрокаГруппы.Т7_ПриказДата, "ДФ=ddMMyyyy"), Ложь,  8,   "ПриказДата",     Строка, Истина);
			
			Строка.Параметры.Сезон  = СтрокаГруппы.Т7_Сезон;
			
			ТабДокумент.Вывести(Строка);
			
			Если КоличествоСтрок = 10 Тогда
				
				ЗначениеВКлетку(КоличествоСтрок, Истина, 2, "КоличествоСтрок", Подвал, Истина);
				
				ТабДокумент.Вывести(Подвал);
				
				НоваяСтраница = Истина;
				
			Иначе
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ НоваяСтраница Тогда
			
			// последняя не полная страница
			
			// дополним пустыми строками
			Строка = Макет.ПолучитьОбласть("Строка");
			Для НомПараметра = 0 По Строка.Параметры.Количество() - 1 Цикл
				Строка.Параметры[НомПараметра] = "";
			КонецЦикла;
			
			Для НомерСтркиПустышки = КоличествоСтрок По 10 Цикл
				Строка.Параметры.НомерСтроки = НомерСтркиПустышки;
				ТабДокумент.Вывести(Строка);
			КонецЦикла;
			
			ЗначениеВКлетку(КоличествоСтрок - 1, Истина, 2, "КоличествоСтрок", Подвал, Истина);
			ТабДокумент.Вывести(Подвал);
			
		КонецЕсли;
		
		РазбитьПечатнуюФорму(ТабДокумент, ИмяЛиста);
		//РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);
		
	КонецЕсли;	

КонецПроцедуры // ВывестиНаПечатьЛист()

Процедура РазбитьПечатнуюФорму(ПечФорма, ИмяФормы = "")
	
	УчитыватьАвтомасштаб = (ИмяФормы = "Таблица 6");

	ПустойТаблДок = Новый ТабличныйДокумент;
	ПустойТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
	ПустойТаблДок.ОриентацияСтраницы = ПечФорма.ОриентацияСтраницы;
	ПустойТаблДок.ЧерноБелаяПечать = Истина;
	ПустойТаблДок.ЧерноБелыйПросмотр = Истина;
	ПослВерх = 1;
	Если ЕстьДуплекс Тогда
		НовТаблДок = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Сч = 0;
	Пока Сч < ПечФорма.ВысотаТаблицы Цикл
		 Сч = Сч + 1;
		 
		Если НЕ ПустойТаблДок.ПроверитьВывод(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0)) Тогда
			
			// проверим, не должна ли предпоследняя строка печататься вместе со текущей ("не влезшей") строкой.
			// если так, то "откатимся" вверх
			Пока ПослВерх < Сч-1 И ПечФорма.ПолучитьОбласть(Сч-1, , Сч-1, ).Область().ВместеСоСледующим Цикл
			  Сч = Сч - 1;
			КонецЦикла; 
			
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч - 1, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ПечФорма.ОриентацияСтраницы;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч;
		КонецЕсли;
		
		Если ПечФорма.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			Если НЕ ЕстьДуплекс Тогда
				НовТаблДок = Новый ТабличныйДокумент();
			КонецЕсли;
			НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, Сч, 0));
			НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
			НовТаблДок.ОриентацияСтраницы = ПечФорма.ОриентацияСтраницы;
			НовТаблДок.ЧерноБелаяПечать = Истина;
			НовТаблДок.ЧерноБелыйПросмотр = Истина;
			НовТаблДок.ОтображатьСетку = Ложь;
			НовТаблДок.ОтображатьЗаголовки = Ложь;
			Если НЕ ЕстьДуплекс Тогда
				мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
			КонецЕсли;
			ПослВерх = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПослВерх <= ПечФорма.ВысотаТаблицы Тогда
		Если НЕ ЕстьДуплекс Тогда
			НовТаблДок = Новый ТабличныйДокумент();
		КонецЕсли;
		НовТаблДок.Вывести(ПечФорма.ПолучитьОбласть(ПослВерх, 0, ПечФорма.ВысотаТаблицы, 0));
		НовТаблДок.АвтоМасштаб = УчитыватьАвтомасштаб;
		НовТаблДок.ОриентацияСтраницы = ПечФорма.ОриентацияСтраницы;
		НовТаблДок.ЧерноБелаяПечать = Истина;
		НовТаблДок.ЧерноБелыйПросмотр = Истина;
		НовТаблДок.ОтображатьСетку = Ложь;
		НовТаблДок.ОтображатьЗаголовки = Ложь;
		Если НЕ ЕстьДуплекс Тогда
			мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДуплекс Тогда
		мПечатныеФормы.Добавить(НовТаблДок, ИмяФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму документа ФормаНастройкиСтраниц с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//  унифицирована и актуальна только при наличии таких разделов
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)

	ФормаНастройкиСтраниц = ПолучитьФорму("ФормаНастройкиСтраниц", ЭтаФорма, "дляВыбораСтраницОтчета");

	Если ФормаНастройкиСтраниц.Открыта() Тогда
		ФормаНастройкиСтраниц.Активизировать();
		Если Вопрос(НСтр("ru='Предыдущая операция выбора листов не завершена."
"Завершить?';uk='Попередня операція вибору аркушів не завершена."
"Завершити?'"),РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаНастройкиСтраниц.Закрыть();
		КонецЕсли;
	КонецЕсли;

	мДеревоВыбранныхСтраниц = "";

	ДеревоСтраницОтчета = мДеревоСтраницОтчета.Скопировать();

	ФормаНастройкиСтраниц.НачальноеЗначениеВыбора = ДеревоСтраницОтчета;
	ФормаНастройкиСтраниц.мВариантВыбора          = ВариантВыбора;

	ВыбранноеЗначение = ФормаНастройкиСтраниц.ОткрытьМодально();

	Если ВыбранноеЗначение <> Неопределено Тогда
		мДеревоВыбранныхСтраниц = ВыбранноеЗначение;
		Модифицированность = Истина;
	Иначе
		мДеревоВыбранныхСтраниц = ДеревоСтраницОтчета;
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
Процедура Печать(ВидПечати)
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтказПриПроверкеРеквизитовДляВыгрузкиDBF() Тогда
		Если НЕ Вопрос(Нстр("ru = 'При проверке заполнения отчета обнаружены ошибки!
                             |Продолжить печать отчета?'; uk = 'При перевірці заповнення звіту виявлені помилки!
                             |Продовжити друг звіту?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
    мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		Пометка = СтрокаУровня1.ВыводНаПечать;

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяТабличногоПоля  = СтрокаУровня1.ИмяПоляТабличногоДокум;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если СтрокаУровня1.Строки.Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				Пометка = СтрокаУровня2.ВыводНаПечать;

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяТабличногоПоля  = СтрокаУровня2.ИмяПоляТабличногоДокум;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;

				Если СтрокаУровня2.Строки.Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл

						Пометка = СтрокаУровня3.ВыводНаПечать;
						Если Пометка = 0 Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяТабличногоПоля  = СтрокаУровня3.ИмяПоляТабличногоДокум;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

						ВывестиНаПечатьЛист(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 Тогда
					Продолжить;
				КонецЕсли;

				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

				ВывестиНаПечатьЛист(СтруктураПараметров);
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяТабличногоПоля",  ИмяТабличногоПоля);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;

	// обновляем исходное дерево значений 
	мДеревоСтраницОтчета = мДеревоВыбранныхСтраниц.Скопировать();
	РегламентированнаяОтчетность.ПроставитьНомераЛистов(ЭтаФорма, ВидПечати, Ложь);

КонецПроцедуры // Печать()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//  актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
//вернуться с многострочніми разделами - приложения К1/2
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы)
	
	Перем ТекТабличноеПоле;

	Если (ИдГруппы =мИдГруппы5) Тогда 
		ТекТабличноеПоле = мТаблица5;
	ИначеЕсли (ИдГруппы =мИдГруппы6) Тогда 
		ТекТабличноеПоле = мТаблица6;
	ИначеЕсли (ИдГруппы =мИдГруппы7) Тогда 
		ТекТабличноеПоле = мТаблица7;
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
// актуально только для отчетов, содержащих многострочные разделы
//  похоже а ее унифицированность
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()
	Перем ИмяГруппы;
	
	ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	ТекущаяОбласть  = ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].ТекущаяОбласть;
	ИмяПоказателя   = ТекущаяОбласть.Имя;
	
	Если ИмяТекущейСтраницыПанели = "Таблица5" Тогда
			ИмяГруппы = мИдГруппы5;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица6" Тогда
			ИмяГруппы = мИдГруппы6;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица7" Тогда
			ИмяГруппы = мИдГруппы7;
	КонецЕсли;
		
	Возврат ИмяГруппы;
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Процедура управляет выводом всех страниц многостраничного раздела на печать.
//
// Параметры:
//   СтруктураПараметровСтраницы - структура, содержащая параметры печаты отчета:
//
//      - имя страницы основной панели формы (многостраничного раздела);
//      - имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного документа, который выводится на печать;
//      - имя области табличного документа, выводимой на печать (содержит не пустое значение,
//        когда выводится на печать не весь табличный документ, а часть его);
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//   унифицирована, но актульная для отчетов, их имеющих
// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  похоже унифицирована, используется при  восстановлении сохраненных данных
Процедура ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		///////////////////////////////////////////////////////
		// получаем описание координат каждой колонки многострочной части (лево, право, высота)
		СтруктураКоординатЯчеек = Новый Структура();
		ВысотаСтроки = 0;
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			
			ИмяКолонки          = Колонка.Имя;
			
			ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(1,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];

			Координаты = Новый Структура();
			// определяем границы ячейки исходной области
			Координаты.Вставить("НомерВерхСтрокиЯчейки",  ОбластьЯчейки.Верх);
			Координаты.Вставить("НомерНижнСтрокиЯчейки",  ОбластьЯчейки.Низ);
			Координаты.Вставить("НомерЛевоКолонкиЯчейки", ОбластьЯчейки.Лево);
			Координаты.Вставить("НомерПравКолонкиЯчейки", ОбластьЯчейки.Право);
		
			СтруктураКоординатЯчеек.Вставить(ИмяКолонки, Координаты);
			
			Если ВысотаСтроки < ОбластьЯчейки.Низ - ОбластьЯчейки.Верх + 1 Тогда
				ВысотаСтроки = ОбластьЯчейки.Низ - ОбластьЯчейки.Верх + 1;
			КонецЕсли;
			
		КонецЦикла;

			
		///////////////////////////////////////////////////////
		// вставляем необходимое количество строк за один раз

		// номера строк исходной области
		НомерВерхЯчейкиОбласти = СтруктураКоординатЯчеек[СтруктураГруппы.Колонки[0].Имя].НомерВерхСтрокиЯчейки;
		НомерНижнЯчейкиОбласти = НомерВерхЯчейкиОбласти + ВысотаСтроки - 1;
		
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
		// добавляем в таблицу новые строки
		ИсходнаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти + (ТекущееКоличествоСтрокГруппы - ИсходноеКоличествоСтрокГруппы - 1) * ВысотаСтроки, );	
		ТекТабличноеПоле.ВставитьОбласть(ВставляемаяОбласть,ИсходнаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		///////////////////////////////////////////////////////
		// переименовываем все ячейки многострочной части сверху вниз
		// при этом удаляем старые имена, если они есть
		Для НомерСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомерПроставлен = Ложь;
			// переопределяем имена вставленной области
			Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

				ИмяКолонки          = Колонка.Имя;
				ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(НомерСтроки,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
				
				Если НомерСтроки <= ИсходноеКоличествоСтрокГруппы Тогда
					// удаляем старые имена (они сдвинуты)
					ТекТабличноеПоле.Области[ИмяОбластиЯчейки].Имя = "";
				КонецЕсли;
				
				// определяем границы ячейки заданной строки и колонки 
				НомерВерхСтрокиЯчейки  = СтруктураКоординатЯчеек[ИмяКолонки].НомерВерхСтрокиЯчейки + ВысотаСтроки * (НомерСтроки - 1);
				НомерНижнСтрокиЯчейки  = СтруктураКоординатЯчеек[ИмяКолонки].НомерНижнСтрокиЯчейки + ВысотаСтроки * (НомерСтроки - 1);
				НомерЛевоКолонкиЯчейки = СтруктураКоординатЯчеек[ИмяКолонки].НомерЛевоКолонкиЯчейки;
				НомерПравКолонкиЯчейки = СтруктураКоординатЯчеек[ИмяКолонки].НомерПравКолонкиЯчейки;

				// Назначаем имя ячейки области,
				ОбластьЯчейки = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
                ОбластьЯчейки.Имя = ИмяОбластиЯчейки; 
				
				// очищаем значения ячеек 
				Если ОбластьЯчейки.СодержитЗначение Тогда
					ОбластьЯчейки.Очистить();
					// вставляем номер
					Если  НЕ НомерПроставлен Тогда
						ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх,1,ОбластьЯчейки.Верх + 1, 2 );
						ОбластьТекстовыйНомер.Текст = Строка(НомерСтроки);
						НомерПроставлен = Истина;
					КонецЕсли;
					
				Иначе
					ОбластьЯчейки.Текст  = Строка(НомерСтроки);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
            ИмяКолонки          = КолонкаТаблицы.Имя;

			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;

			ИмяЯчейки = Сред(ИмяКолонки,1,3) + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=6;ЧВН=0;ЧГ=;") +  Сред(ИмяКолонки,4);
					
			ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицы.Имя];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
				// задаем значение ячейки
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;

			Иначе
				// устанавливаем порядковый номер строки
				ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
Функция Сохранить() Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчета(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (мСохраненныйДок = Неопределено) ИЛИ (мСкопированаФорма <> Неопределено) Тогда
		// Отчет новый или был скопирован.

		Если мСохраненныйДок = Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
			мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
		КонецЕсли;

		мСохраненныйДок.Дата = мДатаКонцаПериодаОтчета;
		мСохраненныйДок.УстановитьВремя();
		мСохраненныйДок.УстановитьНовыйНомер();

	КонецЕсли;

	// установим текущие значения реквизитов документа
	мСохраненныйДок.ИсточникОтчета             = ЭтотОбъект.Метаданные().Имя;
	мСохраненныйДок.НаименованиеОтчета         = ЭтотОбъект.Метаданные().Формы.ОсновнаяФорма.Представление();
	мСохраненныйДок.ДатаНачала                 = мДатаНачалаПериодаОтчета;
	мСохраненныйДок.ДатаОкончания              = мДатаКонцаПериодаОтчета;
	мСохраненныйДок.ВыбраннаяФорма             = мВыбраннаяФорма;
	мСохраненныйДок.Организация                = Организация;
	мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	мСохраненныйДок.ЕдиницаИзмерения           = ЕдиницаИзмерения;
	мСохраненныйДок.ТочностьЕдиницыИзмерения   = ТочностьЕдиницыИзмерения;
	мСохраненныйДок.Периодичность			   = Периодичность;
	мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	мСохраненныйДок.Комментарий                = Комментарий;
	
	// обновляем структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "ВидыРасчетов" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];

		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);

	КонецЦикла;

	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", мСтруктураМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", мСтруктураВариантыЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", мВерсияФормы);
	
	СписокСохранения.Вставить("Подразделение", Подразделение);
	
	СписокСохранения.Вставить("ТаблицаВРБольничныеПредприятие",   ТаблицаВРБольничныеПредприятие);
	СписокСохранения.Вставить("ТаблицаВРБольничныеФСС", 		  ТаблицаВРБольничныеФСС);
	СписокСохранения.Вставить("ТаблицаВРБольничныеФССНесчСлучай", ТаблицаВРБольничныеФССНесчСлучай);
	
	СписокСохранения.Вставить("ТаблицаВРОтпускДо3",   					ТаблицаВРОтпускДо3);
	СписокСохранения.Вставить("ТаблицаВРОтпускОт3До6",   				ТаблицаВРОтпускОт3До6);
	СписокСохранения.Вставить("ТаблицаВРОтпускПоБеременностиИРодам", 	ТаблицаВРОтпускПоБеременностиИРодам);
	СписокСохранения.Вставить("ТаблицаВРБезСохраненияЗП", 				ТаблицаВРБезСохраненияЗП);
	
	СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеПредприятие", 	ТаблицаВРБольничныеПредприятие.ВыгрузитьКолонку("ВидРасчета"));	
	СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФСС", 			ТаблицаВРБольничныеФСС.ВыгрузитьКолонку("ВидРасчета"));	
	СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФССНесчСлучай",  ТаблицаВРБольничныеФССНесчСлучай.ВыгрузитьКолонку("ВидРасчета"));	
	
	СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускДо3", 					ТаблицаВРОтпускДо3.ВыгрузитьКолонку("ВидРасчета"));	
	СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускОт3До6", 				ТаблицаВРОтпускОт3До6.ВыгрузитьКолонку("ВидРасчета"));	
	СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускПоБеременностиИРодам", 	ТаблицаВРОтпускПоБеременностиИРодам.ВыгрузитьКолонку("ВидРасчета"));	
	СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБезСохраненияЗП",  			ТаблицаВРБезСохраненияЗП.ВыгрузитьКолонку("ВидРасчета"));	
	
	СохранитьЗначение("РегламентированнаяОтчетность_СрокВыплатыЗП1_"+Организация.Код,  мТаблица1.Области.СрокВыплатыЗП1.Значение);	
	СохранитьЗначение("РегламентированнаяОтчетность_СрокВыплатыЗП2_"+Организация.Код,  мТаблица1.Области.СрокВыплатыЗП2.Значение);	
	СохранитьЗначение("РегламентированнаяОтчетность_Министерство_"+Организация.Код,    мТаблица1.Области.Министерство.Значение);	
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		
		СписокСохранения.Вставить("ТаблицаВРГПХ", ТаблицаВРГПХ);
		СохранитьЗначение("РегламентированнаяОтчетность_ТаблицаВРГПХ", ТаблицаВРГПХ.ВыгрузитьКолонку("ВидРасчета"));	
		
		МассивБольничныхОбщий = ТаблицаВРБольничныеПредприятие.ВыгрузитьКолонку("ВидРасчета");
		Для каждого ВР Из ТаблицаВРБольничныеФСС.ВыгрузитьКолонку("ВидРасчета") Цикл
			МассивБольничныхОбщий.Добавить(ВР);
		КонецЦикла;
		Для каждого ВР Из ТаблицаВРБольничныеФССНесчСлучай.ВыгрузитьКолонку("ВидРасчета") Цикл
			МассивБольничныхОбщий.Добавить(ВР);
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("УказыватьПериодДляВсехНачислений", УказыватьПериодДляВсехНачислений);
	СохранитьЗначение("РегламентированнаяОтчетность_ЕСВ_УказыватьПериодДляВсехНачислений", 	УказыватьПериодДляВсехНачислений);	
	
	СписокСохранения.Вставить("ВыделятьЕСВДляОтпускных", ВыделятьЕСВДляОтпускных);
   	СохранитьЗначение("РегламентированнаяОтчетность_ЕСВ_ВыделятьЕСВДляОтпускных", 	ВыделятьЕСВДляОтпускных);	

	
	// Сохраняем выбранные листы для печати в хранилище
	ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
	мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	мСохраненныйДок.Записать();
	
	РегламентированнаяОтчетность.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
	СохранитьДеревоСтраницОтчета();
	
	СохранитьЗначение("РегламентированнаяОтчетность_ПенсионныйФонд_ИсхНомер", мПереченьТаблиц.Области.ИсхНомер.Значение);	
	
	Модифицированность = Ложь;

	Возврат Истина;
	
КонецФункции // Сохранить()

// Восстанавливает сохраненные данные отчета.
//
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// восстанавливаем реквизиты отчета
	Организация              = мСохраненныйДок.Организация;
	ДатаПодписи              = мСохраненныйДок.ДатаПодписи;
	ЕдиницаИзмерения         = мСохраненныйДок.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = мСохраненныйДок.ТочностьЕдиницыИзмерения;
    ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
	Комментарий              = мСохраненныйДок.Комментарий;
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = мСохраненныйДок.ДанныеОтчета.Получить();

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		мСтруктураВариантыЗаполнения = ДанныеВариановАвтоЗаполнения;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	мДеревоСтраницОтчета   = ДеревоНастройкиСтраниц.Скопировать();

	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения);
		КонецЕсли;
	КонецЕсли;
	
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		мСтруктураМногострочныхРазделов = ДанныеМногострочныхРазделов;

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;

			ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);
		КонецЦикла;
	КонецЕсли;

	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета);
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭлементыФормы[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СписокСохранения.Свойство("Подразделение", Подразделение);	
	
	// больничные за счет предприятия
	мТаблица = Неопределено;
	СписокСохранения.Свойство("ТаблицаВРБольничныеПредприятие", мТаблица);
	Если мТаблица = Неопределено Тогда
		// попробуем поднять значение общее для регл. отчетности
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеПредприятие");	
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБольничныеПредприятие.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРБольничныеПредприятие.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// сохранена таблица значений
		ТаблицаВРБольничныеПредприятие.Очистить();
		Для каждого Стр Из мТаблица Цикл
			СтрокаВР = ТаблицаВРБольничныеПредприятие.Добавить();
			СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
		КонецЦикла;
	КонецЕсли;
	
	// больничные за счет ФСС
	мТаблица = Неопределено;
	СписокСохранения.Свойство("ТаблицаВРБольничныеФСС", мТаблица);
	Если мТаблица = Неопределено Тогда
		// попробуем поднять значение общее для регл. отчетности
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФСС");	
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБольничныеФСС.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРБольничныеФСС.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// сохранена таблица значений
		ТаблицаВРБольничныеФСС.Очистить();
		Для каждого Стр Из мТаблица Цикл
			СтрокаВР = ТаблицаВРБольничныеФСС.Добавить();
			СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
		КонецЦикла;
	КонецЕсли;
	
	// больничные за счет ФСС несч. случай
	мТаблица = Неопределено;
	СписокСохранения.Свойство("ТаблицаВРБольничныеФССНесчСлучай", мТаблица);
	Если мТаблица = Неопределено Тогда
		// попробуем поднять значение общее для регл. отчетности
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФССНесчСлучай");	
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБольничныеФССНесчСлучай.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРБольничныеФССНесчСлучай.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// сохранена таблица значений
		ТаблицаВРБольничныеФССНесчСлучай.Очистить();
		Для каждого Стр Из мТаблица Цикл
			СтрокаВР = ТаблицаВРБольничныеФССНесчСлучай.Добавить();
			СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
		КонецЦикла;
	КонецЕсли;
	
	// Отпуск по уходу за ребенком до 3 лет
	мТаблица = Неопределено;
	СписокСохранения.Свойство("ТаблицаВРОтпускДо3", мТаблица);
	Если мТаблица = Неопределено Тогда
		// попробуем поднять значение общее для регл. отчетности
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускДо3");	
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРОтпускДо3.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРОтпускДо3.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// сохранена таблица значений
		ТаблицаВРОтпускДо3.Очистить();
		Для каждого Стр Из мТаблица Цикл
			СтрокаВР = ТаблицаВРОтпускДо3.Добавить();
			СтрокаВР.ВидРасчета = Стр.ВидРасчета;
		КонецЦикла;
	КонецЕсли;
	
	
	// Отпуск по уходу за ребенком от 3 до 6 лет
	мТаблица = Неопределено;
	СписокСохранения.Свойство("ТаблицаВРОтпускОт3До6", мТаблица);
	Если мТаблица = Неопределено Тогда
		// попробуем поднять значение общее для регл. отчетности
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускОт3До6");	
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРОтпускОт3До6.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРОтпускОт3До6.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// сохранена таблица значений
		ТаблицаВРОтпускОт3До6.Очистить();
		Для каждого Стр Из мТаблица Цикл
			СтрокаВР = ТаблицаВРОтпускОт3До6.Добавить();
			СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
		КонецЦикла;
	КонецЕсли;
	
	// Отпуск по беременности и родам
	мТаблица = Неопределено;
	СписокСохранения.Свойство("ТаблицаВРОтпускПоБеременностиИРодам", мТаблица);
	Если мТаблица = Неопределено Тогда
		// попробуем поднять значение общее для регл. отчетности
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускПоБеременностиИРодам");	
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРОтпускПоБеременностиИРодам.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				СтрокаВР = ТаблицаВРОтпускПоБеременностиИРодам.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// сохранена таблица значений
		ТаблицаВРОтпускПоБеременностиИРодам.Очистить();
		Для каждого Стр Из мТаблица Цикл
			СтрокаВР = ТаблицаВРОтпускПоБеременностиИРодам.Добавить();
			СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
		КонецЦикла;
	КонецЕсли;

	// Без сохранения заработной платы
	мТаблица = Неопределено;
	СписокСохранения.Свойство("ТаблицаВРБезСохраненияЗП", мТаблица);
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда				
		ПВР = ПланыВидовРасчета["Начисления"];		
	Иначе
		ПВР = ПланыВидовРасчета["ОсновныеНачисленияОрганизаций"];		
	КонецЕсли;
	
	Если мТаблица = Неопределено Тогда
		// попробуем поднять значение общее для регл. отчетности
		мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБезСохраненияЗП");	
		Если НЕ мТаблица = Неопределено Тогда
			ТаблицаВРБезСохраненияЗП.Очистить();
			Для каждого ВидРасчета Из мТаблица Цикл
				ИмяПредопределенного = ПВР.ПолучитьИмяПредопределенного(ВидРасчета);
				Если    ИмяПредопределенного = "Замещение"
					ИЛИ ИмяПредопределенного = "Совмещение" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаВР = ТаблицаВРБезСохраненияЗП.Добавить();
				СтрокаВР.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// сохранена таблица значений
		ТаблицаВРБезСохраненияЗП.Очистить();
		Для каждого Стр Из мТаблица Цикл
			ИмяПредопределенного = ПВР.ПолучитьИмяПредопределенного(Стр.ВидРасчета);
			Если    ИмяПредопределенного = "Замещение"
				ИЛИ ИмяПредопределенного = "Совмещение" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВР = ТаблицаВРБезСохраненияЗП.Добавить();
			СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
		КонецЦикла;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		// ГПХ
		мТаблица = Неопределено;
		СписокСохранения.Свойство("ТаблицаВРГПХ", мТаблица);
		Если мТаблица = Неопределено Тогда
			// попробуем поднять значение общее для регл. отчетности
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРГПХ");	
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРГПХ.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРГПХ.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			КонецЕсли;
		Иначе
			// сохранена таблица значений
			ТаблицаВРГПХ.Очистить();
			Для каждого Стр Из мТаблица Цикл
				СтрокаВР = ТаблицаВРГПХ.Добавить();
				СтрокаВР.ВидРасчета 		= Стр.ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если НЕ СписокСохранения.Свойство("УказыватьПериодДляВсехНачислений") Тогда
		УказыватьПериодДляВсехНачислений = Истина;
	Иначе	
	    УказыватьПериодДляВсехНачислений = СписокСохранения.УказыватьПериодДляВсехНачислений;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ВыделятьЕСВДляОтпускных") Тогда
		ВыделятьЕСВДляОтпускных = Истина;
	Иначе	
	    ВыделятьЕСВДляОтпускных = СписокСохранения.ВыделятьЕСВДляОтпускных;
	КонецЕсли;

	
	УстановитьФорматВывода();
	Расчет();
	
	// Управляем видимостью страниц основной панели формы
	мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();
	ПоказатьСтраницыОтчета();
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// Создает новую строку многострочного раздела.
//
Процедура ВставитьДополнительнуюСтроку(ИмяГруппы = Неопределено)
	Перем СтруктураГруппы;
	
	Если ИмяГруппы = Неопределено Тогда
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда 
		Сообщить(НСтр("ru='Установите курсор на строке многострочной части. Сейчас вы выбрали не верную строку!';uk='встановіть курсор на строку багатостроковї частини! Зараз ві обрали не вірну строку!'"), СтатусСообщения.Внимание);
		Возврат;
    КонецЕсли; 
	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	
	СдвигСтрок = 0;
	НомерВерхЯчейкиОбласти = 999999999;
	НомерНижнЯчейкиОбласти = 0;
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
		
		ИмяКолонки          = Колонка.Имя;
		
		ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(КолСтрок,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];

		Координаты = Новый Структура();
		// определяем границы ячейки исходной области
		Если НомерВерхЯчейкиОбласти > ОбластьЯчейки.Верх тогда
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		КонецЕсли;
		
		Если НомерНижнЯчейкиОбласти < ОбластьЯчейки.Низ тогда
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		КонецЕсли;
		
		Если СдвигСтрок < ОбластьЯчейки.Низ - ОбластьЯчейки.Верх + 1 Тогда
			СдвигСтрок = ОбластьЯчейки.Низ - ОбластьЯчейки.Верх + 1;
		КонецЕсли;
		
	КонецЦикла;
    	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	// определяем вставляемую область
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

	// добавляем в таблицу новую строку
	ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
    КолСтрокНов = КолСтрок + 1;
	// переопределяем имена вставленной области
	ВерхОбластиНомера = 999999999;
	НизОбластиНомера  = 0;
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл                    
		ИмяКолонки          = Колонка.Имя;
		
		//Если ...
		ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(КолСтрок,   "ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
		ИмяНовОбластиЯчейки = Сред(ИмяКолонки,1,3) + Формат(КолСтрокНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
		//КонецЕсли;
		
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
		
		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
		
		Если ВерхОбластиНомера > НомерВерхСтрокиЯчейки + СдвигСтрок Тогда
			ВерхОбластиНомера = НомерВерхСтрокиЯчейки  + СдвигСтрок ;
		КонецЕсли;
		
		Если НизОбластиНомера < НомерНижнСтрокиЯчейки + СдвигСтрок Тогда
			НизОбластиНомера = НомерНижнСтрокиЯчейки  + СдвигСтрок ;
		КонецЕсли;
		
		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
		
		// очищаем значения ячеек вставленной области
		Если (ОбластьЯчейки.СодержитЗначение)  Тогда
			ОбластьЯчейки.Очистить();
			ОбластьЯчейки.Примечание.Текст = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ВерхОбластиНомера,1,НизОбластиНомера, 2);
	ОбластьТекстовыйНомер.Текст = Строка(КолСтрок + 1);
	
	ИмяТекущейОбласти = Сред (СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(КолСтрокНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред (СтруктураГруппы.Колонки[0].Имя,4);
	
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Расчет();
	
	Модифицированность = Истина;

КонецПроцедуры // ВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура УдалитьДополнительнуюСтроку()
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	Если ИмяГруппы = Неопределено Тогда
		Сообщить(НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

		Попытка
				НомУдаляемойСтроки = Число(Сред(ИмяЯчейки,4,6));
				КоличествоСтрокПослеУдаления = СтруктураГруппы.Количество() -1;
				Ответ = Вопрос(НСтр("ru='Удалить выбранную строку?"
				"(Внимание! данная операция необратима)';uk='Видалити обраний рядок?"
				"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

  				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;

		Исключение
			Ответ = Вопрос(НСтр("ru='Удалить последнюю строку?"
								"(Внимание! данная операция необратима)';uk='Видалити останній рядок?"
								"(Увага! дана операція необоротна)'"), РежимДиалогаВопрос.ДаНетОтмена, 60, КодВозвратаДиалога.Да);

				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
			НомУдаляемойСтроки = СтруктураГруппы.Количество();
		КонецПопытки;
 
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочныхРазделов();

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = 999999999;
		НомерНижнЯчейкиОбласти = 0;
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			
			ИмяКолонки          = Колонка.Имя;
			
			ИмяОбластиЯчейки    = Сред(ИмяКолонки,1,3) + Формат(НомУдаляемойСтроки,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];

			Координаты = Новый Структура();
			// определяем границы ячейки исходной области
			Если НомерВерхЯчейкиОбласти > ОбластьЯчейки.Верх тогда
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			КонецЕсли;
			
			Если НомерНижнЯчейкиОбласти < ОбластьЯчейки.Низ тогда
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			КонецЕсли;
			
		КонецЦикла;		
		
		// Определим область удаляемой строки
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );

		// непосредственно удаляем область строки табличного документа
		ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда    
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
              	ТекСтрока = СтруктураГруппы[НСтр-1];
                НСтрНов = НСтр - 1;
				ВерхОбластиНомера = 999999999;
				НизОбластиНомера  = 0;
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяСдвинутойЯчейки      = Сред(Колонка.Имя,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(Колонка.Имя,4);
					НовоеИмяСдвинутойЯчейки = Сред(Колонка.Имя,1,3) + Формат(НСтрНов,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(Колонка.Имя,4);

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
					
					Если ВерхОбластиНомера > ОбластьСдвинутойЯчейки.Верх Тогда
						ВерхОбластиНомера = ОбластьСдвинутойЯчейки.Верх;
					КонецЕсли;
					
					Если НизОбластиНомера < ОбластьСдвинутойЯчейки.Низ Тогда
						НизОбластиНомера = ОбластьСдвинутойЯчейки.Низ;
					КонецЕсли;
					
				КонецЦикла;
				
				ОбластьТекстовыйНомер = ТекТабличноеПоле.Область(ВерхОбластиНомера,1,НизОбластиНомера, 2);
				ОбластьТекстовыйНомер.Текст = Строка(НСтрНов);
					
	          КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					
				//Если (ТекТабличноеПоле = мПриложение1) Тогда
					ИмяЯчейки    = Сред(КолонкаТаблицы.Имя,1,3) + Формат(НомерСтрокиВФормеТаблицы,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(КолонкаТаблицы.Имя,4);
				//КонецЕсли;
				
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];

				Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
					ПервыйНомерВГруппе = 1;
					// обновляем порядковый номер строки
					НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
					СтрокаТаблицы[КолонкаТаблицы.Имя] = НовыйПорядковыйНомер;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;

		// Обновляем экранную форму табличного документа
		ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	
	ИмяТекущейОбласти    = Сред(СтруктураГруппы.Колонки[0].Имя,1,3) + Формат(НомТекущейСтроки,"ЧЦ=6;ЧВН=0;ЧГ=;") +  Сред(СтруктураГруппы.Колонки[0].Имя,4);
	
	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = ТекТабличноеПоле;

	Расчет();
	
	Модифицированность = Истина;

КонецПроцедуры // УдалитьДополнительнуюСтроку()	


// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
Процедура Расчет()
	Перем СтруктураГруппы5,СтруктураГруппы6,СтруктураГруппы7;
	
	
	мТаблица1.Области.П1.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П1_1.Значение) 
								  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П1_2.Значение)	 
								  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П1_3.Значение)	 
								  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П1_4.Значение)
								  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П1_5.Значение);
	
								  
	мТаблица1.Области.П2_1.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1_3.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1_4.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1_5.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1_6.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1_7.Значение);
									
	мТаблица1.Области.П2_2.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_2_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_2_2.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_2_3.Значение);
									
	мТаблица1.Области.П2_3.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_3_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_3_2.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_3_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_3_4.Значение);
									
	мТаблица1.Области.П2_4.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_4_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_4_2.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_4_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_4_4.Значение);
									
	мТаблица1.Области.П2.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П2_4.Значение);
									
									
	мТаблица1.Области.П3_1.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_3.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_4.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_5.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_6.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_7.Значение);
									
	мТаблица1.Области.П3_2.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_2_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_2_2.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_2_3.Значение);
									
	мТаблица1.Области.П3_3.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_2.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_4.Значение);
									
	мТаблица1.Области.П3_4.Значение = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_2.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_4.Значение);
									
	мТаблица1.Области.П3.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4.Значение);
								  
									
	мТаблица1.Области.П4_1.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П4_1_1.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П4_1_2.Значение)
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П4_1_3.Значение);
									  
	мТаблица1.Области.П4.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П4_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П4_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П4_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П4_4.Значение);

									
	мТаблица1.Области.П5.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_4.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_5.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_6.Значение);
									
	мТаблица1.Области.П6_1.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_1.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_2.Значение)
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_3.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_4.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_5.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_6.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_7.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_8.Значение);
									  
	мТаблица1.Области.П6_3.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_4.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_5.Значение);
									
	мТаблица1.Области.П6.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3.Значение);
									
									
	мТаблица1.Области.П7_1.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_1.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_2.Значение)
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_3.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_4.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_5.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_6.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_7.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_8.Значение);
									  
	мТаблица1.Области.П7_3.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_3.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_4.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_5.Значение);
									
	мТаблица1.Области.П7.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_2.Значение)
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3.Значение);
									
									
	мТаблица1.Области.П8.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3.Значение) 
								    + ОкруглитьЧислоПоФормату(мТаблица1.Области.П5.Значение)
									+ ОкруглитьЧислоПоФормату(мТаблица1.Области.П6.Значение)
									- ОкруглитьЧислоПоФормату(мТаблица1.Области.П7.Значение);
									
									
	мТаблица1.Области.П8_1.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_1.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_1.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_1.Значение);
									
	мТаблица1.Области.П8_2.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_2.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_2.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_2.Значение);
									
									  
	мТаблица1.Области.П8_3.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_3.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_3.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_3.Значение);
									  
	мТаблица1.Области.П8_4.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_4.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_2.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_2.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_4.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_4.Значение);
									  
	мТаблица1.Области.П8_5.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_5.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_2_2.Значение)
	                                  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_3.Значение)
	                                  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_3.Значение)
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_5.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_5.Значение);
									  
	мТаблица1.Области.П8_6.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_6.Значение) 
	                                  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_4.Значение)
	                                  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_4.Значение)
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_6.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_6.Значение);
									  
	мТаблица1.Области.П8_7.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_2_1.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_7.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_7.Значение);
									  
	мТаблица1.Области.П8_8.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_1_7.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_2_3.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_3_1.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П3_4_1.Значение)
									  + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_1_8.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_1_8.Значение);
									  
	мТаблица1.Области.П8_9.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_1.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_1.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_1.Значение);
									  
	мТаблица1.Области.П8_10.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_2.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_2.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_2.Значение);
									  
	мТаблица1.Области.П8_11.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_3.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_3.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_3.Значение);
									  
	мТаблица1.Области.П8_12.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_4.Значение) 
								      + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_4.Значение)
								 	  - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_4.Значение);
									  
	мТаблица1.Области.П8_13.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_5.Значение) 
	                                   + ОкруглитьЧислоПоФормату(мТаблица1.Области.П5_6.Значение) 
									   + ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_3_5.Значение)
								 	   - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_3_5.Значение);
									  
	мТаблица1.Области.П8_14.Значение   = ОкруглитьЧислоПоФормату(мТаблица1.Области.П6_2.Значение) 
								       - ОкруглитьЧислоПоФормату(мТаблица1.Области.П7_2.Значение);
									  
									  
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, СтруктураГруппы5);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, СтруктураГруппы6);
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, СтруктураГруппы7);
	
	Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы5, мИдГруппы5) Тогда
		мПереченьТаблиц.Области.СтраницТаб5.Значение = 0;			
		мПереченьТаблиц.Области.СтрокТаб5.Значение   = 0;			
	Иначе	
		мПереченьТаблиц.Области.СтраницТаб5.Значение = Цел(СтруктураГруппы5.Количество()/15) + ?(СтруктураГруппы5.Количество()%15 = 0, 0, 1);			
		мПереченьТаблиц.Области.СтрокТаб5.Значение = СтруктураГруппы5.Количество();			
	КонецЕсли;
	
	Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы6, мИдГруппы6) Тогда
		мПереченьТаблиц.Области.СтраницТаб6.Значение = 0;			
		мПереченьТаблиц.Области.СтрокТаб6.Значение   = 0;			
	Иначе	
		мПереченьТаблиц.Области.СтраницТаб6.Значение = Цел(СтруктураГруппы6.Количество()/10) + ?(СтруктураГруппы6.Количество()%10 = 0, 0, 1);			
		мПереченьТаблиц.Области.СтрокТаб6.Значение = СтруктураГруппы6.Количество();			
	КонецЕсли;
	
	Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы7, мИдГруппы7) Тогда
		мПереченьТаблиц.Области.СтраницТаб7.Значение = 0;			
		мПереченьТаблиц.Области.СтрокТаб7.Значение   = 0;			
	Иначе	
		мПереченьТаблиц.Области.СтраницТаб7.Значение = Цел(СтруктураГруппы7.Количество()/10) + ?(СтруктураГруппы7.Количество()%10 = 0, 0, 1);			
		мПереченьТаблиц.Области.СтрокТаб7.Значение = СтруктураГруппы7.Количество();			
	КонецЕсли;
	
	мПереченьТаблиц.Области.СтраницВсего.Значение =  мПереченьТаблиц.Области.СтраницТаб1.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб2.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб3.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб4.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб5.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб6.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб7.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб8.Значение
												  +  мПереченьТаблиц.Области.СтраницТаб9.Значение;
												  
	мПереченьТаблиц.Области.СтрокВсего.Значение   =  мПереченьТаблиц.Области.СтрокТаб5.Значение
												  +  мПереченьТаблиц.Области.СтрокТаб6.Значение
												  +  мПереченьТаблиц.Области.СтрокТаб7.Значение
												  +  мПереченьТаблиц.Области.СтрокТаб8.Значение
												  +  мПереченьТаблиц.Области.СтрокТаб9.Значение;
	
	мТаблица6.Области.СуммаНачисленоВсего.Значение = СтруктураГруппы6.Итог("Т6_СуммаНачислено");
	мТаблица6.Области.СуммаНачисленоМаксБазаВсего.Значение = СтруктураГруппы6.Итог("Т6_СуммаНачисленоМаксБаза");
	мТаблица6.Области.СуммаВзносовВсего.Значение = СтруктураГруппы6.Итог("Т6_СуммаВзносов");
	
КонецПроцедуры // Расчет()

//выпоняет расчет числа застрахованных лиц и лиц, получающих пособие по уходу за ребенком
Процедура РассчитатьЧислоЗастрахованныхЛиц (ТаблицаБазВзносовОтчетногоПериода)
	
	ТаблицаКоличестваЗастрахованныхЛиц = ТаблицаБазВзносовОтчетногоПериода.Скопировать();
	ТаблицаКоличестваЗастрахованныхЛиц.Свернуть("ФизЛицо, ФизЛицоПол", "");
	
	СообщениеВыводилось = Ложь;
	Для каждого ФизЛицо Из ТаблицаКоличестваЗастрахованныхЛиц Цикл
		Если НЕ ЗначениеЗаполнено(ФизЛицо.ФизЛицоПол) Тогда
			Если СообщениеВыводилось = Ложь Тогда
				СообщениеВыводилось = Истина;
				Сообщить("В карточках следующих физ.лиц не указан их пол. Заполнение показателя в шапке Таблицы 1 ""Кількість застрахованих осіб у звітному періоді, у тому числі"" будет не корректным:");
			КонецЕсли;
			Сообщить(Символы.Таб + ФизЛицо.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьЗначениеПоказателя("ЗастрЛиц", ТаблицаКоличестваЗастрахованныхЛиц.Количество());	
	
	НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическихЛиц.Мужской));
	УстановитьЗначениеПоказателя("ЗастрЛицМ", НайденныеСтроки.Количество());	

	НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическихЛиц.Женский));
	УстановитьЗначениеПоказателя("ЗастрЛицЖ", НайденныеСтроки.Количество());	
	
КонецПроцедуры

Функция ПолучитьСписокВидовРасчетовПоВидуНалога(Налог) Экспорт // Экспортируем для использования в форме настройки 1С:Звіт 
	
	ВидыРасчетов = Новый Массив;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПериодОтчета", НачалоМесяца(мДатаКонцаПериодаОтчета));
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Налог", Налог);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Базовые.ВидРасчета 
	|ИЗ 
	|	ПланВидовРасчета.ВзносыВФонды.БазовыеВидыРасчета КАК Базовые
	|ГДЕ
	|	Базовые.Ссылка В (ВЫБРАТЬ ВидРасчета ИЗ РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог В (&Налог)))
	|";
	ВидыРасчетовПоНалогу = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из ВидыРасчетовПоНалогу Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции // ()

Функция ПолучитьСписокБезСохранения() Экспорт // Экспортируем для использования в форме настройки 1С:Звіт
	
	ВидыРасчетов = Новый Массив;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СпособНулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = &СпособНулеваяСумма
		|";
		
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПланВидовРасчета.ОсновныеНачисленияОрганизаций","ПланВидовРасчета.Начисления");
		ПВР = ПланыВидовРасчета["Начисления"];		
	Иначе
		ПВР = ПланыВидовРасчета["ОсновныеНачисленияОрганизаций"];		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из Выборка Цикл
		ИмяПредопределенного = ПВР.ПолучитьИмяПредопределенного(ВидРасчета);
		Если    ИмяПредопределенного = "Замещение"
			ИЛИ ИмяПредопределенного = "Совмещение" Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //

Функция ПолучитьСписокДекретные() Экспорт // Экспортируем для использования в форме настройки 1С:Звіт
	
	ВидыРасчетов = Новый Массив;
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		//Нет такого
	ИначеЕсли РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		ВидыРасчетов.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛПоБеременностиИРодам);
	Иначе
		ВидыРасчетов.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам);
	КонецЕсли;	

	Возврат ВидыРасчетов;

КонецФункции //

Функция ПолучитьСписокПоУходу() Экспорт // Экспортируем для использования в форме настройки 1С:Звіт
	
	ВидыРасчетов = Новый Массив;

	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		//Нет такого
		Возврат ВидыРасчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ВидВремениПоУходу", Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК Начисления
		|ГДЕ
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ВидВремениПоУходу
		|	И НЕ Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
		|";
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПланВидовРасчета.ОсновныеНачисленияОрганизаций","ПланВидовРасчета.Начисления");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из Выборка Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //


Функция ПолучитьСписокПоУходуДо3() Экспорт // Экспортируем для использования в форме настройки 1С:Звіт
	
	ВидыРасчетов = Новый Массив;

	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		//Нет такого
		Возврат ВидыРасчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ВидВремениПоУходу", Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК Начисления
		|ГДЕ
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ВидВремениПоУходу
		|	И Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.НулеваяСумма)
		|";
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПланВидовРасчета.ОсновныеНачисленияОрганизаций","ПланВидовРасчета.Начисления");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из Выборка Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //

Процедура РассчитатьСуммуФактическихЗатратНаОплатуТруда()
	
	БольничныеПредприятие 	= 0;
	БольничныеФСС 			= 0;
	БольничныеФССНесчСлучай = 0;
	ГПХ						= 0;
	Зарплата				= 0;
	ОтпускБеременностьИРоды = 0;
	
	Если 	РегламентированнаяОтчетность.ИДКонфигурации() = "УТП"
		ИЛИ РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ИмяРегистра = "Начисления";
	Иначе	
		ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций";
	КонецЕсли;
	
	//запросы по суммам начислений
	ЗапросНачисленияБольн = Новый Запрос ();
	ЗапросНачисленияБольн.Текст = "
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботников.ВидРасчета 	  КАК ВидРасчета,
	|	СУММА(ОсновныеНачисленияРаботников.Результат) КАК Результат
	|ИЗ
	|	РегистрРасчета."+ИмяРегистра+" КАК ОсновныеНачисленияРаботников
	|
	|ГДЕ
	|	  ОсновныеНачисленияРаботников.Организация = &Организация
	| " + УсловиеНаПодразделение(, ЗапросНачисленияБольн) + "
	|	И ОсновныеНачисленияРаботников.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	|   И ОсновныеНачисленияРаботников.ВидРасчета В (&ВидыРасчетов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботников.ВидРасчета";
	
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета);
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаКон" , мДатаКонцаПериодаОтчета);
	ЗапросНачисленияБольн.УстановитьПараметр("Организация",   Организация);
	
	// виды расчетов по больничным
	ВидыРасчетов = ТаблицаВРБольничныеПредприятие.ВыгрузитьКолонку("ВидРасчета");
	Для каждого ВидРасчета Из ТаблицаВРБольничныеФСС.ВыгрузитьКолонку("ВидРасчета") Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ТаблицаВРБольничныеФССНесчСлучай.ВыгрузитьКолонку("ВидРасчета") Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ТаблицаВРОтпускПоБеременностиИРодам.ВыгрузитьКолонку("ВидРасчета") Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	// виды расчетов по ГПХ
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ОблагаемоеЕСВГПХ = ТаблицаВРГПХ.ВыгрузитьКолонку("ВидРасчета");
		Для каждого ВидРасчета Из ОблагаемоеЕСВГПХ Цикл
			ВидыРасчетов.Добавить(ВидРасчета);
		КонецЦикла;
	Иначе
		ОблагаемоеЕСВГПХ = ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВГПХ); 
		Для каждого ВидРасчета Из ОблагаемоеЕСВГПХ Цикл
			ВидыРасчетов.Добавить(ВидРасчета);
		КонецЦикла;
	КонецЕсли;
	// остальные виды расчетов, которые имеют отношение к ЕСВ
	СЗ = Новый Массив;
	СЗ.Добавить(Справочники.Налоги.ЕСВРаботники);
	СЗ.Добавить(Справочники.Налоги.ЕСВИнвалидыУТОГУТОС);
	СЗ.Добавить(Справочники.Налоги.ЕСВЛетчики);
	СЗ.Добавить(Справочники.Налоги.ЕСВРаботникиСР);
	ВсеОблагаемоеЕСВ = ПолучитьСписокВидовРасчетовПоВидуНалога(СЗ); 
	Для каждого ВидРасчета Из ВсеОблагаемоеЕСВ Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	// выполняем запрос по начислениям
	ЗапросНачисленияБольн.УстановитьПараметр("ВидыРасчетов",   ВидыРасчетов);
	Выборка = ЗапросНачисленияБольн.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ТаблицаВРБольничныеПредприятие.Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеПредприятие = БольничныеПредприятие + Выборка.Результат;
			
		ИначеЕсли НЕ ТаблицаВРБольничныеФСС.Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеФСС = БольничныеФСС + Выборка.Результат;
			
		ИначеЕсли НЕ ТаблицаВРБольничныеФССНесчСлучай.Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеФССНесчСлучай = БольничныеФССНесчСлучай + Выборка.Результат;
			
		ИначеЕсли НЕ ОблагаемоеЕСВГПХ.Найти(Выборка.ВидРасчета) = Неопределено Тогда	
			
			ГПХ = ГПХ + Выборка.Результат; 
			
		ИначеЕсли НЕ ТаблицаВРОтпускПоБеременностиИРодам.Найти(Выборка.ВидРасчета) = Неопределено Тогда	
			
			ОтпускБеременностьИРоды = ОтпускБеременностьИРоды + Выборка.Результат; 
		Иначе
			// все остальное попадает в п. 1.1.
			Зарплата = Зарплата + Выборка.Результат;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	УстановитьЗначениеПоказателя("П1_1",   Зарплата);	
	
	УстановитьЗначениеПоказателя("П1_2",   ГПХ);	
	
	УстановитьЗначениеПоказателя("П1_3",   БольничныеПредприятие);
	
	УстановитьЗначениеПоказателя("П1_4",   БольничныеФСС + БольничныеФССНесчСлучай);	
	
	УстановитьЗначениеПоказателя("П1_4_1", БольничныеФССНесчСлучай);	
	
	УстановитьЗначениеПоказателя("П1_5",   ОтпускБеременностьИРоды);
	
КонецПроцедуры

//выполняет расчет сальдо взаиомрасчетов с фондом
Процедура РассчитатьСальдоВзаиморасчетовСФондом()
	
	Если УсловиеНаПодразделение() <> "" Тогда
		Сообщить("В форме отчета указано подразделение. Невозможно заполнить суммы в Приложении 1 к Таблице 1 только по подразделению. Будут указаны суммы в целом по организации.");
	КонецЕсли;
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") Тогда
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
		//звітного періоду: 
		
		ЗапросРасчетыСФондом = Новый Запрос;
		ЗапросРасчетыСФондом.Текст ="
		|ВЫБРАТЬ
		|	ЕстьNULL(СУММА(РезультатОстаток), 0)	КАК Результат
		|
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды.Остатки(&НачДата, Организация = &Организация И СтатьяНалоговойДекларации В (&МассивСтатей))
		|
		|";
		
		ЗапросРасчетыСФондом.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
		ЗапросРасчетыСФондом.УстановитьПараметр("Организация",   Организация);
		
		ЗапросРасчетыСФондом.УстановитьПараметр("МассивСтатей",   МассивНужныхСтатей);
		
		РезультатЗапроса = ЗапросРасчетыСФондом.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат > 0 Тогда
				ПенсНачКт = РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсНачКт",ПенсНачКт);
			Иначе
				ПенсНачДт = -РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсНачДт",ПенсНачДт);
			КонецЕсли;
		КонецЕсли;
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на кінець 
		//звітного періоду:
		ЗапросРасчетыСФондом.УстановитьПараметр("НачДата", мДатаКонцаПериодаОтчета);
		
		РезультатЗапроса = ЗапросРасчетыСФондом.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			Если РезультатЗапроса.Результат > 0 Тогда
				ПенсКонКт = РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсКонКт",ПенсКонКт);
			Иначе
				ПенсКонДт = -РезультатЗапроса.Результат;
				УстановитьЗначениеПоказателя("ПенсКонДт",ПенсКонДт);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПенсНачДт = СНД(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсНачДт",ПенсНачДт);
		
		ПенсНачКт = СНК(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсНачКт",ПенсНачКт);
		
		//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на кінець 
		//звітного періоду: 
		ПенсКонДт = СКД(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсКонДт",ПенсКонДт);
		
		ПенсКонКт = СКК(Счет65_1);
		УстановитьЗначениеПоказателя("ПенсКонКт",ПенсКонКт);
	КонецЕсли;   
	   
КонецПроцедуры

Процедура ВыполнитьИнициализацию()
	
	Если     РегламентированнаяОтчетность.ИДКонфигурации() = "БП"
		Или  РегламентированнаяОтчетность.ИДКонфигурации() = "УПП"
		Или  РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		
		ПС = ПланыСчетов["Хозрасчетный"];
		Счет65_1      = ПС.РасчетыПоПенсионномуОбеспечению;
		Счет66        = ПС.РасчетыПоОплатеТруда;
		Счет66_1      = ПС.РасчетыПоЗаработнойПлате;
		Счет66_2      = ПС.РасчетыПоДепонентам;
		Счет66_3      = ПС.РасчетыПоДругимВыплатам;
		Счет65_2      = ПС.РасчетыПоСоциальномуСтрахованию;
		Счет65_6      = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
		Счет81_5      = ПС.ОплатаДругогоНеотработанногоВремени;
		Счет91        = ПС.ОбщепроизводственныеРасходы;
		Счет92        = ПС.АдминистративныеРасходы;
		Счет93        = ПС.РасходыНаСбыт;
		Счет301       = ПС.КассаВНациональнойВалюте;
		
		// Бухгалтерский итоги по счетам
		мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
		// Бухгалтерские итоги по аналитике 
		мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
		
		МассивСубконто = Новый Массив;
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Налоги);
		МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
		
		Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
		|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
		|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
		|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
		|ОборотДт, ОборотКт,
		|КорОборотДт, КорОборотКт";
		
		ИтогиРС = "ОборотДт, ОборотКт";
		
		// Бухгалтерские итоги по счетам, без аналитики
		мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, , , , , , "Организация", Организация);
		
		// Бухгалтерские итоги по счетам, с аналитикой
		мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет,Субконто1,Субконто2", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета,,"651",МассивСубконто,,, "Организация", Организация);
		
		мБухИтогиКорРС = Обработки.БухгалтерскиеИтоги.Создать();
		Итоги = "ОборотКт,ОборотДт,КорОборотДт, КорОборотКт";	
		мБухИтогиКорРС.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Период,Счет,Субконто1,Субконто2,КорСчет", мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета,"Месяц","652,656",МассивСубконто,,, "Организация", Организация);
		
	КонецЕсли;
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	
	МассивНужныхСтатей = Новый Массив; 
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_Больничные);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ГПХ);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ИнвалидыУТОГ);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_Работники);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_РаботникиСР);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТ);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТБольничные);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТБюджетники);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТГПХ);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТИнвалиды);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТИнвалиды50);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТЛетчики);
	МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТУТОГ);
	
	Попытка
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТГПХУТОГ);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТБольничныеУТОГ);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды50);
	Исключение
	КонецПопытки;
	
	Попытка
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТСудостр);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТГПХСудостр);
	Исключение
	КонецПопытки;
	
	Попытка
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТДекретные);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТДекретныеУТОГ);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды50);
		МассивНужныхСтатей.Добавить(СтрокиДекларации.ЕСВ_Декретные);
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

// Процедура выполняет заполнение отчета автоматически по данным ИБ.
//
Процедура ЗаполнитьАвто()  Экспорт

	ВыполнитьИнициализацию();
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", Организация, "ШТАТ"); 
	УстановитьЗначениеПоказателя("Сотрудников", ТаблСреднеспЧисленности[0].Средняя);
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", Организация, "ИНВШТАТ");
	УстановитьЗначениеПоказателя("Инвалидов", ТаблСреднеспЧисленности[0].Средняя);
	
	ТаблСреднеспЧисленности = ПроведениеРасчетов.ПолучитьСреднююЧисленность(мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", Организация, "ДОПГАРАНТИИШТАТ");
	УстановитьЗначениеПоказателя("Сотр_гарантии_трудоустр", ТаблСреднеспЧисленности[0].Средняя);
	
	КолГПХ = 0;
	СозданоНовыхРМ = 0;
	ШтатнаяЧисленность = 0;
	
	Если    (РегламентированнаяОтчетность.ИДКонфигурации() = "УПП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "ЗУП") 
		ИЛИ (РегламентированнаяОтчетность.ИДКонфигурации() = "УТП") Тогда
	
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Работники.Сотрудник.ФизЛицо
		|ИЗ  Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
		|ГДЕ 
		|   Работники.Проведен
		| И Работники.ДатаОкончания >= &парамНачало
		| И Работники.ДатаНачала    <= &парамКонец
		| И Работники.Организация = &Организация
		|";	
		ЗапросГПХ.УстановитьПараметр("парамНачало",мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("парамКонец",мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("Организация",Организация);
		
		ВыборкаГПХ = ЗапросГПХ.Выполнить().Выбрать();
		КолГПХ = ВыборкаГПХ.Количество();
		
		Если УсловиеНаПодразделение() <> "" Тогда
			Сообщить("В форме отчета указано подразделение. Невозможно заполнить количество сотрудников, работающих по ГПХ в Таблице 1 только по подразделению. Будут указано количество в целом по организации.");
		КонецЕсли;
		
		ПОПЫТКА  
			ЗапросШР = Новый Запрос;
			ЗапросШР.УстановитьПараметр("парамНачало",мДатаНачалаПериодаОтчета);
			ЗапросШР.УстановитьПараметр("парамКонец",мДатаКонцаПериодаОтчета);
			ЗапросШР.УстановитьПараметр("Организация",Организация);
			
			ЗапросШР.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ШтатноеРасписаниеОрганизаций.СозданоНовыхРабочихМест) КАК СозданоНовыхРабочихМест 
			|ИЗ  РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
			|ГДЕ 
			| ШтатноеРасписаниеОрганизаций.Период >= &парамНачало
			| И ШтатноеРасписаниеОрганизаций.Период <= &парамКонец
			| И ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации.Владелец = &Организация
			|";	
			
			ВыборкаШР = ЗапросШР.Выполнить().Выбрать();
			Если ВыборкаШР.Следующий() Тогда
				СозданоНовыхРМ = ВыборкаШР.СозданоНовыхРабочихМест;
			КонецЕсли;	

			ЗапросШР.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(ШтатноеРасписаниеОрганизаций.КоличествоСтавок) КАК КоличествоСтавок 
			//|ИЗ  РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&парамКонец, ПодразделениеОрганизации.Владелец = &Организация) КАК ШтатноеРасписаниеОрганизаций
			|ИЗ  РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(&парамНачало, ПодразделениеОрганизации.Владелец = &Организация) КАК ШтатноеРасписаниеОрганизаций
			|";
			
			ВыборкаШР = ЗапросШР.Выполнить().Выбрать();
			Если ВыборкаШР.Следующий() Тогда
				ШтатнаяЧисленность = ВыборкаШР.КоличествоСтавок;
			КонецЕсли;
		Исключение
		КонецПопытки;	
	Иначе
		// по видам расчетов...
		//запросы по суммам начислений
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОсновныеНачисленияРаботников.Сотрудник.Физлицо) КАК Количество
		                  |ИЗ
		                  |	РегистрРасчета.Начисления КАК ОсновныеНачисленияРаботников
		                  |ГДЕ
		                  |	ОсновныеНачисленияРаботников.Организация = &Организация
		                  |	И ОсновныеНачисленияРаботников.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		                  |	И ОсновныеНачисленияРаботников.ВидРасчета В(&ВидыРасчетов)
						  |" + УсловиеНаПодразделение(,ЗапросГПХ) + "
						  |";
		ЗапросГПХ.УстановитьПараметр("ДатаНач",мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("Организация",Организация);
		ЗапросГПХ.УстановитьПараметр("ВидыРасчетов",ТаблицаВРГПХ.ВыгрузитьКолонку("ВидРасчета"));
		
		ВыборкаГПХ = ЗапросГПХ.Выполнить().Выбрать();
		Если ВыборкаГПХ.Следующий() Тогда
			КолГПХ = ВыборкаГПХ.Количество;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьЗначениеПоказателя("Сотр_по_ГПХ", КолГПХ);
	УстановитьЗначениеПоказателя("КоличествоНовыхРабочихМест", СозданоНовыхРМ);
	УстановитьЗначениеПоказателя("Сотрудников_штат", ШтатнаяЧисленность);
	
	РассчитатьСуммуФактическихЗатратНаОплатуТруда();
	
	Запрос = Новый Запрос();
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ИмяРегистра = "ВзносыВФондыИНалоги";
	Иначе	
	    ИмяРегистра = "ВзносыВФонды";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |    ВзносыВФондыИНалоги.Сотрудник.ФизЛицо 				 КАК ФизЛицо,
				   |    ВзносыВФондыИНалоги.Сотрудник.ФизЛицо.Пол			 КАК ФизЛицоПол,
				   |    ВзносыВФондыИНалоги.СтатьяНалоговойДекларации		 КАК СтатьяНалоговойДекларации,
				   |    ВзносыВФондыИНалоги.ТипНачисления		 			 КАК ТипНачисления,
	               |	СУММА(ВзносыВФондыИНалоги.БазаВзноса) 				 КАК База,
	               |	СУММА(ВзносыВФондыИНалоги.Результат)  				 КАК СуммаВзноса
	               |ИЗ
	               |	РегистрРасчета."+ИмяРегистра+" КАК ВзносыВФондыИНалоги
				   |
				   |ГДЕ
				   |    ВзносыВФондыИНалоги.ПериодРегистрации МЕЖДУ &ПарамНач И &ПарамКон
				   |  И ВзносыВФондыИНалоги.Организация = &Организация
				   |" + УсловиеНаПодразделение(, Запрос) + "
				   |  И ВзносыВФондыИНалоги.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)
		           |
				   |СГРУППИРОВАТЬ ПО 
				   |	ВзносыВФондыИНалоги.Сотрудник.ФизЛицо,
				   |	ВзносыВФондыИНалоги.СтатьяНалоговойДекларации,
				   |	ВзносыВФондыИНалоги.ТипНачисления
				   |";
		
	
	Запрос.УстановитьПараметр("ПарамНач",            мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ПарамКон",            мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("МассивНужныхСтатей",  МассивНужныхСтатей);
	
	РезультатЗапроса = Запрос.Выполнить();
    П2_1_1 	= 0; 	П2_1_2	= 0;	П2_1_3	= 0;	П2_1_4	= 0;	П2_1_5 = 0;	П2_1_6	= 0; 	П2_1_7	= 0;
	П3_1_1 	= 0;	П3_1_2 	= 0;    П3_1_3	= 0;  	П3_1_4	= 0;	П3_1_5 = 0; П3_1_6	= 0;	П3_1_7	= 0;
	П4_1_1 	= 0;	П4_1_2	= 0;    П4_1_3	= 0;
	П5_1	= 0;
	П6_1_1  = 0;	П6_1_2 	= 0;    П6_1_3	= 0;  	П6_1_4  = 0;    П6_1_5 = 0; П6_1_6	= 0;	П6_1_7 = 0;	П6_1_8	= 0;
	П7_1_1	= 0;    П7_1_2	= 0;    П7_1_3  = 0;  	П7_1_4	= 0;    П7_1_5 = 0; П7_1_6	= 0;    П7_1_7 = 0; П7_1_8  = 0;
	
	П2_2_1	= 0;    П2_2_2	= 0;	П2_2_3	= 0;	
	П3_2_1  = 0;    П3_2_2	= 0;	П3_2_3	= 0;
	П4_2	= 0;
	П5_2	= 0;
	
	П2_3_1  = 0;    П2_3_2	= 0;	П2_3_3	= 0;	П2_3_4	= 0;
	
	П2_4_1  = 0;    П2_4_2	= 0;	П2_4_3	= 0;	П2_4_4	= 0;
	
	П3_3_1  = 0;    П3_3_2	= 0;	П3_3_3	= 0;    П3_3_4	= 0;
	П3_4_1  = 0;    П3_4_2	= 0;	П3_4_3	= 0;    П3_4_4	= 0;
	П4_3	= 0;
	П4_4	= 0;
	
	П5_3	= 0;
	П6_3_1	= 0;    П6_3_2	= 0;    П6_3_3	= 0;	П6_3_4 	= 0;	П6_3_5 = 0;
	П7_3_1  = 0;    П7_3_2	= 0;    П7_3_3	= 0;    П7_3_4	= 0;    П7_3_5 = 0;
	
	П5_4	= 0;
	П6_4	= 0;	
	П7_4 	= 0;
	
	П5_5	= 0;
	П5_6	= 0;

	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаБазВзносов = РезультатЗапроса.Выгрузить();
		
		//РассчитатьЧислоЗастрахованныхЛиц(ТаблицаБазВзносов);
		ТаблицаБазВзносов.Свернуть("СтатьяНалоговойДекларации, ТипНачисления", "База, СуммаВзноса");
		Для каждого СтрокаБаз Из ТаблицаБазВзносов Цикл
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТ Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_1_1 = П2_1_1 + СтрокаБаз.База;
					П3_1_1 = П3_1_1 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_1 = П6_1_1 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_4 = П7_4 - СтрокаБаз.База;
					П7_1_1 = П7_1_1 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТБюджетники Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_1_2 = П2_1_2 + СтрокаБаз.База;
					П3_1_2 = П3_1_2 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_2 = П6_1_2 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_4 = П7_4 - СтрокаБаз.База;
					П7_1_2 = П7_1_2 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТЛетчики Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_1_3 = П2_1_3 + СтрокаБаз.База;
					П3_1_3 = П3_1_3 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_3 = П6_1_3 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_4 = П7_4 - СтрокаБаз.База;
					П7_1_3 = П7_1_3 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТИнвалиды Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_1_4 = П2_1_4 + СтрокаБаз.База;
					П3_1_4 = П3_1_4 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_4 = П6_1_4 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_4 = П7_4 - СтрокаБаз.База;
					П7_1_4 = П7_1_4 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТУТОГ Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_1_5 = П2_1_5 + СтрокаБаз.База;
					П3_1_5 = П3_1_5 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_5 = П6_1_5 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_4 = П7_4 - СтрокаБаз.База;
					П7_1_5 = П7_1_5 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТИнвалиды50 Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_1_6 = П2_1_6 + СтрокаБаз.База;
					П3_1_6 = П3_1_6 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_6 = П6_1_6 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_4 = П7_4 - СтрокаБаз.База;
					П7_1_6 = П7_1_6 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТСудостр Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_1_7 = П2_1_7 + СтрокаБаз.База;
						П3_1_7 = П3_1_7 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_8 = П6_1_8 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_8 = П7_1_8 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТГПХ Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_2_1 = П2_2_1 + СтрокаБаз.База;
					П3_2_1 = П3_2_1 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_7 = П6_1_7 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_1_7 = П7_1_7 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТГПХУТОГ Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_2_2 = П2_2_2 + СтрокаБаз.База;
						П3_2_2 = П3_2_2 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_5 = П6_1_5 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_5 = П7_1_5 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТГПХСудостр Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_2_3 = П2_2_3 + СтрокаБаз.База;
						П3_2_3 = П3_2_3 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_8 = П6_1_8 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_8 = П7_1_8 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТБольничные Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П2_3_1 = П2_3_1 + СтрокаБаз.База;
					П3_3_1 = П3_3_1 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_4 = П6_4 + СтрокаБаз.База;
					П6_1_8 = П6_1_8 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_4 = П7_4 - СтрокаБаз.База;
					П7_1_8 = П7_1_8 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			

			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_3_2 = П2_3_2 + СтрокаБаз.База;
						П3_3_2 = П3_3_2 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_4 = П6_1_4 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_4 = П7_1_4 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТБольничныеУТОГ Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_3_3 = П2_3_3 + СтрокаБаз.База;
						П3_3_3 = П3_3_3 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_5 = П6_1_5 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_5 = П7_1_5 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды50 Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_3_4 = П2_3_4 + СтрокаБаз.База;
						П3_3_4 = П3_3_4 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_6 = П6_1_6 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_6 = П7_1_6 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
            Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТДекретные Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_4_1 = П2_4_1 + СтрокаБаз.База;
						П3_4_1 = П3_4_1 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_8 = П6_1_8 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_8 = П7_1_8 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;

			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_4_2 = П2_4_2 + СтрокаБаз.База;
						П3_4_2 = П3_4_2 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_4 = П6_1_4 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_4 = П7_1_4 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТДекретныеУТОГ Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_4_3 = П2_4_3 + СтрокаБаз.База;
						П3_4_3 = П3_4_3 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_5 = П6_1_5 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_5 = П7_1_5 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды50 Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П2_4_4 = П2_4_4 + СтрокаБаз.База;
						П3_4_4 = П3_4_4 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_4 = П6_4 + СтрокаБаз.База;
						П6_1_6 = П6_1_6 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_4 = П7_4 - СтрокаБаз.База;
						П7_1_6 = П7_1_6 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;	
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_Работники Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П4_1_1 = П4_1_1 + СтрокаБаз.База;
					П5_1 = П5_1 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_3_1 = П6_3_1 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_3_1 = П7_3_1 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ИнвалидыУТОГ Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П4_1_2 = П4_1_2 + СтрокаБаз.База;
					П5_2 = П5_2 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_3_2 = П6_3_2 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_3_2 = П7_3_2 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_РаботникиСР Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П4_1_3 = П4_1_3 + СтрокаБаз.База;
					П5_3 = П5_3 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_3_3 = П6_3_3 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_3_3 = П7_3_3 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_ГПХ Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П4_2 = П4_2 + СтрокаБаз.База;
					П5_4 = П5_4 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_3_4 = П6_3_4 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_3_4 = П7_3_4 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;	
			КонецЕсли;
			
			Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_Больничные Тогда
				Если СтрокаБаз.ТипНачисления < 2 Тогда
					П4_3 = П4_3 + СтрокаБаз.База;
					П5_5 = П5_5 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					П6_3_5 = П6_3_5 + СтрокаБаз.СуммаВзноса;
				ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					П7_3_5 = П7_3_5 - СтрокаБаз.СуммаВзноса;
				КонецЕсли;
			КонецЕсли;
			
            Попытка
				Если СтрокаБаз.СтатьяНалоговойДекларации = СтрокиДекларации.ЕСВ_Декретные Тогда
					Если СтрокаБаз.ТипНачисления < 2 Тогда
						П4_4 = П4_4 + СтрокаБаз.База;
						П5_6 = П5_6 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
						П6_3_5 = П6_3_5 + СтрокаБаз.СуммаВзноса;
					ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
						П7_3_5 = П7_3_5 - СтрокаБаз.СуммаВзноса;
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	УстановитьЗначениеПоказателя("П2_1_1", 	П2_1_1);УстановитьЗначениеПоказателя("П2_1_2", П2_1_2);УстановитьЗначениеПоказателя("П2_1_3", П2_1_3);УстановитьЗначениеПоказателя("П2_1_4", П2_1_4);УстановитьЗначениеПоказателя("П2_1_5", П2_1_5);УстановитьЗначениеПоказателя("П2_1_6", П2_1_6);УстановитьЗначениеПоказателя("П2_1_7", П2_1_7);
	УстановитьЗначениеПоказателя("П3_1_1", 	П3_1_1);УстановитьЗначениеПоказателя("П3_1_2", П3_1_2);УстановитьЗначениеПоказателя("П3_1_3", П3_1_3);УстановитьЗначениеПоказателя("П3_1_4", П3_1_4);УстановитьЗначениеПоказателя("П3_1_5", П3_1_5);УстановитьЗначениеПоказателя("П3_1_6", П3_1_6);УстановитьЗначениеПоказателя("П3_1_7", П3_1_7);
	УстановитьЗначениеПоказателя("П4_1_1", 	П4_1_1);УстановитьЗначениеПоказателя("П4_1_2", П4_1_2);УстановитьЗначениеПоказателя("П4_1_3", П4_1_3);
	УстановитьЗначениеПоказателя("П5_1", П5_1);
	УстановитьЗначениеПоказателя("П6_1_1", П6_1_1);УстановитьЗначениеПоказателя("П6_1_2", П6_1_2);УстановитьЗначениеПоказателя("П6_1_3", П6_1_3);УстановитьЗначениеПоказателя("П6_1_4", П6_1_4);УстановитьЗначениеПоказателя("П6_1_5", П6_1_5);УстановитьЗначениеПоказателя("П6_1_6", П6_1_6);УстановитьЗначениеПоказателя("П6_1_7", П6_1_7);УстановитьЗначениеПоказателя("П6_1_8", П6_1_8);
	УстановитьЗначениеПоказателя("П7_1_1", П7_1_1);УстановитьЗначениеПоказателя("П7_1_2", П7_1_2);УстановитьЗначениеПоказателя("П7_1_3", П7_1_3);УстановитьЗначениеПоказателя("П7_1_4", П7_1_4);УстановитьЗначениеПоказателя("П7_1_5", П7_1_5);УстановитьЗначениеПоказателя("П7_1_6", П7_1_6);УстановитьЗначениеПоказателя("П7_1_7", П7_1_7);УстановитьЗначениеПоказателя("П7_1_8", П7_1_8);

	УстановитьЗначениеПоказателя("П2_2_1", 	П2_2_1);УстановитьЗначениеПоказателя("П2_2_2", П2_2_2);УстановитьЗначениеПоказателя("П2_2_3", П2_2_3);
	УстановитьЗначениеПоказателя("П3_2_1", 	П3_2_1);УстановитьЗначениеПоказателя("П3_2_2", П3_2_2);УстановитьЗначениеПоказателя("П3_2_3", П3_2_3);
	УстановитьЗначениеПоказателя("П4_2", 	П4_2);
	УстановитьЗначениеПоказателя("П5_2", 	П5_2);
	
	УстановитьЗначениеПоказателя("П2_3_1", 	П2_3_1);УстановитьЗначениеПоказателя("П2_3_2", П2_3_2);УстановитьЗначениеПоказателя("П2_3_3", П2_3_3);УстановитьЗначениеПоказателя("П2_3_4", П2_3_4);
	
	УстановитьЗначениеПоказателя("П2_4_1", 	П2_4_1);УстановитьЗначениеПоказателя("П2_4_2", П2_4_2);УстановитьЗначениеПоказателя("П2_4_3", П2_4_3);УстановитьЗначениеПоказателя("П2_4_4", П2_4_4);	
	
	УстановитьЗначениеПоказателя("П3_3_1", 	П3_3_1);УстановитьЗначениеПоказателя("П3_3_2", П3_3_2);УстановитьЗначениеПоказателя("П3_3_3", П3_3_3);УстановитьЗначениеПоказателя("П3_3_4", П3_3_4);
	
	УстановитьЗначениеПоказателя("П3_4_1", 	П3_4_1);УстановитьЗначениеПоказателя("П3_4_2", П3_4_2);УстановитьЗначениеПоказателя("П3_4_3", П3_4_3);УстановитьЗначениеПоказателя("П3_4_4", П3_4_4);
	
	УстановитьЗначениеПоказателя("П4_3", 	П4_3);
	
	УстановитьЗначениеПоказателя("П4_4", 	П4_4);
	
	УстановитьЗначениеПоказателя("П5_3", 	П5_3);
	УстановитьЗначениеПоказателя("П6_3_1", 	П6_3_1);УстановитьЗначениеПоказателя("П6_3_2", П6_3_2);УстановитьЗначениеПоказателя("П6_3_3", П6_3_3);УстановитьЗначениеПоказателя("П6_3_4", П6_3_4);УстановитьЗначениеПоказателя("П6_3_5", П6_3_5);
	УстановитьЗначениеПоказателя("П7_3_1", 	П7_3_1);УстановитьЗначениеПоказателя("П7_3_2", П7_3_2);УстановитьЗначениеПоказателя("П7_3_3", П7_3_3);УстановитьЗначениеПоказателя("П7_3_4", П7_3_4);УстановитьЗначениеПоказателя("П7_3_5", П7_3_5);
	
	УстановитьЗначениеПоказателя("П5_4", 	П5_4);
	УстановитьЗначениеПоказателя("П6_4", 	П6_4);
	УстановитьЗначениеПоказателя("П7_4", 	П7_4);
	
	УстановитьЗначениеПоказателя("П5_5", 	П5_5);
	УстановитьЗначениеПоказателя("П5_6", 	П5_6);
	

	//Додаток до розрахунку суми страхових внесків
	//на загальнообов'язкове державне пенсійне 	
	//Сума заборгованості з виплати заробітної плати на початок звітного періоду
	ЗапросСуммаЗадолжНачало = Новый Запрос;
	ЗапросСуммаЗадолжНачало.Текст = "
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&НачДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &ПрошлыйМесяц  
	|" + УсловиеНаПодразделение(, ЗапросСуммаЗадолжНачало) + "
	|";
	
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("ПрошлыйМесяц",ДобавитьМесяц(мДатаНачалаПериодаОтчета,-1));
	ЗапросСуммаЗадолжНачало.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолжНачало.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПНач = РезультатЗапроса.Выгрузить();
		ЗадолжНач = ТаблицаРезультатовЗадолжЗПНач[0].Результат;
		УстановитьЗначениеПоказателя("ЗадолжНач",ЗадолжНач);
	КонецЕсли;
	
	//Сума заборгованості з виплати заробітної плати на початок звітного періоду
	ЗапросСуммаЗадолжКонец = Новый Запрос;
	ЗапросСуммаЗадолжКонец.Текст = "
	|ВЫБРАТЬ
	| СУММА (ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовОстаток) КАК Результат
	|  ИЗ
	|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Остатки(&КонДата,Организация = &Организация) КАК ВзаиморасчетыСРаботниками
	| ГДЕ
	| ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов <> &НачДата 
	|" + УсловиеНаПодразделение(, ЗапросСуммаЗадолжКонец) + "
	|";
	
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("КонДата", мДатаКонцаПериодаОтчета);
	ЗапросСуммаЗадолжКонец.УстановитьПараметр("Организация",   Организация);
	РезультатЗапроса = ЗапросСуммаЗадолжКонец.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатовЗадолжЗПКон = РезультатЗапроса.Выгрузить();
		ЗадолжКон = ТаблицаРезультатовЗадолжЗПКон[0].Результат;
		УстановитьЗначениеПоказателя("ЗадолжКон",ЗадолжКон);
	КонецЕсли;
	
	ЗапросВыплатаВТекПериоде = Новый Запрос;
	ЗапросВыплатаВТекПериоде.Текст = "
		|ВЫБРАТЬ
		|	СУММА(СуммаВзаиморасчетов) КАК Выплачено
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций КАК ВзаиморасчетыСРаботникамиОрганизаций
		|ГДЕ 
		|	  ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|  И Период МЕЖДУ &НачДата И &КонДата
		|  И Организация = &Организация
		|" + УсловиеНаПодразделение(, ЗапросВыплатаВТекПериоде) + "
		|	И КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата)
		|";
		
	ЗапросВыплатаВТекПериоде.УстановитьПараметр("НачДата", мДатаНачалаПериодаОтчета);
	ЗапросВыплатаВТекПериоде.УстановитьПараметр("КонДата", мДатаКонцаПериодаОтчета);
	ЗапросВыплатаВТекПериоде.УстановитьПараметр("Организация" ,Организация);
	РезультатЗапроса = ЗапросВыплатаВТекПериоде.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаВыплатОтчетногоПериода = РезультатЗапроса.Выгрузить();
		СправочноВыплач =  ТаблицаВыплатОтчетногоПериода[0].Выплачено;
		УстановитьЗначениеПоказателя("СправочноВыплач",СправочноВыплач);
	КонецЕсли;	
	
	
	//Сальдо розрахунків рахунка 65 "Розрахунки за страхуванням" субрахунка 651 "За пенсійним забезпеченням" на початок 
	//звітного періоду: 
	РассчитатьСальдоВзаиморасчетовСФондом();
	
	//////////////////////////////////////////////////////////////////	
	// Таблица 5 - трудовые отношения
	ТаблицаПриемовУвольнений = СформироватьСписокТрудовыхОтношенийТаблица5();
	
	//////////////////////////////////////////////////////////////////	
	// Таблица 7 - спец стаж
	СписокРаботниковСоСпецСтажем = СформироватьСпецСтажТаблица7(ТаблицаПриемовУвольнений);
	
	//////////////////////////////////////////////////////////////////	
	// Таблицы 6 - начисления/взносы
	СформироватьНачисленияВзносыТаблица6(СписокРаботниковСоСпецСтажем);
	
	Расчет();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьАвто()

Функция СформироватьСпецСтажТаблица7(ТаблицаПриемовУвольнений)
	
	Перем СтруктураГруппы7;
	Перем ИсходноеКоличествоСтрокГруппы7;
	
	// сформируем список значений: Значение - ссылка на физ.лицо, а представление - основание для льготного стажа
	Список = Новый СписокЗначений;	
	
	Если  НЕ Метаданные.РегистрыСведений.Найти("СпецстажРаботниковОрганизаций") = Неопределено Тогда
	
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	СпецСтаж.ФизЛицо КАК ФизЛицо,
		               |	СпецСтаж.ДРФО КАК ДРФО,
		               |	СпецСтаж.Основание КАК Основание,
		               |	СпецСтаж.Норма КАК Норма,
		               |	СпецСтаж.ЕдиницаВремени КАК ЕдиницаВремени,
		               |	СпецСтаж.Сезонность КАК Сезонность,
		               |	СпецСтаж.Фамилия КАК ФизЛицоФамилия,
		               |	СпецСтаж.Имя КАК ФизЛицоИмя,
		               |	СпецСтаж.Отчество КАК ФизЛицоОтчество,
		               |	СпецСтаж.Приказ.Дата КАК ПриказДата,
		               |	СпецСтаж.Приказ.Ссылка КАК Приказ,
		               |	МАКСИМУМ(СпецСтаж.КонецДействия) КАК КонецДействия,
		               |	МИНИМУМ(СпецСтаж.НачалоДействия) КАК НачалоДействия,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		               |				ТОГДА 0
		               |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		               |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина)
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК Гражданин,
		               |	СУММА(СпецСтаж.Результат) КАК Результат
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		СпецСтаж.Сотрудник.Физлицо КАК ФизЛицо,
		               |		СпецСтаж.Сотрудник.Физлицо.КодПоДРФО КАК ДРФО,
		               |		СпецСтаж.ВидСтажа.ОснованиеЛьготногоСтажа.КодПФ КАК Основание,
		               |		СпецСтаж.ДатаОкончания КАК КонецДействия,
		               |		СпецСтаж.ДатаНачала КАК НачалоДействия,
		               |		СпецСтаж.Норма КАК Норма,
		               |		СпецСтаж.ЕдиницаВремени КАК ЕдиницаВремени,
		               |		СпецСтаж.Сезонность КАК Сезонность,
		               |		СпецСтаж.Результат КАК Результат,
		               |		СпецСтаж.Приказ КАК Приказ,
		               |		ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		               |		ФИОФизЛицСрезПоследних.Имя КАК Имя,
		               |		ФИОФизЛицСрезПоследних.Отчество КАК Отчество
		               |	ИЗ
		               |		РегистрСведений.СпецстажРаботниковОрганизаций КАК СпецСтаж
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
		               |			ПО СпецСтаж.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		               |	ГДЕ
		               |		СпецСтаж.ВидСтажа.ЛьготныйСтаж
		               |		И СпецСтаж.Организация = &Организация
					   |" + УсловиеНаПодразделение(, Запрос) + "	
					   |		И СпецСтаж.ПериодРегистрации = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)) КАК СпецСтаж
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&Дата, ) КАК ГражданствоФизЛиц
		               |		ПО СпецСтаж.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	СпецСтаж.Приказ,
		               |	СпецСтаж.ФизЛицо,
		               |	СпецСтаж.ДРФО,
		               |	СпецСтаж.Основание,
		               |	СпецСтаж.Норма,
		               |	СпецСтаж.ЕдиницаВремени,
		               |	СпецСтаж.Сезонность,
		               |	СпецСтаж.Фамилия,
		               |	СпецСтаж.Имя,
		               |	СпецСтаж.Отчество,
		               |	СпецСтаж.Приказ.Дата,
		               |	СпецСтаж.Приказ.Ссылка";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Дата", мДатаКонцаПериодаОтчета);
		
		ТаблицаСпецСтажа = Запрос.Выполнить().Выгрузить();
		
		// теперь заполним таблицу 7
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, СтруктураГруппы7);
		мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы7, ИсходноеКоличествоСтрокГруппы7);           
		
		НомСтроки = 1;
		Для каждого СтрокаСпецСтажа Из ТаблицаСпецСтажа Цикл
			
			Список.Добавить(СтрокаСпецСтажа.ФизЛицо, СтрокаСпецСтажа.Основание);        
			
			Если НомСтроки <= ИсходноеКоличествоСтрокГруппы7 Тогда
				ДобавленнаяСтрока = СтруктураГруппы7[НомСтроки - 1];
			Иначе
				ДобавленнаяСтрока = СтруктураГруппы7.Добавить();            
			КонецЕсли;
			НомСтроки = НомСтроки + 1;
			
			ДобавленнаяСтрока[мИдГруппы7+"Гражданин"] 	 = СтрокаСпецСтажа.Гражданин;
			
			ДобавленнаяСтрока[мИдГруппы7+"ДРФО"]		 = ОбработатьДРФО(СтрокаСпецСтажа.ДРФО);
			
			ДобавленнаяСтрока[мИдГруппы7+"ФИО"]          = СтрокаСпецСтажа.ФизЛицоФамилия;
			ДобавленнаяСтрока[мИдГруппы7+"Имя"]          = СтрокаСпецСтажа.ФизЛицоИмя;                      
			ДобавленнаяСтрока[мИдГруппы7+"Отчество"]     = СтрокаСпецСтажа.ФизЛицоОтчество;                             
			
			ДобавленнаяСтрока[мИдГруппы7+"КодОснования"] = СтрЗаменить(СтрокаСпецСтажа.Основание,"_","");
			
			ДобавленнаяСтрока[мИдГруппы7+"ДатаНач"]      = СтрокаСпецСтажа.НачалоДействия;
			ДобавленнаяСтрока[мИдГруппы7+"ДатаКон"]      = СтрокаСпецСтажа.КонецДействия;
			
			Если СтрокаСпецСтажа.ЕдиницаВремени = Перечисления.ЕдиницыВремениУчетаСпецстажа.Смены Тогда
				// нормо-смены
				//ДобавленнаяСтрока[мИдГруппы7+"НормоСмен"] = СтрокаСпецСтажа.Результат;	
				
			ИначеЕсли СтрокаСпецСтажа.ЕдиницаВремени = Перечисления.ЕдиницыВремениУчетаСпецстажа.Часы Тогда
				// часы-минуты
				ДобавленнаяСтрока[мИдГруппы7+"Часов"] = Цел(СтрокаСпецСтажа.Результат);	
				ДобавленнаяСтрока[мИдГруппы7+"Минут"] = Окр((СтрокаСпецСтажа.Результат - Цел(СтрокаСпецСтажа.Результат)) * 60, 0, РежимОкругления.Окр15как20);	
				
			Иначе	   
				// дни
				ДобавленнаяСтрока[мИдГруппы7+"Дней"]  = СтрокаСпецСтажа.Результат;	
				
			КонецЕсли;
			
			ДобавленнаяСтрока[мИдГруппы7+"Норма"] = СтрокаСпецСтажа.Норма;
			ДобавленнаяСтрока[мИдГруппы7+"СЕЗОН"] = СтрокаСпецСтажа.Сезонность;
			
			ДобавленнаяСтрока[мИдГруппы7+"ПриказДата"]  = СтрокаСпецСтажа.ПриказДата;
			ДобавленнаяСтрока[мИдГруппы7+"ПриказНомер"] = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаСпецСтажа.Приказ);
			
		КонецЦикла;   
		
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти("НачальныеСведенияОСтажеРаботниковОрганизации") = Неопределено Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпецСтаж.ФизЛицо,
		|	СпецСтаж.ФизЛицо.КодПоДРФО КАК ДРФО,
		|	СпецСтаж.ВидСтажа.ОснованиеЛьготногоСтажа.КодПФ КАК Основание,
		|	ФИОФизЛицСрезПоследних.Фамилия  КАК ФизЛицоФамилия,
		|	ФИОФизЛицСрезПоследних.Имя	    КАК ФизЛицоИмя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК ФизЛицоОтчество,
		
		|ВЫБОР 
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		|		ТОГДА 0
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка) 
		|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина) 
		|		ТОГДА 1
		|	ИНАЧЕ 0
		|КОНЕЦ КАК Гражданин
		
		|ИЗ
		|	РегистрСведений.НачальныеСведенияОСтажеРаботниковОрганизации КАК СпецСтаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СпецСтаж.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&Дата, ) КАК ГражданствоФизЛиц
		|		ПО СпецСтаж.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		
		|ГДЕ
		|	  СпецСтаж.ВидСтажа.ЛьготныйСтаж
		|	И СпецСтаж.Организация = &Организация
		|	И НЕ СпецСтаж.ФизЛицо.ЭтоГруппа
		|";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Дата", мДатаКонцаПериодаОтчета);
		
		ТаблицаСпецСтажа = Запрос.Выполнить().Выгрузить();
		
		// теперь заполним таблицу 7
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, СтруктураГруппы7);
		мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы7, ИсходноеКоличествоСтрокГруппы7);	
		
		НомСтроки = 1;
		Для каждого СтрокаСпецСтажа Из ТаблицаСпецСтажа Цикл
			
			Список.Добавить(СтрокаСпецСтажа.ФизЛицо, СтрокаСпецСтажа.Основание);	

			Если НомСтроки <= ИсходноеКоличествоСтрокГруппы7 Тогда
				ДобавленнаяСтрока = СтруктураГруппы7[НомСтроки - 1];
			Иначе
				ДобавленнаяСтрока = СтруктураГруппы7.Добавить();	
			КонецЕсли;
	        НомСтроки = НомСтроки + 1;
			
			ДобавленнаяСтрока[мИдГруппы7+"Гражданин"] 			= СтрокаСпецСтажа.Гражданин;
			
			ДобавленнаяСтрока[мИдГруппы7+"ДРФО"] 			= ОбработатьДРФО(СтрокаСпецСтажа.ДРФО);
			
			ДобавленнаяСтрока[мИдГруппы7+"ФИО"] 			= СтрокаСпецСтажа.ФизЛицоФамилия;
			ДобавленнаяСтрока[мИдГруппы7+"Имя"] 			= СтрокаСпецСтажа.ФизЛицоИмя;		
			ДобавленнаяСтрока[мИдГруппы7+"Отчество"]        = СтрокаСпецСтажа.ФизЛицоОтчество;		
			
			ДобавленнаяСтрока[мИдГруппы7+"КодОснования"]	= СтрокаСпецСтажа.Основание;
			
			ДатаНач = мДатаНачалаПериодаОтчета;
			ДатаКон = мДатаКонцаПериодаОтчета;
			Дней    = День(мДатаКонцаПериодаОтчета);
			СтрокаПриемаУвольнений = ТаблицаПриемовУвольнений.Найти(СтрокаСпецСтажа.Физлицо);
			Если НЕ СтрокаПриемаУвольнений = Неопределено Тогда
				ДатаПриема     = СтрокаПриемаУвольнений.ДатаПриема;
				ДатаУвольнения = СтрокаПриемаУвольнений.ДатаУвольнения;
				Если НЕ ЗначениеЗаполнено(ДатаПриема)
					  И ЗначениеЗаполнено(ДатаУвольнения) Тогда
					// было увольнение
					ДатаКон = ДатаУвольнения;
					Дней    = День(ДатаУвольнения);					
				ИначеЕсли    ЗначениеЗаполнено(ДатаПриема)
					    И НЕ ЗначениеЗаполнено(ДатаУвольнения) Тогда
					// был прием
					ДатаНач = ДатаПриема;
					Дней = День(мДатаКонцаПериодаОтчета) - День(ДатаПриема) + 1;					
				ИначеЕсли ЗначениеЗаполнено(ДатаПриема)
					    И ЗначениеЗаполнено(ДатаУвольнения) Тогда
					// два варианта: был уволен, потом вновь принят; 
					//				 в начале принят, потом уволен	
					Если ДатаПриема <= ДатаУвольнения Тогда
						//в начале принят, потом уволен
						ДатаНач = ДатаПриема;
						ДатаКон = ДатаУвольнения;
						Дней = День(ДатаУвольнения) - День(ДатаПриема) + 1;					
					Иначе	
					    // был уволен, потом вновь принят;
						// значит на начало и конец месяца он работал - поэтому даты начала и конца совпадают
						// с границами периода.
						
						// но отработано дней здесь по-другому рассчитываются
						Дней = День(ДатаУвольнения) + (День(мДатаКонцаПериодаОтчета) - День(ДатаПриема) + 1);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ДобавленнаяСтрока[мИдГруппы7+"ДатаНач"] 	= ДатаНач;
	        ДобавленнаяСтрока[мИдГруппы7+"ДатаКон"]		= ДатаКон;
			ДобавленнаяСтрока[мИдГруппы7+"Дней"]  		= Дней;
			
			ДобавленнаяСтрока[мИдГруппы7+"Норма"] 		= День(мДатаКонцаПериодаОтчета);
			ДобавленнаяСтрока[мИдГруппы7+"СЕЗОН"]		= 1;
			
		КонецЦикла;	
		
	Иначе	
		
		// в Данной конфигурации нет такого регистра сведений - заполнить данные о спец. стаже не представляется возможным
		Возврат Список;	
	КонецЕсли;
	
	ВывестиРазделВТабличныйДокумент(мИдГруппы7, СтруктураГруппы7);	
	
	Возврат Список;

КонецФункции

Функция  СформироватьСписокТрудовыхОтношенийТаблица5()
	
	перем Работавшие, СтруктураГруппы, КоличествоСтрокВГруппе;
	
	ТаблицаПриемовУвольнений = Новый ТаблицаЗначений();
	ТаблицаПриемовУвольнений.Колонки.Добавить("ФизЛицо",        Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПриемовУвольнений.Колонки.Добавить("ДатаПриема",     Новый ОписаниеТипов("Дата"));
	ТаблицаПриемовУвольнений.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	
	// заполним по работниками
	Работавшие = ПолучитьСписокЛиц();
	Номер = 1;
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
		СписокПринятыхСотрудниковБП = Новый Соответствие;
	КонецЕсли;
	
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, СтруктураГруппы);
    мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы5, КоличествоСтрокВГруппе);
	
	Для Каждого стр ИЗ Работавшие Цикл
		
		ДатаНач = Неопределено;
		ДатаКон = Неопределено;
		
		Если стр.СтавокНаНачало <= 0 И стр.СтавокНаКонец <= 0
			И ЗначениеЗаполнено(Стр.ДатаПриема)     И (Стр.ДатаПриема <= мДатаКонцаПериодаОтчета)
			И ЗначениеЗаполнено(Стр.ДатаУвольнения) И (Стр.ДатаУвольнения - 1 >= мДатаНачалаПериодаОтчета) И (Стр.ДатаУвольнения - 1 <= мДатаКонцаПериодаОтчета) Тогда
			ДатаНач = Стр.ДатаПриема;
			ДатаКон = Стр.ДатаУвольнения - 1;
			
		ИначеЕсли стр.СтавокНаНачало <= 0 И стр.СтавокНаКонец > 0 
		   И ЗначениеЗаполнено(Стр.ДатаПриема) И (Стр.ДатаПриема <= мДатаКонцаПериодаОтчета) Тогда
			ДатаНач = Стр.ДатаПриема;
		ИначеЕсли стр.СтавокНаНачало > 0 И стр.СтавокНаКонец <= 0 
				И ЗначениеЗаполнено(Стр.ДатаУвольнения) И (Стр.ДатаУвольнения - 1 >= мДатаНачалаПериодаОтчета) И (Стр.ДатаУвольнения - 1 <= мДатаКонцаПериодаОтчета) Тогда
			ДатаКон = Стр.ДатаУвольнения - 1;
			
		ИначеЕсли стр.СтавокНаНачало > 0 И стр.СтавокНаКонец > 0
			    И ЗначениеЗаполнено(Стр.ДатаУвольнения) И (Стр.ДатаУвольнения - 1 >= мДатаНачалаПериодаОтчета) И (Стр.ДатаУвольнения - 1 <= мДатаКонцаПериодаОтчета)
				И ЗначениеЗаполнено(Стр.ДатаПриема)     И (Стр.ДатаПриема <= мДатаКонцаПериодаОтчета) Тогда				
			// увольнение и прием в течение месяца				
			ДатаНач = Стр.ДатаПриема;
			ДатаКон = Стр.ДатаУвольнения - 1;
		//смена фамилии ужене повод попадать в эту таблицу	
		//ИначеЕсли НЕ Стр.ИзменилосьФИО	Тогда
		//	Продолжить;
		//Иначе
		//	// изменилось ФИО, но возможно, что это происходило уже для уволенного сотрудника
		//	Если стр.СтавокНаНачало <= 0 И стр.СтавокНаКонец <= 0 Тогда
		//		Продолжить;
		//	КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(ДатаНач) 
			И ЗначениеЗаполнено(ДатаКон)
			И НачалоДня(ДатаНач) = НачалоДня(ДатаКон) Тогда
		    // прием и увольнение в один день - отражать нечего
			Продолжить;	
		КонецЕсли;
		
		СтрокаТаблицыПриемовУвольнений = ТаблицаПриемовУвольнений.Добавить();
		СтрокаТаблицыПриемовУвольнений.ФизЛицо        = стр.ФизЛицо;
		СтрокаТаблицыПриемовУвольнений.ДатаПриема     = ДатаНач;
		СтрокаТаблицыПриемовУвольнений.ДатаУвольнения = ДатаКон;
			
		Если (Номер > КоличествоСтрокВГруппе) Тогда
			ВставитьДополнительнуюСтроку(мИдГруппы5);
		КонецЕсли;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Гражданин"].Значение  = стр.Гражданин;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДРФО"].Значение       = ОбработатьДРФО(стр.КодПоДРФО);
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Фамилия"].Значение    = стр.Фамилия;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Имя"].Значение 		= стр.Имя;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Отчество"].Значение   = стр.Отчество;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаНач"].Значение   = ДатаНач;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаКон"].Значение   = ДатаКон;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Категория"].Значение   = стр.Категория;
		
		Если ЗначениеЗаполнено(ДатаКон) Тогда
			мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Причина"].Значение   = ПолучитьПричинуУвольнения(Стр.ФизЛицо,ДатаКон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНач) Тогда
			Попытка
				ДатаСозданияРМ = Стр.ДатаСозданияРабочегоМеста;
			Исключение
				ДатаСозданияРМ = 0;
			КонецПопытки;	
			мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаСозданияРМ"].Значение  = ДатаСозданияРМ;
		КонецЕсли;		
		
		Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
			// собираем список сотрудников, которые могут быть сотрудниками по ГПХ. 
			// в месяц приема информация без такого фильтра будет отображаться дважды.
			Если    (ЗначениеЗаполнено(ДатаНач) ИЛИ ЗначениеЗаполнено(ДатаКон)) И стр.Категория = 2 Тогда
				Если ЗначениеЗаполнено(стр.КодПоДРФО) Тогда
					СписокПринятыхСотрудниковБП.Вставить(стр.КодПоДРФО, Номер);		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	// добавим информацию по ГПХ
	ДоговораГПХ = ПолучитьСписокДоговоровГПХ();
	
	Для Каждого стр ИЗ ДоговораГПХ Цикл
		
		СуществующийНомерСтроки = Неопределено;
		Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
			// ищем в списке сотрудников, которые могут быть сотрудниками по ГПХ. 
			// в месяц приема информация без такого фильтра будет отображаться дважды.
			Если ЗначениеЗаполнено(стр.КодПоДРФО) Тогда
				СуществующийНомерСтроки = СписокПринятыхСотрудниковБП.Получить(стр.КодПоДРФО);
			КонецЕсли;
		КонецЕсли;	
		Если СуществующийНомерСтроки = Неопределено Тогда
			ТекНомер = Номер;
			Если (ТекНомер > КоличествоСтрокВГруппе) Тогда
				ВставитьДополнительнуюСтроку(мИдГруппы5);
			КонецЕсли;
		Иначе
			ТекНомер = СуществующийНомерСтроки;
		КонецЕсли;
		
		
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Гражданин"].Значение  = стр.Гражданин;
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДРФО"].Значение       = ОбработатьДРФО(стр.КодПоДРФО);
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Фамилия"].Значение    = стр.Фамилия;
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Имя"].Значение 		= стр.Имя;
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Отчество"].Значение   = стр.Отчество;
		
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаНач"].Значение   = стр.ДатаНач;
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаКон"].Значение   = стр.ДатаКон;
		
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Категория"].Значение   = 3;
		
		мТаблица5.Области[мИдГруппы5 + Формат(ТекНомер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ГПХ"].Значение   = Стр.ГПХпоОснМестуРаботы;
		
		Если СуществующийНомерСтроки = Неопределено Тогда
			Номер = Номер + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	
	//Добавим информацию об отпусках
	Отпуска = ПолучитьСписокОтпуска(ТаблицаВРОтпускДо3.ВыгрузитьКолонку("ВидРасчета"));
	Для Каждого стр ИЗ Отпуска Цикл
		
		Если (Номер > КоличествоСтрокВГруппе) Тогда
			ВставитьДополнительнуюСтроку(мИдГруппы5);
		КонецЕсли;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Гражданин"].Значение  = стр.Гражданин;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДРФО"].Значение       = ОбработатьДРФО(стр.КодПоДРФО);
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Фамилия"].Значение    = стр.Фамилия;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Имя"].Значение 		= стр.Имя;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Отчество"].Значение   = стр.Отчество;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаНач"].Значение   = стр.Начало;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаКон"].Значение   = стр.Конец;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Категория"].Значение   = 6;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	Отпуска = ПолучитьСписокОтпуска(ТаблицаВРОтпускОт3До6.ВыгрузитьКолонку("ВидРасчета"));
	Для Каждого стр ИЗ Отпуска Цикл
		
		Если (Номер > КоличествоСтрокВГруппе) Тогда
			ВставитьДополнительнуюСтроку(мИдГруппы5);
		КонецЕсли;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Гражданин"].Значение  = стр.Гражданин;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДРФО"].Значение       = ОбработатьДРФО(стр.КодПоДРФО);
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Фамилия"].Значение    = стр.Фамилия;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Имя"].Значение 		= стр.Имя;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Отчество"].Значение   = стр.Отчество;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаНач"].Значение   = стр.Начало;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаКон"].Значение   = стр.Конец;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Категория"].Значение   = 4;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	Отпуска = ПолучитьСписокОтпуска(ТаблицаВРОтпускПоБеременностиИРодам.ВыгрузитьКолонку("ВидРасчета"));
	Для Каждого стр ИЗ Отпуска Цикл
		
		Если (Номер > КоличествоСтрокВГруппе) Тогда
			ВставитьДополнительнуюСтроку(мИдГруппы5);
		КонецЕсли;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Гражданин"].Значение  = стр.Гражданин;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДРФО"].Значение       = ОбработатьДРФО(стр.КодПоДРФО);
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Фамилия"].Значение    = стр.Фамилия;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Имя"].Значение 		= стр.Имя;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Отчество"].Значение   = стр.Отчество;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаНач"].Значение   = стр.Начало;
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "ДатаКон"].Значение   = стр.Конец;
		
		мТаблица5.Области[мИдГруппы5 + Формат(Номер,"ЧЦ=6;ЧВН=0;ЧГ=;") + "Категория"].Значение   = 5;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	ОбновитьСтруктуруМногострочныхРазделов();	
	
	Возврат ТаблицаПриемовУвольнений;
	
КонецФункции	

Процедура СформироватьНачисленияВзносыТаблица6(СписокРаботниковСоСпецСтажем)
	
	Перем 	СтруктураГруппы6, ИсходноеКоличествоСтрокГруппы6;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПериодОтчета", НачалоМесяца(мДатаКонцаПериодаОтчета));
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("ВРБезСохранения", ТаблицаВРБезСохраненияЗП.ВыгрузитьКолонку("ВидРасчета"));
	// виды расчетов по больничным
	ВидыРасчетов = ТаблицаВРБольничныеПредприятие.ВыгрузитьКолонку("ВидРасчета");
	Для каждого ВидРасчета Из ТаблицаВРБольничныеФСС.ВыгрузитьКолонку("ВидРасчета") Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ТаблицаВРБольничныеФССНесчСлучай.ВыгрузитьКолонку("ВидРасчета") Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	
	Запрос.Параметры.Вставить("ВРБольничные", ВидыРасчетов);
	
	Запрос.Параметры.Вставить("ВРДекретные",  ТаблицаВРОтпускПоБеременностиИРодам.ВыгрузитьКолонку("ВидРасчета"));
	
	МассивКодыБольничные = Новый Массив();
	МассивКодыБольничные.Вставить(0, 29);
	МассивКодыБольничные.Вставить(1, 36);
	МассивКодыБольничные.Вставить(2, 37);
	МассивКодыБольничные.Вставить(3, 39);
	
	МассивКодыБольничные.Вставить(4, 42);
	МассивКодыБольничные.Вставить(5, 43);
	МассивКодыБольничные.Вставить(6, 44);
	МассивКодыБольничные.Вставить(7, 45);
	
	Запрос.Параметры.Вставить("МассивКодыБольничные", МассивКодыБольничные);
	
	МассивКодыДекретные = Новый Массив();
	МассивКодыДекретные.Вставить(0, 42);
	МассивКодыДекретные.Вставить(1, 43);
	МассивКодыДекретные.Вставить(2, 44);
	МассивКодыДекретные.Вставить(3, 45);
	
	Запрос.Параметры.Вставить("МассивКодыДекретные", МассивКодыДекретные);
	
	МассивКодыГПХ = Новый Массив();
	МассивКодыГПХ.Вставить(0, 26);
	МассивКодыГПХ.Вставить(1, 38);
	Запрос.Параметры.Вставить("МассивКодыГПХ", МассивКодыГПХ);
	
	//Тексты запросов общий
	//Для отдельных конфигураций модифицируются ниже по код
	ТекстЗапросаВТ ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзносыВФонды.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало,МЕСЯЦ) КАК Период,
	|	ВзносыВФонды.КодКатегорииЗЛ,
	|	ВзносыВФонды.ТипНачисления,
	|	ВзносыВФонды.База,
	|	0 КАК БазаОтпускные,
	|	ВзносыВФонды.БазаВзноса,
	|	ВзносыВФонды.Результат
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|ГДЕ
	|	ВзносыВФонды.Организация = &Организация
	|" + УсловиеНаПодразделение(,Запрос) + "	
	|	И ВзносыВФонды.ПериодРегистрации = &ПериодОтчета
	|	И ВзносыВФонды.ВидРасчета В
	|			(ВЫБРАТЬ
	|				РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних.ВидРасчета
	|			ИЗ
	|				РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.Взносы)))
	|	И ВзносыВФонды.ВидРасчета.ЕСВ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник, Период, КодКатегорииЗЛ, ТипНачисления
	|";
	
	ТекстЗапросаВТ_01012013 ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзносыВФонды.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало,МЕСЯЦ) КАК Период,
	|	ВзносыВФонды.КодКатегорииЗЛ,
	|	ВзносыВФонды.ТипНачисления,
	|	ВзносыВФонды.База,
	|	ВзносыВФонды.БазаОтпускные,
	|	ВзносыВФонды.БазаВзноса,
	|	ВзносыВФонды.Результат
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	РегистрРасчета.ВзносыВФонды КАК ВзносыВФонды
	|ГДЕ
	|	ВзносыВФонды.Организация = &Организация
	|" + УсловиеНаПодразделение(,Запрос) + "	
	|	И ВзносыВФонды.ПериодРегистрации = &ПериодОтчета
	|	И ВзносыВФонды.ВидРасчета В
	|			(ВЫБРАТЬ
	|				РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних.ВидРасчета
	|			ИЗ
	|				РегистрСведений.ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.Взносы)))
	|	И ВзносыВФонды.ВидРасчета.ЕСВ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник, Период, КодКатегорииЗЛ, ТипНачисления
	|";
	
	ТекстЗапросаВТОтработанныеДни ="ВЫБРАТЬ
	|	ТЗ.Сотрудник,
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаУвольнения ЕСТЬ NULL ТОГДА &ДнейВМесяце
	|		КОГДА ТЗ.ДатаУвольнения > КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)  ТОГДА &ДнейВМесяце
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаУвольнения)-1
	|   КОНЕЦ -
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаПриема ЕСТЬ NULL ТОГДА 1
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаПриема)
	|   КОНЕЦ +1 КАК ОтработанныеДни,
	|	ВЫБОР 
	|		КОГДА ТЗ.ПринятНаНовоеРабочееМесто ТОГДА 1
	|       ИНАЧЕ 0
	|   КОНЕЦ КАК ПринятНаНовоеРабочееМесто
	|ПОМЕСТИТЬ ВТОтработанныеДниРаботники
	|ИЗ &тзРаботники КАК ТЗ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|;
	|
	|ВЫБРАТЬ
	|	ТЗ.Сотрудник КАК Сотрудник,
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаКон ЕСТЬ NULL ТОГДА &ДнейВМесяце
	|		КОГДА ТЗ.ДатаКон > КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)  ТОГДА &ДнейВМесяце
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаКон)
	|   КОНЕЦ -
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаНач ЕСТЬ NULL ТОГДА 1
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаНач)
	|   КОНЕЦ +1 КАК ОтработанныеДни,
	|	ВЫБОР 
	|		КОГДА ТЗ.ПринятНаНовоеРабочееМесто ТОГДА 1
	|       ИНАЧЕ 0
	|   КОНЕЦ КАК ПринятНаНовоеРабочееМесто
	|ПОМЕСТИТЬ ВТСписокГПХ
	|ИЗ &тзГПХ КАК ТЗ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|
	|;
	|ВЫБРАТЬ
	|	СписокГПХ.Сотрудник,
	|	СписокГПХ.Сотрудник.ОсновноеНазначение КАК ОсновноеНазначение,
	|	СписокГПХ.ОтработанныеДни,
	|	СписокГПХ.ПринятНаНовоеРабочееМесто
	|ПОМЕСТИТЬ ВТОтработанныеДниГПХ
	|ИЗ ВТСписокГПХ КАК СписокГПХ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|;
	|
	|ВЫБРАТЬ
	|	ЕстьNULL(ВТ.Сотрудник, ВТГПХ.Сотрудник) КАК Сотрудник,
	|	ЕстьNULL(ВТ.ОтработанныеДни, 0) КАК ОтработанныеДни,
	|	ЕстьNULL(ВТГПХ.ОтработанныеДни, 0) КАК ОтработанныеДниГПХ,
	|	ЕстьNULL(ВТ.ПринятНаНовоеРабочееМесто, ВТГПХ.ПринятНаНовоеРабочееМесто) КАК ПринятНаНовоеРабочееМесто
	|ПОМЕСТИТЬ ВТОтработанныеДни
	|ИЗ ВТОтработанныеДниРаботники КАК ВТ
	|   ПОЛНОЕ СОЕДИНЕНИЕ
	|   ВТОтработанныеДниГПХ КАК ВТГПХ
	|   ПО ВТ.Сотрудник = ВТГПХ.Сотрудник ИЛИ ВТ.Сотрудник = ВТГПХ.ОсновноеНазначение
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|";
	Запрос.Параметры.Вставить("тзРаботники", тзРаботники);
	Запрос.Параметры.Вставить("тзГПХ", тзГПХ);
	Запрос.Параметры.Вставить("ДнейВМесяце", День(мДатаКонцаПериодаОтчета));
	
	ТекстЗапросаВТБезСохранения ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Период,
	|	СУММА(РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)
	|	+ ВЫБОР КОГДА Начисления.ПериодДействияНачало = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,ДЕНЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК Дней
	|ПОМЕСТИТЬ ВТБезСохранения
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|" + УсловиеНаПодразделение() + "	
	|	И Начисления.ПериодДействия = &ПериодОтчета
	|	И Начисления.ПериодРегистрации <= &ПериодОтчета
	|	И Начисления.ВидРасчета В (&ВРБезСохранения)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|СГРУППИРОВАТЬ ПО
	| Начисления.Сотрудник, Начисления.ПериодДействия
	|
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	//Невыходы предыдущих периодов - обычные и сторно
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Период,
	|	СУММА(ВЫБОР КОГДА Начисления.Сторно ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * (РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)
	|	+ ВЫБОР КОГДА Начисления.ПериодДействияНачало = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,ДЕНЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ))	КАК Дней
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|" + УсловиеНаПодразделение() + "
	|	И Начисления.ПериодДействия < &ПериодОтчета
	|	И Начисления.ПериодРегистрации = &ПериодОтчета
	|	И Начисления.ВидРасчета В (&ВРБезСохранения)
	|	И Начисления.Сотрудник = Начисления.Назначение
	|СГРУППИРОВАТЬ ПО
	|  Начисления.Сотрудник, Начисления.ПериодДействия
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник, Период
	|";

	ТекстЗапросаВТБольничные ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |" + ?(РегламентированнаяОтчетность.ИДКонфигурации() = "БП", "", "
	|Начисления.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТСторноБольничные 
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодРегистрации = &ПериодОтчета
	|	И (Начисления.ВидРасчета В(&ВРБольничные) ИЛИ Начисления.ВидРасчета В(&ВРДекретные))
	|   И (Начисления.СторнируемыйДокумент ССЫЛКА Документ.НачислениеПоБольничномуЛисту)
	|; 
	|ВЫБРАТЬ
	|") + "
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Период,
	|   СУММА(
	|		ВЫБОР КОГДА Начисления.ВидРасчета В(&ВРБольничные)
	|		ТОГДА РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)+1 
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейБольничные,
	|   СУММА(
	|		ВЫБОР КОГДА Начисления.ВидРасчета В(&ВРДекретные)
	|		ТОГДА РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)+1 
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейДекретные
	|ПОМЕСТИТЬ ВТБольничные
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|" + УсловиеНаПодразделение() + "	
	|	И Начисления.ПериодРегистрации = &ПериодОтчета
	|	И (Начисления.ВидРасчета В(&ВРБольничные) ИЛИ Начисления.ВидРасчета В(&ВРДекретные))
	|	И Начисления.Сотрудник = Начисления.Назначение
	|	И НЕ Начисления.Сторно
    |" + ?(РегламентированнаяОтчетность.ИДКонфигурации() = "БП", "", "
    |	И Начисления.Регистратор НЕ В (ВЫБРАТЬ СторнируемыйДокумент ИЗ ВТСторноБольничные)
	|") + "
	|СГРУППИРОВАТЬ ПО
	| Начисления.Сотрудник, Начисления.ПериодДействия
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник, Период
	|";
	
	ТекстТаблица6 = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ВзносыВФонды.Сотрудник,
	|	ВзносыВФонды.ФизЛицо,
	|	ВзносыВФонды.ФизЛицо.Пол КАК ФизЛицоПол,
	|	ВЫБОР 
	|	КОГДА ЕстьNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	|		ТОГДА 0
	|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка) 
	|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина) 
	|		ТОГДА 1
	|	ИНАЧЕ 0 КОНЕЦ КАК Гражданин,
	|   ВзносыВФонды.КодКатегорииЗЛ,
	|   ВзносыВФонды.ТипНачисления,
	|   ВзносыВФонды.Период,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ВзносыВФонды.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия
	|	КОНЕЦ              КАК ФизЛицоФио,
	|	ФИОФизЛиц.Имя 	   КАК ФизЛицоИмя,
	|	ФИОФизЛиц.Отчество КАК ФизЛицоОтчество,
	|   ВзносыВФонды.Результат,
	|   ВзносыВФонды.РезультатОтпускные,
	|   ВзносыВФонды.РезультатСПределом,
	|   ВзносыВФонды.Налог,
	|	ВЫБОР КОГДА ВзносыВФонды.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ТОГДА 1 Иначе 0 КОНЕЦ КАК ПризнакНаличияТрудовойКнижки,
	//Дни больничных показываем для ЕСВ с больничных по каждому периоду
	//Дни без сохранения показываем для ЕСВ с зарплаты только за текущий месяц
	
	|	ВЫБОР 
	|	 КОГДА ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ В (&МассивКодыБольничные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейБольничные,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейБольничные, 
	
	|	ВЫБОР 
	|	КОГДА  ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ В (&МассивКодыДекретные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейДекретные, 
	
	|	ВЫБОР КОГДА 
	|	 ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные)  
	|	 ТОГДА ЕСТЬNULL(БезСохранения.Дней,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейБезСохранения,
    //Дни отработанные показываем для зарплаты и ГПХ только за текущий месяц
	//Дополнительно показывается для декретных, кроме текущего месяца
	|	ВЫБОР 
	|    КОГДА 
	|   	 ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ НЕ В (&МассивКодыГПХ) И ВзносыВФонды.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные) И ВзносыВФонды.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДни,0)
	|    КОГДА 
	|   	 ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ В (&МассивКодыГПХ) И ВзносыВФонды.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДниГПХ,&ДнейВМесяце)
	|    КОГДА 
	|	 	ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ В (&МассивКодыДекретные) И ВзносыВФонды.Период <> &ПериодОтчета
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработанныеДни,
	|	Отработанные.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто
	|	
	|
	|ИЗ
	| (ВЫБРАТЬ
	|   ВзносыВФонды.Сотрудник,
	|   ВзносыВФонды.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|   ВзносыВФонды.Сотрудник.ФизЛицо КАК ФизЛицо,
	|   ВзносыВФонды.Сотрудник.ФизЛицо.Наименование КАК Наименование,
	|   ВзносыВФонды.Период,
	|   ВзносыВФонды.КодКатегорииЗЛ,
	|   ВзносыВФонды.ТипНачисления,
	|   СУММА(ВзносыВФонды.База) КАК Результат,
    |   СУММА(ВзносыВФонды.БазаОтпускные) КАК РезультатОтпускные,
	|   СУММА(ВзносыВФонды.БазаВзноса) КАК РезультатСПределом,
	|   СУММА(ВзносыВФонды.Результат) КАК Налог
	|  ИЗ ВТВзносы КАК ВзносыВФонды
	|  СГРУППИРОВАТЬ ПО
	|   ВзносыВФонды.Сотрудник, ВзносыВФонды.Сотрудник.ВидЗанятости, ВзносыВФонды.Сотрудник.ФизЛицо, ВзносыВФонды.Сотрудник.ФизЛицо.Наименование, ВзносыВФонды.Период, ВзносыВФонды.КодКатегорииЗЛ, ВзносыВФонды.ТипНачисления
	| ) КАК ВзносыВФонды
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ФиоФизЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)) КАК ФИОФизЛиц
	|	ПО ВзносыВФонды.ФизЛицо = ФИОФизЛиц.ФизЛицо
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)) КАК ГражданствоФизЛиц
	|	ПО ВзносыВФонды.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|   ВТБезСохранения КАК БезСохранения
	|   ПО ВзносыВФонды.Период = БезСохранения.Период
	|    И ВзносыВФонды.Сотрудник = БезСохранения.Сотрудник
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|   ВТБольничные КАК Больничные
	|   ПО ВзносыВФонды.Период = Больничные.Период
	|    И ВзносыВФонды.Сотрудник = Больничные.Сотрудник
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|   ВТОтработанныеДни КАК Отработанные
	|   ПО ВзносыВФонды.Сотрудник = Отработанные.Сотрудник
	|				
	|ГДЕ
	|	ВзносыВФонды.Результат <> 0 ИЛИ ВзносыВФонды.РезультатСПределом <> 0 ИЛИ ВзносыВФонды.Налог <> 0
	|   ИЛИ ВЫБОР 
	|    КОГДА 
	|   	 ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ НЕ В (&МассивКодыГПХ) И ВзносыВФонды.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные) И ВзносыВФонды.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДни,0)
	|    КОГДА 
	|   	 ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ В (&МассивКодыГПХ) И ВзносыВФонды.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДниГПХ,&ДнейВМесяце)
	|	 ИНАЧЕ 0
	|	КОНЕЦ <> 0
	|   ИЛИ ВЫБОР КОГДА 
	|	 ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ В (&МассивКодыДекретные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
	|	 КОГДА ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ В (&МассивКодыБольничные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейБольничные,0)
	|	 ИНАЧЕ 0
	|	 КОНЕЦ <> 0
	|	ИЛИ ВЫБОР КОГДА 
	|	 ВзносыВФонды.ТипНачисления = 0 И ВзносыВФонды.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные)  
	|	 ТОГДА ЕСТЬNULL(БезСохранения.Дней,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ  <> 0
	|УПОРЯДОЧИТЬ ПО
	|  ФизЛицоФио, ВзносыВФонды.Период, КодКатегорииЗЛ, ТипНачисления
	|";
		
					
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"РегистрРасчета.ВзносыВФонды","РегистрРасчета.ВзносыВФондыИНалоги");
		ТекстЗапросаВТБезСохранения = СтрЗаменить(ТекстЗапросаВТБезСохранения,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия","РегистрРасчета.Начисления");
		ТекстЗапросаВТБезСохранения = СтрЗаменить(ТекстЗапросаВТБезСохранения,"ПериодДействияНачало","ДатаНачала");
		ТекстЗапросаВТБезСохранения = СтрЗаменить(ТекстЗапросаВТБезСохранения,"ПериодДействияКонец","ДатаОкончания");
		ТекстЗапросаВТБезСохранения = СтрЗаменить(ТекстЗапросаВТБезСохранения,"Начисления.ПериодДействия","НАЧАЛОПЕРИОДА(Начисления.ДатаНачала,МЕСЯЦ)");
		ТекстЗапросаВТБольничные = СтрЗаменить(ТекстЗапросаВТБольничные,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия","РегистрРасчета.Начисления");
		ТекстЗапросаВТБольничные = СтрЗаменить(ТекстЗапросаВТБольничные,"ПериодДействияНачало","ДатаНачала");
		ТекстЗапросаВТБольничные = СтрЗаменить(ТекстЗапросаВТБольничные,"ПериодДействияКонец","ДатаОкончания");
		ТекстЗапросаВТБольничные = СтрЗаменить(ТекстЗапросаВТБольничные,"Начисления.ПериодДействия","НАЧАЛОПЕРИОДА(Начисления.ДатаНачала,МЕСЯЦ)");
		ТекстЗапросаВТ_01012013 = СтрЗаменить(ТекстЗапросаВТ_01012013,"РегистрРасчета.ВзносыВФонды","РегистрРасчета.ВзносыВФондыИНалоги");
	КонецЕсли;
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		ТекстЗапросаВТБезСохранения = СтрЗаменить(ТекстЗапросаВТБезСохранения,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций","РегистрРасчета.Начисления");
		ТекстЗапросаВТБольничные = СтрЗаменить(ТекстЗапросаВТБольничные,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций","РегистрРасчета.Начисления");
		ТекстЗапросаВТОтработанныеДни = СтрЗаменить(ТекстЗапросаВТОтработанныеДни,"-1","");
	КонецЕсли;	

	Попытка
		Запрос.Текст    = ТекстЗапросаВТ_01012013;
		Запрос.Выполнить();
	Исключение	
		Запрос.Текст    = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецПопытки;
	Запрос.Текст    = ТекстЗапросаВТОтработанныеДни;
	Запрос.Выполнить();
	Запрос.Текст    = ТекстЗапросаВТБезСохранения;
	Запрос.Выполнить();
	Запрос.Текст    = ТекстЗапросаВТБольничные;
	Запрос.Выполнить();
	Запрос.Текст    = ТекстТаблица6;
	
	//ВыборкаТаблица6 = Запрос.Выполнить().Выбрать();
	РезультатЗапросаТаблица6 = Запрос.Выполнить();
	РассчитатьЧислоЗастрахованныхЛиц(РезультатЗапросаТаблица6.Выгрузить());
	
	ВыборкаТаблица6 = РезультатЗапросаТаблица6.Выбрать();
	
	//////////////////////////////////////////
	// таблица 6
	мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, СтруктураГруппы6);
	мСтруктураИсхКолвоСтрокРазделов.Свойство(мИдГруппы6, ИсходноеКоличествоСтрокГруппы6);	
	
	
	НомСтроки = 1;
	Пока ВыборкаТаблица6.Следующий() Цикл

		Результат = ВыборкаТаблица6.Результат - ВыборкаТаблица6.РезультатОтпускные;
		РезультатОтпускные = ВыборкаТаблица6.РезультатОтпускные;
		
		Если НЕ ВыделятьЕСВДляОтпускных Тогда
			//Вариант 1 - сумма с пределом и налог только для основной строки, для отпуска нет
			РезультатСПределом = ВыборкаТаблица6.РезультатСПределом;
			РезультатСПределомОтпускные = 0;
			Налог = ВыборкаТаблица6.Налог;
			НалогОтпускные = 0;
		Иначе
			//Вариант 2 - сумма с пределом и налог делим пропорционально, но с приоритетом основной
			
			РезультатСПределом = МИН(ВыборкаТаблица6.РезультатСПределом,Результат);
			РезультатСПределомОтпускные = ВыборкаТаблица6.РезультатСПределом - РезультатСПределом;
			
			КоэффициентДеления = ?(ВыборкаТаблица6.РезультатСПределом = 0 ИЛИ РезультатСПределом = ВыборкаТаблица6.РезультатСПределом, 1, РезультатСПределом/ВыборкаТаблица6.РезультатСПределом);
			
			Налог 		   = Окр(ВыборкаТаблица6.Налог*КоэффициентДеления, 2);
			НалогОтпускные = ВыборкаТаблица6.Налог - Налог;
		КонецЕсли;	
		
		Если НомСтроки <= ИсходноеКоличествоСтрокГруппы6 Тогда
			ДобавленнаяСтрока = СтруктураГруппы6[НомСтроки - 1];
		Иначе
			ДобавленнаяСтрока = СтруктураГруппы6.Добавить();	
		КонецЕсли;
        НомСтроки = НомСтроки + 1;
		
		ДобавленнаяСтрока[мИдГруппы6+"ДРФО"] 			= ОбработатьДРФО(ВыборкаТаблица6.ФизЛицо.КодПоДРФО);
		Если ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			ДобавленнаяСтрока[мИдГруппы6+"МЖ"] 			= "Ч";
		ИначеЕсли ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			ДобавленнаяСтрока[мИдГруппы6+"МЖ"] 			= "Ж";
		КонецЕсли;
		ДобавленнаяСтрока[мИдГруппы6+"Гражданин"]		= ВыборкаТаблица6.Гражданин;
		
		ДобавленнаяСтрока[мИдГруппы6+"ФИО"] 			= ВыборкаТаблица6.ФизЛицоФио;
		ДобавленнаяСтрока[мИдГруппы6+"Имя"] 			= ВыборкаТаблица6.ФизЛицоИмя;		
		ДобавленнаяСтрока[мИдГруппы6+"Отчество"]        = ВыборкаТаблица6.ФизЛицоОтчество;		
		
		ДобавленнаяСтрока[мИдГруппы6+"Категория"] 	= ВыборкаТаблица6.КодКатегорииЗЛ;
        ДобавленнаяСтрока[мИдГруппы6+"ТипСтавки"] 	= ВыборкаТаблица6.ТипНачисления;
		//Если это отпускные за будущий период - показываем тип 10
		Если Результат = 0 И РезультатОтпускные <> 0 Тогда
        	ДобавленнаяСтрока[мИдГруппы6+"ТипСтавки"] 	= 10;
		КонецЕсли;	
		
		Если УказыватьПериодДляВсехНачислений
			ИЛИ ЗначениеЗаполнено(ВыборкаТаблица6.ТипНачисления) Тогда
			ДобавленнаяСтрока[мИдГруппы6+"МесяцГод"]	= ВыборкаТаблица6.Период;	
		Иначе
			Если МассивКодыБольничные.Найти(ВыборкаТаблица6.КодКатегорииЗЛ) <> Неопределено
				или ВыборкаТаблица6.Период > НачалоМесяца(мДатаКонцаПериодаОтчета) Тогда
				ДобавленнаяСтрока[мИдГруппы6+"МесяцГод"]	= ВыборкаТаблица6.Период;
			КонецЕсли;	
		КонецЕсли;
		
		
		ДобавленнаяСтрока[мИдГруппы6+"КвоБольничных"] 	= ВыборкаТаблица6.ДнейБольничные;
        ДобавленнаяСтрока[мИдГруппы6+"КвоБезЗП"] 	= ВыборкаТаблица6.ДнейБезСохранения;
		
		ДобавленнаяСтрока[мИдГруппы6+"КвоДекрет"] 	= ВыборкаТаблица6.ДнейДекретные;
		
		//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
		Если Результат <> 0 И РезультатОтпускные <> 0 И ВыборкаТаблица6.Период = НачалоМесяца(мДатаКонцаПериодаОтчета) Тогда
        	ДобавленнаяСтрока[мИдГруппы6+"СуммаНачислено"]= Результат;
			ДобавленнаяСтрока[мИдГруппы6+"СуммаНачисленоМаксБаза"] = РезультатСПределом;
			ДобавленнаяСтрока[мИдГруппы6+"СуммаВзносов"]  = Налог;
		Иначе
			ДобавленнаяСтрока[мИдГруппы6+"СуммаНачислено"]= ВыборкаТаблица6.Результат;
			ДобавленнаяСтрока[мИдГруппы6+"СуммаНачисленоМаксБаза"] = ВыборкаТаблица6.РезультатСПределом;
			ДобавленнаяСтрока[мИдГруппы6+"СуммаВзносов"]  = ВыборкаТаблица6.Налог;
		КонецЕсли;	
        
        ДобавленнаяСтрока[мИдГруппы6+"ТрудКнижка"] 	= ВыборкаТаблица6.ПризнакНаличияТрудовойКнижки;
		
		Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(ВыборкаТаблица6.Сотрудник.ФизЛицо) = Неопределено Тогда
			ДобавленнаяСтрока[мИдГруппы6+"СпецСтаж"] = 1;
		КонецЕсли;
	
        ДобавленнаяСтрока[мИдГруппы6+"КвоТрудОтношений"] = ВыборкаТаблица6.ОтработанныеДни;
        ДобавленнаяСтрока[мИдГруппы6+"НовоеРМ"] 	     = ВыборкаТаблица6.ПринятНаНовоеРабочееМесто;
		
		//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
		Если Результат <> 0 И РезультатОтпускные <> 0 И ВыборкаТаблица6.Период = НачалоМесяца(мДатаКонцаПериодаОтчета) Тогда
			Если НомСтроки <= ИсходноеКоличествоСтрокГруппы6 Тогда
				ДобавленнаяСтрока = СтруктураГруппы6[НомСтроки - 1];
			Иначе
				ДобавленнаяСтрока = СтруктураГруппы6.Добавить();	
			КонецЕсли;
	        НомСтроки = НомСтроки + 1;
			
			ДобавленнаяСтрока[мИдГруппы6+"ДРФО"] 			= ОбработатьДРФО(ВыборкаТаблица6.ФизЛицо.КодПоДРФО);
			Если ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
				ДобавленнаяСтрока[мИдГруппы6+"МЖ"] 			= "Ч";
			ИначеЕсли ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
				ДобавленнаяСтрока[мИдГруппы6+"МЖ"] 			= "Ж";
			КонецЕсли;
			ДобавленнаяСтрока[мИдГруппы6+"Гражданин"]		= ВыборкаТаблица6.Гражданин;
			
			ДобавленнаяСтрока[мИдГруппы6+"ФИО"] 			= ВыборкаТаблица6.ФизЛицоФио;
			ДобавленнаяСтрока[мИдГруппы6+"Имя"] 			= ВыборкаТаблица6.ФизЛицоИмя;		
			ДобавленнаяСтрока[мИдГруппы6+"Отчество"]        = ВыборкаТаблица6.ФизЛицоОтчество;		
			
			ДобавленнаяСтрока[мИдГруппы6+"Категория"] 	= ВыборкаТаблица6.КодКатегорииЗЛ;
	        ДобавленнаяСтрока[мИдГруппы6+"ТипСтавки"] 	= 10;
			
			ДобавленнаяСтрока[мИдГруппы6+"МесяцГод"]	= ВыборкаТаблица6.Период;	
			
			ДобавленнаяСтрока[мИдГруппы6+"КвоБольничных"] 	= 0;
	        ДобавленнаяСтрока[мИдГруппы6+"КвоБезЗП"] 	= 0;
			
			ДобавленнаяСтрока[мИдГруппы6+"СуммаНачислено"]= РезультатОтпускные;
	        ДобавленнаяСтрока[мИдГруппы6+"СуммаНачисленоМаксБаза"] = РезультатСПределомОтпускные;
			ДобавленнаяСтрока[мИдГруппы6+"СуммаВзносов"]  = НалогОтпускные;
			
			ДобавленнаяСтрока[мИдГруппы6+"ТрудКнижка"] 	= ВыборкаТаблица6.ПризнакНаличияТрудовойКнижки;
			Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(ВыборкаТаблица6.Сотрудник.ФизЛицо) = Неопределено Тогда
				ДобавленнаяСтрока[мИдГруппы6+"СпецСтаж"] = 1;
			КонецЕсли;
	        ДобавленнаяСтрока[мИдГруппы6+"КвоТрудОтношений"] = 0;
	        ДобавленнаяСтрока[мИдГруппы6+"НовоеРМ"] 	     = ВыборкаТаблица6.ПринятНаНовоеРабочееМесто;
		КонецЕсли;	
		
	КонецЦикла;	
	ВывестиРазделВТабличныйДокумент(мИдГруппы6, СтруктураГруппы6);	
	
КонецПроцедуры

Функция  ПолучитьСписокЛиц()
	
	// Текст запроса: работники организации за период 
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаНач", мДатаНачалаПериодаОтчета - 1);
	Запрос.УстановитьПараметр("ДатаКон", мДатаКонцаПериодаОтчета +  1);
	Запрос.УстановитьПараметр("ДатаКонНеВключая", мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаНачВключая", Новый Граница(мДатаНачалаПериодаОтчета, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКонВключая", Новый Граница(мДатаКонцаПериодаОтчета + 1, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("Организация" , Организация);
	
	Попытка
		ТекстЗапросаРаботавшие =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо КАК ФизЛицо,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок КАК СтавокНаНачало,
		|	0 КАК СтавокНаКонец,
		|	NULL КАК ДатаПриема,
		|	NULL КАК ДатаУвольнения,
		|	NULL КАК ДатаСозданияРабочегоМеста,
		//|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто
		|	NULL КАК ПринятНаНовоеРабочееМесто		
		|ПОМЕСТИТЬ СписокРаботников
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизаций
		| ГДЕ Истина " + УсловиеНаПодразделение(,Запрос) + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	0,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок,
		|	NULL,
		|	NULL,
		|	NULL,
		//|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто
		|	NULL КАК ПринятНаНовоеРабочееМесто		
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКонВключая, Организация = &Организация) КАК РаботникиОрганизаций
		| ГДЕ Истина " + УсловиеНаПодразделение() + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	0,
		|	0,
		|	РаботникиОрганизаций.Период,
		|	NULL,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  " + УсловиеНаПодразделение() + "
		|   И НЕ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,	
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	0,
		|	0,
		|	NULL,
		|	РаботникиОрганизаций.Период,
		|	NULL,
		//|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто
		|	NULL КАК ПринятНаНовоеРабочееМесто		
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  " + УсловиеНаПодразделение() + "
		|   И НЕ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	NULL,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКонВключая, Организация = &Организация И НЕ ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизаций
		| ГДЕ Истина " + УсловиеНаПодразделение() + "
		|
		|;
		|       
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Категория,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	СписокРаботников.ФизЛицо.КодПоДРФО КАК КодПоДРФО,
		|	СУММА(СписокРаботников.СтавокНаНачало) КАК СтавокНаНачало,
		|	СУММА(СписокРаботников.СтавокНаКонец) КАК СтавокНаКонец,
		|	МИНИМУМ(СписокРаботников.ДатаПриема) КАК ДатаПриема,
		|	МАКСИМУМ(СписокРаботников.ДатаУвольнения) КАК ДатаУвольнения,
		|	МАКСИМУМ(СписокРаботников.ДатаСозданияРабочегоМеста) КАК ДатаСозданияРабочегоМеста,
		|	МАКСИМУМ(СписокРаботников.ПринятНаНовоеРабочееМесто) КАК ПринятНаНовоеРабочееМесто,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
		
		|МАКСИМУМ(ВЫБОР 
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		|		ТОГДА 0
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка) 
		|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина) 
		|		ТОГДА 1
		|	ИНАЧЕ 0
		|КОНЕЦ) КАК Гражданин, 	
		
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИзменилосьФИО
		|ИЗ
		|	СписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКонНеВключая, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНач, ) КАК ФИОФизЛицСрезНач
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезНач.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
		|		ПО СписокРаботников.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|";
	
		Запрос.Текст = ТекстЗапросаРаботавшие;
		РаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
		
	Исключение	
		ТекстЗапросаРаботавшие =
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо КАК ФизЛицо,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок КАК СтавокНаНачало,
		|	0 КАК СтавокНаКонец,
		|	NULL КАК ДатаПриема,
		|	NULL КАК ДатаУвольнения
		|ПОМЕСТИТЬ СписокРаботников
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизаций
		| ГДЕ Истина " + УсловиеНаПодразделение(,Запрос) + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	0,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаКонВключая, Организация = &Организация) КАК РаботникиОрганизаций
		| ГДЕ Истина " + УсловиеНаПодразделение() + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	0,
		|	0,
		|	РаботникиОрганизаций.Период,
		|	NULL
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  " + УсловиеНаПодразделение() + "
		|   И НЕ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,	
		|	РаботникиОрганизаций.Сотрудник.Физлицо,
		|	0,
		|	0,
		|	NULL,
		|	РаботникиОрганизаций.Период
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  " + УсловиеНаПодразделение() + "
		|   И НЕ РаботникиОрганизаций.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Категория,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	СписокРаботников.ФизЛицо.КодПоДРФО КАК КодПоДРФО,
		|	СУММА(СписокРаботников.СтавокНаНачало) КАК СтавокНаНачало,
		|	СУММА(СписокРаботников.СтавокНаКонец) КАК СтавокНаКонец,
		|	МИНИМУМ(СписокРаботников.ДатаПриема) КАК ДатаПриема,
		|	МАКСИМУМ(СписокРаботников.ДатаУвольнения) КАК ДатаУвольнения,
		|	МАКСИМУМ(ЛОЖЬ) КАК ПринятНаНовоеРабочееМесто,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
		
		|МАКСИМУМ(ВЫБОР 
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		|		ТОГДА 0
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка) 
		|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина) 
		|		ТОГДА 1
		|	ИНАЧЕ 0
		|КОНЕЦ) КАК Гражданин, 	
		
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИзменилосьФИО
		|ИЗ
		|	СписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКонНеВключая, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаНач, ) КАК ФИОФизЛицСрезНач
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезНач.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
		|		ПО СписокРаботников.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|";
	
		Запрос.Текст = ТекстЗапросаРаботавшие;
		РаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
	
	КонецПопытки;
	тзРаботники = РаботавшиеВОрганизации.Скопировать();
	
	РаботавшиеВОрганизации.Сортировать("Физлицо");
	Возврат РаботавшиеВОрганизации;
	
КонецФункции	

Функция  ПолучитьСписокДоговоровГПХ()
	
	Если (РегламентированнаяОтчетность.ИДКонфигурации() = "БП") Тогда
		// учет договоров ГПХ не ведется.
		// воспользуемся данными по начислениям (условно)
		
		//запросы по суммам начислений
		ЗапросГПХ = Новый Запрос ();
		ЗапросГПХ.Текст =  "ВЫБРАТЬ
		                   |	ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
	                       // ГПХ по основному месту работу
						   |	ВЫБОР 
						   |		КОГДА ОсновныеНачисленияРаботников.Сотрудник.ОсновноеНазначение.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ТОГДА 1 
						   |		КОГДА ОсновныеНачисленияРаботников.Сотрудник.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ТОГДА 1 
					   	   |		ИНАЧЕ 0 
						   |	КОНЕЦ КАК ГПХпоОснМестуРаботы,
						   
						   |	ОсновныеНачисленияРаботников.Сотрудник.Физлицо КАК ФизЛицо,
		                   |	ОсновныеНачисленияРаботников.Сотрудник.Физлицо.КодПоДРФО КАК КодПоДРФО,
		                   |	МИНИМУМ(ОсновныеНачисленияРаботников.ДатаНачала) КАК ДатаНач,
		                   |	МАКСИМУМ(ОсновныеНачисленияРаботников.ДатаОкончания) КАК ДатаКон,
		                   |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
		                   |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
		                   |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
						   |	МАКСИМУМ(ЛОЖЬ) КАК ПринятНаНовоеРабочееМесто,
						   |	МАКСИМУМ(ВЫБОР
		                   |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		                   |				ТОГДА 0
		                   |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		                   |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина)
		                   |				ТОГДА 1
		                   |			ИНАЧЕ 0
		                   |		КОНЕЦ) КАК Гражданин
		                   |ИЗ
		                   |	РегистрРасчета.Начисления КАК ОсновныеНачисленияРаботников
		                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
		                   |		ПО ОсновныеНачисленияРаботников.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
						   |		ПО ОсновныеНачисленияРаботников.Сотрудник.Физлицо = ГражданствоФизЛиц.ФизЛицо
						   |ГДЕ
						   |	ОсновныеНачисленияРаботников.Организация = &Организация
						   |" + УсловиеНаПодразделение(,ЗапросГПХ) + "	
						   |	И ОсновныеНачисленияРаботников.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
		                   |	И ОсновныеНачисленияРаботников.ВидРасчета В(&ВидыРасчетов)
		                   |
		                   |СГРУППИРОВАТЬ ПО
						   |	ОсновныеНачисленияРаботников.Сотрудник,
						   |	ОсновныеНачисленияРаботников.Сотрудник.Физлицо,
		                   |	ОсновныеНачисленияРаботников.Сотрудник.Физлицо.КодПоДРФО
		                   |
		                   |УПОРЯДОЧИТЬ ПО
		                   |	ФизЛицо";
		
		ЗапросГПХ.УстановитьПараметр("ДатаНач",  мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("ДатаКон" , мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("Организация",   Организация);
		
		// виды расчетов по ГПХ
		ВидыРасчетов = новый Массив();
		ОблагаемоеЕСВГПХ = ТаблицаВРГПХ.ВыгрузитьКолонку("ВидРасчета");
		Для каждого ВидРасчета Из ОблагаемоеЕСВГПХ Цикл
			ВидыРасчетов.Добавить(ВидРасчета);
		КонецЦикла;
		ЗапросГПХ.УстановитьПараметр("ВидыРасчетов",   ВидыРасчетов);
		
		Результат = ЗапросГПХ.Выполнить().Выгрузить();
		
	Иначе	
		
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "ВЫБРАТЬ
		                  |	Работники.Сотрудник КАК Сотрудник,
	                       // ГПХ по основному месту работу
						  |	ВЫБОР КОГДА Работники.Сотрудник.ОсновноеНазначение.ВидЗанятости = Значение(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК ГПХпоОснМестуРаботы,
						  |	Работники.Сотрудник.Физлицо КАК ФизЛицо,
					      |	Работники.Сотрудник.Физлицо.КодПоДРФО КАК КодПоДРФО,
						  |	МИНИМУМ(ВЫБОР
		                  |			КОГДА Работники.ДатаНачала >= &ДатаНач
		                  |					И Работники.ДатаНачала <= &ДатаКон
		                  |				ТОГДА Работники.ДатаНачала
		                  |			ИНАЧЕ NULL
		                  |		КОНЕЦ) КАК ДатаНач,
		                  |	МАКСИМУМ(ВЫБОР
		                  |			КОГДА Работники.ДатаОкончания >= &ДатаНач
		                  |					И Работники.ДатаОкончания <= &ДатаКон
		                  |				ТОГДА Работники.ДатаОкончания
		                  |			ИНАЧЕ NULL
		                  |		КОНЕЦ) КАК ДатаКон,
		                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
		                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
		                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
						  |	МАКСИМУМ(ЛОЖЬ) КАК ПринятНаНовоеРабочееМесто,
						  |	МАКСИМУМ(ВЫБОР
		                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		                  |				ТОГДА 0
		                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
		                  |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина)
		                  |				ТОГДА 1
		                  |			ИНАЧЕ 0
		                  |		КОНЕЦ) КАК Гражданин
		                  |ИЗ
		                  |	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
		                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
		                  |		ПО Работники.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
		                  |		ПО Работники.Сотрудник.Физлицо = ГражданствоФизЛиц.ФизЛицо
		                  |ГДЕ
		                  |		Работники.Проведен
		                  |   И Работники.Организация = &Организация
		                  |   И (     Работники.ДатаОкончания >= &ДатаНач И Работники.ДатаОкончания <= &ДатаКон
		                  |		  ИЛИ Работники.ДатаНачала    >= &ДатаНач И Работники.ДатаНачала    <= &ДатаКон)
		                  |
		                  |СГРУППИРОВАТЬ ПО
						  |	Работники.Сотрудник,
						  |	Работники.Сотрудник.Физлицо,
						  |	Работники.Сотрудник.Физлицо.КодПоДРФО
						  |УПОРЯДОЧИТЬ ПО
		                  |	ФизЛицо";	
						  
		ЗапросГПХ.УстановитьПараметр("ДатаНач",мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("Организация",Организация);
		
		Результат = ЗапросГПХ.Выполнить().Выгрузить();
		
		Если Результат.Количество() > 0 И УсловиеНаПодразделение() <> "" Тогда
			Сообщить("В форме отчета указано подразделение. Невозможно в таблице 6 указать данные по работникам по договорам ГПХ только по указанному подразделению. В Таблице 6 будет выведена информация по всем работникам ГПХ Организации");
		КонецЕсли;
		
	КонецЕсли;
			
	тзГПХ = Результат.Скопировать();
	
	Возврат Результат;		

КонецФункции

Функция ПолучитьСписокОтпуска(СписокВидовРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач",мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("нДатаКон",НачалоДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ВР",СписокВидовРасчета);	
	
	Запрос.УстановитьПараметр("ДатаПроверкиНачало",НачалоДня(мДатаНачалаПериодаОтчета-1));
	Запрос.УстановитьПараметр("ДатаПроверкиКонец",ДобавитьМесяц(мДатаНачалаПериодаОтчета,1));
	ТекстЗапросаВТНачало ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияКонец КАК Конец
	|ПОМЕСТИТЬ ВТНачало
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействияКонец = &ДатаПроверкиНачало
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|";
	
	ТекстЗапросаВТКонец ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияНачало КАК Начало
	|ПОМЕСТИТЬ ВТКонец
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействияНачало = &ДатаПроверкиКонец
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|";
	
	ТекстЗапросаВТПлановыеНачало ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Актуальность КАК Актуальность
	|ПОМЕСТИТЬ ВТПлановыеНачало
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаПроверкиНачало,Организация = &Организация И ВидРасчетаИзмерение В (&ВР)) КАК Начисления
	|ГДЕ
	|	Начисления.Актуальность//Размер
	|";
	
	ТекстЗапросаВТПлановыеКонец ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Актуальность КАК Актуальность
	|ПОМЕСТИТЬ ВТПлановыеКонец
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаПроверкиКонец,Организация = &Организация И ВидРасчетаИзмерение В (&ВР)) КАК Начисления
	|ГДЕ
	|	Начисления.Актуальность//Размер
	|";
	
	ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК ФизЛицо,
	|	Начисления.Сотрудник.Физлицо.КодПоДРФО КАК КодПоДРФО,
	|	ВЫБОР КОГДА Начисления.ПериодДействияНачало<> &ДатаНач
	|	ТОГДА Начисления.ПериодДействияНачало 
	|	КОГДА ПроверкаНачало.Сотрудник ЕСТЬ NULL И ПроверкаПлановыеНачало.Сотрудник ЕСТЬ NULL
	|	ТОГДА Начисления.ПериодДействияНачало 
	|	ИНАЧЕ NULL
	|	КОНЕЦ КАК Начало,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец,ДЕНЬ) <> &нДатаКон
	|	ТОГДА Начисления.ПериодДействияКонец 
	|	КОГДА ПроверкаКонец.Сотрудник ЕСТЬ NULL И ПроверкаПлановыеКонец.Сотрудник ЕСТЬ NULL
	|	ТОГДА Начисления.ПериодДействияКонец 
	|	ИНАЧЕ NULL
	|	КОНЕЦ КАК Конец,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	ВЫБОР
    |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
    |			ТОГДА 0
    |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)
    |				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Украина)
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК Гражданин
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия КАК Начисления
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНачало КАК ПроверкаНачало
	|	ПО Начисления.Сотрудник = ПроверкаНачало.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКонец КАК ПроверкаКонец
	|	ПО Начисления.Сотрудник = ПроверкаКонец.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачало КАК ПроверкаПлановыеНачало
	|	ПО Начисления.Сотрудник = ПроверкаПлановыеНачало.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеКонец КАК ПроверкаПлановыеКонец
	|	ПО Начисления.Сотрудник = ПроверкаПлановыеКонец.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
	|		ПО Начисления.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
	|		ПО Начисления.Сотрудник.Физлицо = ГражданствоФизЛиц.ФизЛицо
	|ГДЕ
	|	Начисления.Организация = &Организация
	|" + УсловиеНаПодразделение("Начисления", Запрос) + "	
	|	И Начисления.ПериодДействия = &ДатаНач
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|	И ((Начисления.ПериодДействияНачало <> &ДатаНач ИЛИ (ПроверкаНачало.Сотрудник ЕСТЬ NULL  И ПроверкаПлановыеНачало.Сотрудник ЕСТЬ NULL))
	|	 ИЛИ (Начисления.ПериодДействияКонец <> &нДатаКон ИЛИ (ПроверкаКонец.Сотрудник ЕСТЬ NULL И ПроверкаПлановыеКонец.Сотрудник ЕСТЬ NULL)))
	|УПОРЯДОЧИТЬ ПО
	| ФизЛицо
	|";
	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
		ТекстЗапросаВТНачало = СтрЗаменить(ТекстЗапросаВТНачало,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций","РегистрРасчета.Начисления");
		ТекстЗапросаВТКонец = СтрЗаменить(ТекстЗапросаВТКонец,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций","РегистрРасчета.Начисления");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций","РегистрРасчета.Начисления");
	КонецЕсли;	
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		ТекстЗапросаВТНачало = СтрЗаменить(ТекстЗапросаВТНачало,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия","РегистрРасчета.Начисления");
		ТекстЗапросаВТНачало = СтрЗаменить(ТекстЗапросаВТНачало,"ПериодДействияНачало","ДатаНачала");
		ТекстЗапросаВТНачало = СтрЗаменить(ТекстЗапросаВТНачало,"ПериодДействияКонец","ДатаОкончания");
		ТекстЗапросаВТНачало = СтрЗаменить(ТекстЗапросаВТНачало,"Начисления.ПериодДействия","НАЧАЛОПЕРИОДА(Начисления.ДатаНачала,МЕСЯЦ)");
		ТекстЗапросаВТКонец = СтрЗаменить(ТекстЗапросаВТКонец,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия","РегистрРасчета.Начисления");
		ТекстЗапросаВТКонец = СтрЗаменить(ТекстЗапросаВТКонец,"ПериодДействияНачало","ДатаНачала");
		ТекстЗапросаВТКонец = СтрЗаменить(ТекстЗапросаВТКонец,"ПериодДействияКонец","ДатаОкончания");
		ТекстЗапросаВТКонец = СтрЗаменить(ТекстЗапросаВТКонец,"Начисления.ПериодДействия","НАЧАЛОПЕРИОДА(Начисления.ДатаНачала,МЕСЯЦ)");
		ТекстЗапросаВТПлановыеНачало = СтрЗаменить(ТекстЗапросаВТПлановыеНачало,"Начисления.Актуальность//Размер","Начисления.Размер > 0");
		ТекстЗапросаВТПлановыеНачало = СтрЗаменить(ТекстЗапросаВТПлановыеНачало,"Начисления.Актуальность","Начисления.Размер");
		ТекстЗапросаВТПлановыеКонец = СтрЗаменить(ТекстЗапросаВТПлановыеКонец,"Начисления.Актуальность//Размер","Начисления.Размер > 0");
		ТекстЗапросаВТПлановыеКонец = СтрЗаменить(ТекстЗапросаВТПлановыеКонец,"Начисления.Актуальность","Начисления.Размер");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия","РегистрРасчета.Начисления");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПериодДействияНачало","ДатаНачала");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПериодДействияКонец","ДатаОкончания");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Начисления.ПериодДействия","НАЧАЛОПЕРИОДА(Начисления.ДатаНачала,МЕСЯЦ)");
	КонецЕсли;			
	Запрос.Текст = ТекстЗапросаВТНачало;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТКонец;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТПлановыеНачало;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТПлановыеКонец;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();		
	
КонецФункции	

Функция ПолучитьПричинуУвольнения(ФизЛицо, ДатаУвольнения)
	
    Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" 
                   или РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
       ИмяРеквизита = "ОснованиеУвольнения";
    Иначе
       ИмяРеквизита = "СтатьяКЗОТ";
    КонецЕсли;   
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ФизЛицо",ФизЛицо);
    Запрос.УстановитьПараметр("ДатаУвольнения",НачалоДня(ДатаУвольнения));
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |          УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо,
       |          УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения,
       |          УвольнениеИзОрганизацийРаботникиОрганизации."+ИмяРеквизита+" КАК СтатьяКЗОТ
       |ИЗ
       |          Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
       |ГДЕ
       |          УвольнениеИзОрганизацийРаботникиОрганизации.Физлицо = &ФизЛицо
       |          И УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения = &ДатаУвольнения";
	   
	Основание = "";   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Основание = Выборка.СтатьяКЗОТ.Наименование;
		Позиция = Найти(ВРЕГ(Основание),ВРЕГ("КЗпП"));
		Если Позиция = 0 Тогда
			Позиция = Найти(ВРЕГ(Основание),ВРЕГ("КЗоТ"));
		КонецЕсли;
		Если Позиция > 0 Тогда
			Основание = Сред(Основание,1,Позиция+3);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Основание;
	
КонецФункции	
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура ДоступностьЭлементовВариантаЗаполнения(Вариант = Неопределено, ТекущаяОбласть = Неопределено)
	
	//ТекущаяСтраницаПанели    = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = "Таблица1";

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вычисляется автоматически';uk='Значення обчислюється автоматично'");
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = НСтр("ru='Значение вводится вручную';uk='Значення вводиться вручну'");
		КонецЕсли;

		ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = "";
		ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = 0;
		ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = ОписаниеЯчейки;

	КонецЕсли;

	ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;

КонецПроцедуры // ДоступностьЭлементовВариантаЗаполнения()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;
	
	Если ЭлементМеню.Кнопки.Количество() = 0 Тогда

		ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Печатать сразу';uk='Друкувати відразу'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

		ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Предварительный просмотр';uk='Попередній перегляд'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);

		ЭлементМеню.Кнопки.Добавить("ЕстьДуплекс", ТипКнопкиКоманднойПанели.Действие,
		                            НСтр("ru='Принтер поддерживает автом. дуплекс';uk='Принтер підтримує автом. дуплекс'"), Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));
									
		ЭлементМеню.Кнопки.ЕстьДуплекс.Пометка = ЕстьДуплекс;

	КонецЕсли;
	
	ЛинияСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ЛинияПусто = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);


	мМассивТиповЛиний = Новый Массив();
	мМассивТиповЛиний.Вставить(0, ЛинияПусто);
	мМассивТиповЛиний.Вставить(1, ЛинияСнизу);
	
	// таблица больничных за счет предприятия
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
	    ТаблицаВРБольничныеПредприятие.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
	Иначе	
		ТаблицаВРБольничныеПредприятие.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
	КонецЕсли;
	КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБольничныеПредприятие.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
	КолонкаВидРасчета.Имя    = "ВидРасчета";
	КолонкаВидРасчета.Данные = "ВидРасчета";
	
	// таблица больничных ФСС
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
	    ТаблицаВРБольничныеФСС.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
	Иначе	
		ТаблицаВРБольничныеФСС.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
	КонецЕсли;
	КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБольничныеФСС.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
	КолонкаВидРасчета.Имя    = "ВидРасчета";
	КолонкаВидРасчета.Данные = "ВидРасчета";
	
	
	// таблица больничных ФСС несч. случай
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
	    ТаблицаВРБольничныеФССНесчСлучай.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
	Иначе	
		ТаблицаВРБольничныеФССНесчСлучай.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
	КонецЕсли;
	КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБольничныеФССНесчСлучай.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
	КолонкаВидРасчета.Имя    = "ВидРасчета";
	КолонкаВидРасчета.Данные = "ВидРасчета";
	
	// Отпуск по уходу за ребенком до 3 лет
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
	    ТаблицаВРОтпускДо3.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
	Иначе	
		ТаблицаВРОтпускДо3.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
	КонецЕсли;
	КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРОтпускДо3.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
	КолонкаВидРасчета.Имя    = "ВидРасчета";
	КолонкаВидРасчета.Данные = "ВидРасчета";

	// Отпуск по уходу за ребенком от 3 до 6 лет
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
	    ТаблицаВРОтпускОт3До6.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
	Иначе	
		ТаблицаВРОтпускОт3До6.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
	КонецЕсли;
	КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРОтпускОт3До6.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
	КолонкаВидРасчета.Имя    = "ВидРасчета";
	КолонкаВидРасчета.Данные = "ВидРасчета";
	
	// Отпуск по беременности и родам
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
	    ТаблицаВРОтпускПоБеременностиИРодам.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
	Иначе	
		ТаблицаВРОтпускПоБеременностиИРодам.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
	КонецЕсли;
	КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРОтпускПоБеременностиИРодам.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
	КолонкаВидРасчета.Имя    = "ВидРасчета";
	КолонкаВидРасчета.Данные = "ВидРасчета";
	
	// Без сохранения заработной платы
	Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда
	    ТаблицаВРБезСохраненияЗП.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), "",10);
	Иначе	
		ТаблицаВРБезСохраненияЗП.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
	КонецЕсли;
	КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРБезСохраненияЗП.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
	КолонкаВидРасчета.Имя    = "ВидРасчета";
	КолонкаВидРасчета.Данные = "ВидРасчета";

	Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
		
		ТаблицаВРГПХ.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), "",10);
		КолонкаВидРасчета 		 = ЭлементыФормы.ТаблицаВРГПХ.Колонки.Вставить(0,НСтр("ru = 'Вид расчета'; uk = 'Вид розрахунку'"));
		КолонкаВидРасчета.Имя    = "ВидРасчета";
		КолонкаВидРасчета.Данные = "ВидРасчета";
		
	Иначе
		
		ЭлементыФормы.РамкаГруппыГПХ.Видимость = Ложь;
		ЭлементыФормы.ТаблицаВРГПХ.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанельВРГПХ.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	ЭтаФорма.АвтоЗаголовок = Ложь;

	мПереченьТаблиц = ЭлементыФормы.ПолеТабличногоДокументаПереченьТаблиц;
	мТаблица1       = ЭлементыФормы.ПолеТабличногоДокументаТаблица1;
	мТаблица5       = ЭлементыФормы.ПолеТабличногоДокументаТаблица5;
	мТаблица6       = ЭлементыФормы.ПолеТабличногоДокументаТаблица6;
	мТаблица7       = ЭлементыФормы.ПолеТабличногоДокументаТаблица7;
	мСлужебныеДанные       = ЭлементыФормы.ПолеТабличногоДокументаСлужебныеДанные;
	
	Если мСохраненныйДок = Неопределено Тогда

		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			
			ТекТабличноеПоле = ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл
				
				СтрокаГруппы = СтруктураГруппы.Добавить();
				
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					
					ИмяКолонки    = Колонка.Имя;
					
					КодПоказателя = Сред(ИмяКолонки,1,3) + Формат(НСтр,"ЧЦ=6;ЧВН=0;ЧГ=;") + Сред(ИмяКолонки,4);
					ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
						
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ЗначениеЯчейки = ОбластьЯчейки.Значение;
					Иначе
						ЗначениеЯчейки = ОбластьЯчейки.Текст;
					КонецЕсли;
					
					СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
					
				КонецЦикла;
			КонецЦикла;
		
		КонецЦикла;

		
		Если мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
			
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ТочностьЕдиницыИзмерения = 2;
			
			мДеревоВыбранныхСтраниц = мДеревоСтраницОтчета.Скопировать();

			ЭлементыФормы.НадписьНазваниеОрганизации.Заголовок = Организация.Наименование;
			
			УстановитьФорматВывода();
			
			СодержаниеПредупреждения = "";
			
			// Больничные за счет предприятия
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеПредприятие");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРБольничныеПредприятие.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРБольничныеПредприятие.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			КонецЕсли;
			
			// Больничные за счет ФСС
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФСС");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРБольничныеФСС.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРБольничныеФСС.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			Иначе
				мТаблица = ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВБольничные);
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРБольничныеПредприятие.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Если мМенеджерЗвит1С = Неопределено Тогда
                    СодержаниеПредупреждения =  СодержаниеПредупреждения + НСТР("ru = ' по больничным'; uk = ' лікарняних'") + ", ";
				КонецЕсли;
				
			КонецЕсли;
			
			// Больничные за счет ФСС несч. случай
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБольничныеФССНесчСлучай");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРБольничныеФССНесчСлучай.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРБольничныеФССНесчСлучай.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			КонецЕсли;

			// Отпуск по уходу за ребенком до 3 лет
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускДо3");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРОтпускДо3.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускДо3.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			Иначе	
				мТаблица = ПолучитьСписокПоУходуДо3();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускДо3.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Если мМенеджерЗвит1С = Неопределено Тогда
					// Предупреждаем только если это не 1С:Звіт
                    СодержаниеПредупреждения =  СодержаниеПредупреждения + НСТР("ru = ' отпусков по уходу за ребенком'; uk = ' відпусток по догляду за дитиною'") + ", ";
				КонецЕсли;				
			КонецЕсли;
			
			// Отпуск по уходу за ребенком от 3 до 6 лет
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускОт3До6");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРОтпускОт3До6.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускОт3До6.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			Иначе	
				мТаблица = ПолучитьСписокПоУходу();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускОт3До6.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Если мМенеджерЗвит1С = Неопределено Тогда
					// Предупреждаем только если это не 1С:Звіт
                    СодержаниеПредупреждения =  СодержаниеПредупреждения + НСТР("ru = ' отпусков по уходу за ребенком'; uk = ' відпусток по догляду за дитиною'") + ", ";
				КонецЕсли;				
			КонецЕсли;
			
			// Отпуск по беременности и родам
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРОтпускПоБеременностиИРодам");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРОтпускПоБеременностиИРодам.Очистить();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускПоБеременностиИРодам.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			Иначе	
				мТаблица = ПолучитьСписокДекретные();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРОтпускПоБеременностиИРодам.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Если мМенеджерЗвит1С = Неопределено Тогда
					// Предупреждаем только если это не 1С:Звіт
                    СодержаниеПредупреждения =  СодержаниеПредупреждения + НСТР("ru = ' отпусков по беременности и родам'; uk = ' відпусток по вагітності і пологах'") + ", ";
				КонецЕсли;				
			КонецЕсли;
			
			// Без сохранения заработной платы
			мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРБезСохраненияЗП");
			Если НЕ мТаблица = Неопределено Тогда
				ТаблицаВРБезСохраненияЗП.Очистить();
				
				Если РегламентированнаяОтчетность.ИДКонфигурации() = "УТП" Тогда				
					ПВР = ПланыВидовРасчета["Начисления"];		
				Иначе
					ПВР = ПланыВидовРасчета["ОсновныеНачисленияОрганизаций"];		
				КонецЕсли;

				Для каждого ВидРасчета Из мТаблица Цикл
					ИмяПредопределенного = ПВР.ПолучитьИмяПредопределенного(ВидРасчета);
					Если    ИмяПредопределенного = "Замещение"
						ИЛИ ИмяПредопределенного = "Совмещение" Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаВР = ТаблицаВРБезСохраненияЗП.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
			Иначе	
				мТаблица = ПолучитьСписокБезСохранения();
				Для каждого ВидРасчета Из мТаблица Цикл
					СтрокаВР = ТаблицаВРБезСохраненияЗП.Добавить();
					СтрокаВР.ВидРасчета = ВидРасчета;
				КонецЦикла;
				Если мМенеджерЗвит1С = Неопределено Тогда
					// Предупреждаем только если это не 1С:Звіт
                    СодержаниеПредупреждения =  СодержаниеПредупреждения + НСТР("ru = ' без сохранения зарплаты'; uk = ' без збереження зарплати'") + ", ";
				КонецЕсли;	
			КонецЕсли;

			Если ЗначениеЗаполнено(СодержаниеПредупреждения) Тогда
				СодержаниеПредупреждения = Лев(СодержаниеПредупреждения, СтрДлина(СодержаниеПредупреждения)-2);
				Предупреждение(НСТР("ru = 'Проверьте правильность заполнения таблиц с видами расчетов '; uk = 'Перевірте правильність заповнення таблиць з видами розрахунку '") + СодержаниеПредупреждения + "!");			
			КонецЕсли;
			
			Если РегламентированнаяОтчетность.ИДКонфигурации() = "БП" Тогда
				
				// ГПХ
				мТаблица = ВосстановитьЗначение("РегламентированнаяОтчетность_ТаблицаВРГПХ");
				Если НЕ мТаблица = Неопределено Тогда
					ТаблицаВРГПХ.Очистить();
					Для каждого ВидРасчета Из мТаблица Цикл
						СтрокаВР = ТаблицаВРГПХ.Добавить();
						СтрокаВР.ВидРасчета = ВидРасчета;
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;
			
			мТаблица1.Области.СрокВыплатыЗП1.Значение = ВосстановитьЗначение("РегламентированнаяОтчетность_СрокВыплатыЗП1_"+Организация.Код);	
			мТаблица1.Области.СрокВыплатыЗП2.Значение = ВосстановитьЗначение("РегламентированнаяОтчетность_СрокВыплатыЗП2_"+Организация.Код);	
			мТаблица1.Области.Министерство.Значение   = ВосстановитьЗначение("РегламентированнаяОтчетность_Министерство_"+Организация.Код);	
			
			текУказыватьПериодДляВсехНачислений = ВосстановитьЗначение("РегламентированнаяОтчетность_ЕСВ_УказыватьПериодДляВсехНачислений");
			Если текУказыватьПериодДляВсехНачислений = Неопределено Тогда
				УказыватьПериодДляВсехНачислений = Истина;
			Иначе	
			    УказыватьПериодДляВсехНачислений = текУказыватьПериодДляВсехНачислений
			КонецЕсли;
			
			текВыделятьЕСВДляОтпускных = ВосстановитьЗначение("РегламентированнаяОтчетность_ЕСВ_ВыделятьЕСВДляОтпускных");
			Если текВыделятьЕСВДляОтпускных = Неопределено Тогда
				ВыделятьЕСВДляОтпускных = Истина;
			Иначе	
			    ВыделятьЕСВДляОтпускных = текВыделятьЕСВДляОтпускных
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизации();

		ИсхНомер = ВосстановитьЗначение("РегламентированнаяОтчетность_ПенсионныйФонд_ИсхНомер");
		Если ЗначениеЗаполнено(ИсхНомер) Тогда
			Попытка
				ИсхНомер = Число(ИсхНомер) + 1;
			Исключение
			    ИсхНомер = 1;
			КонецПопытки;
		Иначе
			 ИсхНомер = 1;
		КонецЕсли;
		мПереченьТаблиц.Области.ИсхНомер.Значение = ИсхНомер;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();

	КонецЕсли;

	КаталогДанных = ВосстановитьЗначение("КаталогДанных");
	
	ПоказатьПериод();
	
	мПереченьТаблиц.ТолькоПросмотр = Истина;
	мТаблица1.ТолькоПросмотр = Истина;
	мТаблица5.ТолькоПросмотр = Истина;
	мТаблица6.ТолькоПросмотр = Истина;
	мТаблица7.ТолькоПросмотр = Истина;
	мСлужебныеДанные.ТолькоПросмотр = Истина;
	
	УстановитьЦветФонаЯчейки(,,"ПереченьТаблиц");
	УстановитьЦветФонаЯчейки(,,"Таблица1");
	УстановитьЦветФонаЯчейки(,,"Таблица6");
	УстановитьЦветФонаЯчейки(,,"Таблица7");
	
	ЗаполнитьОтображениеДанныхВТаблицах();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность = Истина Тогда

		Ответ = Вопрос(НСтр("ru='Данные были изменены. Сохранить изменения ?';uk='Дані були змінені. Зберегти зміни ?'"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
	СохранитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс", ЕстьДуплекс);
	
	СохранитьЗначение("КаталогДанных",КаталогДанных); 

КонецПроцедуры // ПередЗакрытием()

Процедура СохранитьДеревоСтраницОтчета()
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(мДеревоСтраницОтчета);
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			
			мСохраненныйДок.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" 
// командной панели формы.
//
Процедура КоманднаяПанельФормыЗаполнить(Кнопка)

	Очистить();
	
	ЗаполнитьСведенияОбОрганизации();
	
	ЗаполнитьАвто();

КонецПроцедуры // КоманднаяПанельФормыЗаполнить

// Процедура вызывается при нажатии кнопки "Очистить".
//
Процедура КоманднаяПанельФормыОчистить(Кнопка)

	Очистить();

КонецПроцедуры // КоманднаяПанельФормыОчистить()

// Процедура вызывается при нажатии кнопки "Настройка страниц"  командной панели
// действий формы.
//
// Вызывает диалог настройки вывода на печать, показа и выгрузки.страниц отчета,
// а также процедуру управления видимостью страниц.
//
Процедура КоманднаяПанельФормыКнопкаНастройкаСтраниц(Кнопка)

	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

	// Управляем видимостью страниц основной панели формы
	ПоказатьСтраницыОтчета();

	Модифицированность = Истина;

КонецПроцедуры // КоманднаяПанельФормыКнопкаНастройкаСтраниц()


// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если Найти(Кнопка.Имя, "Дуплекс") >0 Тогда
		     ЕстьДуплекс    = НЕ Кнопка.Пометка;
			 Кнопка.Пометка = НЕ Кнопка.Пометка;
		Иначе
			 Печать(Кнопка.Имя);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// Процедура вызывается нажатием кнопки "ОК" командной панели действий формы.
// Выполняет сохранение данных отчета и закрывает текущую форму.
//
Процедура КоманднаяПанельДействийДействиеСохранитьИЗакрыть(Кнопка)

	Если Сохранить() Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеСохранитьИЗакрыть()

// Процедура вызывается нажатием кнопки "Записать" командной панели действий формы.
// Выполняет сохранение данных отчета.
//
Процедура КоманднаяПанельДействийДействиеЗаписать(Кнопка)

	Сохранить();

КонецПроцедуры // КоманднаяПанельДействийДействиеЗаписать()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "ПриИзменении" поля ввода даты
// представления отчета.
//
Процедура ПолеВводаДатаСдачиПриИзменении(Элемент)
	
	мПереченьТаблиц.Области.ИсхДата.Значение = ДатаПодписи;
	
	ЗаполнитьОтображениеДанныхВТаблицах();
	
	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаДатаСдачиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода точности
// единицы измерения.
//
Процедура ПолеВводаТочностьЕдиницыИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаТочностьЕдиницыИзмеренияПриИзменении()

// Процедура - обработчик события при изменении значения единицы измерения.
//
Процедура ПолеВыбораЕдиницаИзмеренияПриИзменении(Элемент)

	ПроверитьТочность();
	УстановитьФорматВывода();

	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленноой единицей изменения и точностью.
	Расчет();

	Модифицированность = Истина;

КонецПроцедуры // ПолеВыбораЕдиницаИзмеренияПриИзменении()

// Процедура вызывается при активизации поля табличного документа.
//   Определяет текущую область табличного документа и вызывает процедуру 
// управления доступностью кнопок "Добавить" и "Удалить" на странице формы.
//
Процедура ПолеТабличногоДокументаОтчетПФПриАктивизацииОбласти(Элемент)

	ТекущаяОбласть = Элемент.ТекущаяОбласть;
	ВывестиЭлементыВариантаЗаполнения(Элемент.ТекущаяОбласть);

КонецПроцедуры // ПолеТабличногоДокументаОтчетПФПриАктивизацииОбласти()


// Процедура - обработчик события "ПриИзменении" поля выбора варианта заполнения
// активной ячейка табличного документа.
//
Процедура ПолеВыбораВариантЗаполненияОтчетПФПриИзменении(Элемент)

	ИзменитьВариантЗаполненияЯчейки(Элемент.Значение);

КонецПроцедуры // ПолеВыбораВариантЗаполненияЛист2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// величины автокорректировки.
//
Процедура ПолеВводаЗначениеКорректировкиОтчетПФПриИзменении(Элемент)

	Дельта = Элемент.Значение;
	ИзменитьЗначениеАвтокорректировки(Дельта);

	Модифицированность = Истина;

КонецПроцедуры // ПолеВводаЗначениеКорректировкиПриИзменении

// Процедура - обработчик события "ПриИзменении" значения в поле ввода
// "Комментарий" по ячейке, для которой установлен алгоритм автозаполнения 
// [автоматически с ручной корректирорвкой].
//
Процедура ПолеВводаКомментарийОтчетПФПриИзменении(Элемент)

	Коммент = Элемент.Значение;
	ИзменитьКомментарийПоЯчейке(Коммент);

КонецПроцедуры // ПолеВводаКомментарийПриИзменении()

Процедура КоманднаяПанельФормыРасширитьПолеБланка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуПереходаВРежимВводаДанных(ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаДобавитьДопСтрокиНажатие(Элемент)
	
	ВставитьДополнительнуюСтроку(); 
	
КонецПроцедуры

Процедура КнопкаУдалитьДопСтрокиНажатие(Элемент)
	
	УдалитьДополнительнуюСтроку();
		
КонецПроцедуры

Процедура ЗначениеВКлетку(Знач Значение, ВыводитьНули, Размер, ИмяПараметра, ТекущаяОбластьМакета, ЗаполнятьПараметр = Ложь)
	
	Пустышка = ?(ВыводитьНули, "0", " ");
	
	ЗначСтр = "";
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		ЗначСтр = Формат(Значение, "ЧГ=");
	Иначе	
		ЗначСтр = Строка(Значение);
	КонецЕсли;
	
	ДлинаЗнач = СтрДлина(ЗначСтр);
	Пока ДлинаЗнач < Размер Цикл
		Если (Размер = 27) или (Размер = 25) или (Размер = 18) или (Размер = 16) или (Размер = 15) или (Размер = 17)  Тогда
			ЗначСтр = ЗначСтр + Пустышка;
		Иначе  
			// дозаполним значение пустышками (слева!!!)
			ЗначСтр = Пустышка + ЗначСтр;
		КонецЕсли;
		ДлинаЗнач = ДлинаЗнач + 1;
	КонецЦикла;
	
	// заполним массив
	Для Ном = 1 По Размер Цикл
		Если ЗаполнятьПараметр Тогда
			ТекущаяОбластьМакета.Параметры[ИмяПараметра + Строка(Ном)] = Сред(ЗначСтр,Ном,1) 
		Иначе	
		    ТекущаяОбластьМакета.Области[ИмяПараметра + Строка(Ном)].Значение = Сред(ЗначСтр,Ном,1) 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОтображениеДанныхВТаблицах()

	ЕДРПОУ = мПереченьТаблиц.Области.ЕДРПОУ.Значение + "          ";
	Филиал = мПереченьТаблиц.Области.Филиал.Значение + "     ";
	
	НазваниеОрганизации = мПереченьТаблиц.Области.НазваниеОрганизации.Значение;
	
	КодОрганаПФУ = мПереченьТаблиц.Области.КодОрганаПФУ.Значение; 	
	
	ИсхНомер = мПереченьТаблиц.Области.ИсхНомер.Значение; 
	ИсхДата = мПереченьТаблиц.Области.ИсхДата.Значение; 
	
	мес = Месяц(мДатаНачалаПериодаОтчета);
	год = Год(мДатаНачалаПериодаОтчета);
	
	деньПодписи = День(ДатаПодписи);
	месПодписи = Месяц(ДатаПодписи);
	годПодписи = Год(ДатаПодписи);
	
	РуководительИНН = мПереченьТаблиц.Области.РуководительИНН.Значение;
	РуководительФИО = мПереченьТаблиц.Области.РуководительФИО.Значение;
	
	БухгалтерИНН = мПереченьТаблиц.Области.БухгалтерИНН.Значение + "          ";
	БухгалтерФИО = мПереченьТаблиц.Области.БухгалтерФИО.Значение + "          ";

	ЗначениеВКлетку(ЕДРПОУ, Ложь,   10, "ЕДРПОУ", мПереченьТаблиц);
	ЗначениеВКлетку(Филиал, Ложь,    5, "Филиал", мПереченьТаблиц);
	
	ЗначениеВКлетку(Мес, Истина,    2, "Мес", мПереченьТаблиц);
	ЗначениеВКлетку(Год, ЛОЖЬ,      4, "Год", мПереченьТаблиц);
	
	Если ЗначениеЗаполнено(ИсхДата) Тогда
	
		мПереченьТаблиц.Области.ИсхДатаЧисло.Значение = День(ИсхДата);
		// нужно получить название меясца в определенном падеже. Поэтому отобразим дату "01.месяца" и обрежем число с точной слева.
		мПереченьТаблиц.Области.ИсхДатаМесяц.Значение = Сред(Формат(НачалоМесяца(ИсхДата),"Л=uk_UA; ДФ=дд.ММММ"), 4);
		мПереченьТаблиц.Области.ИсхДатаГод.Значение = Сред(Формат(Год(ИсхДата),"ЧГ=0"), 3);
		
	иначе
		
		мПереченьТаблиц.Области.ИсхДатаЧисло.Значение = "";
		мПереченьТаблиц.Области.ИсхДатаМесяц.Значение = "";
		мПереченьТаблиц.Области.ИсхДатаГод.Значение = "";
	
	КонецЕсли;
		
	мПереченьТаблиц.Области.Месяц.Значение = Мес;
	мПереченьТаблиц.Области.Год.Значение = Сред(Формат(Год,"ЧГ=0"), 3);
	
	мТаблица1.Области.ПериодОтчетаПриложение.Значение = ФОрмат(мДатаНачалаПериодаОтчета,"Л=uk_UA; ДФ=ММММ") + " місяць " + ФОрмат(мДатаНачалаПериодаОтчета,"Л=uk_UA; ДФ=yyyy") +" року";
	
	мТаблица1.Области.ИсхНомер.Значение = ИсхНомер;
	ЗначениеВКлетку(Мес, Истина,    2, "Мес", мТаблица1);
	ЗначениеВКлетку(Год, ЛОЖЬ,      4, "Год", мТаблица1);
	
	ЗначениеВКлетку(ЕДРПОУ, Ложь,   10, "ЕДРПОУ", мТаблица1);
	ЗначениеВКлетку(Филиал, Ложь,    5, "Филиал", мТаблица1);
	
	мТаблица1.Области.НазваниеОрганизации.Значение = НазваниеОрганизации;
	
	ЗначениеВКлетку(деньПодписи,  Истина,    2, "деньПодписи",   мТаблица1);
	ЗначениеВКлетку(месПодписи, Истина,      2, "месПодписи",    мТаблица1);
	ЗначениеВКлетку(годПодписи,   Истина,    4, "годПодписи",    мТаблица1);
	
	ЗначениеВКлетку(РуководительИНН, Ложь, 10, "РуководительИНН", мТаблица1);
	ЗначениеВКлетку(БухгалтерИНН,    Ложь, 10, "БухгалтерИНН",    мТаблица1);
	
	мТаблица1.Области.РуководительФИО.Значение = РуководительФИО;
	мТаблица1.Области.БухгалтерФИО.Значение = БухгалтерФИО;
	мТаблица1.Области.БухгалтерФИО_.Значение = БухгалтерФИО;
	
	мТаблица1.Области.НужныИзмененияВПерсонификацииНет.Шрифт = Новый Шрифт(мТаблица1.Области.НужныИзмененияВПерсонификацииНет.Шрифт,,,,,мСлужебныеДанные.Области.OPERADD.Значение = 0);
	мТаблица1.Области.НужныИзмененияВПерсонификацииДА.Шрифт   = Новый Шрифт(мТаблица1.Области.НужныИзмененияВПерсонификацииДА.Шрифт,,,,,  мСлужебныеДанные.Области.OPERADD.Значение = 1);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаПереченьТаблицВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если    Область.Имя = "ИсхДатаЧисло"
		ИЛИ Область.Имя = "ИсхДатаМесяц"
		ИЛИ Область.Имя = "ИсхДатаГод" Тогда
		
		ИсхДата = мПереченьТаблиц.Области.ИсхДата.Значение;
		
		Если ВвестиДату(ИсхДата,  НСтр("ru = 'Укажите дату регистрации'; uk = 'Введіть дату реєстрації'"), ЧастиДаты.Дата) Тогда
			
			мПереченьТаблиц.Области.ИсхДата.Значение = ИсхДата;
			ЗаполнитьОтображениеДанныхВТаблицах();
		
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ЛЕВ(Область.Имя, 6) = "ЕДРПОУ" Тогда
		
		ЕДРПОУ = мПереченьТаблиц.Области.ЕДРПОУ.Значение;	
		
		Если ВвестиСтроку(ЕДРПОУ,  НСтр("ru = 'Укажите код за ЕГРПОУ'; uk = 'Введіть код за ЄДРПОУ'"), 10, Ложь) Тогда
			мПереченьТаблиц.Области.ЕДРПОУ.Значение = ЕДРПОУ;
			ЗаполнитьОтображениеДанныхВТаблицах();
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ЛЕВ(Область.Имя, 6) = "Филиал" Тогда
		
		Филиал = мПереченьТаблиц.Области.Филиал.Значение;	
		
		Если ВвестиСтроку(Филиал,  НСтр("ru = 'Укажите код филиала'; uk = 'Введіть код філії'"), 5, Ложь) Тогда
			мПереченьТаблиц.Области.Филиал.Значение = Филиал;
			ЗаполнитьОтображениеДанныхВТаблицах();
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаПереченьТаблицПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если    Область.Имя = "НазваниеОрганизации" 
		ИЛИ Прав(Область.Имя, 3) = "ФИО" 
		ИЛИ Прав(Область.Имя, 3) = "ИНН" 
		ИЛИ Область.Имя = "НазваниеОрганизации"
		ИЛИ Область.Имя = "ИсхНомер"
		ИЛИ Область.Имя = "КодОрганаПФУ" Тогда
		
		ЗаполнитьОтображениеДанныхВТаблицах();
		
	Иначе
		
		Расчет();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица1ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
 	Расчет();
	ОбновитьПараметрыАвтозаполненияЯчейки();

	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица5ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
 	Расчет();

	Модифицированность = Истина;

КонецПроцедуры


Процедура ПолеТабличногоДокументаТаблица6ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
 	Расчет();

	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица7ПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
 	Расчет();

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица5Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Если    Область.Имя = "Начальная" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица5.Области.Начальная.Значение = "Х";
		мТаблица5.Области.Отменяющая.Значение = "";
		мТаблица5.Области.Дополнительная.Значение = "";
	ИначеЕсли Область.Имя = "Отменяющая" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица5.Области.Начальная.Значение = "";
		мТаблица5.Области.Отменяющая.Значение = "Х";
		мТаблица5.Области.Дополнительная.Значение = "";
	ИначеЕсли Область.Имя = "Дополнительная" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица5.Области.Начальная.Значение = "";
		мТаблица5.Области.Отменяющая.Значение = "";
		мТаблица5.Области.Дополнительная.Значение = "Х";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица6Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Если    Область.Имя = "Начальная" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица6.Области.Начальная.Значение = "Х";
		мТаблица6.Области.Отменяющая.Значение = "";
	ИначеЕсли Область.Имя = "Отменяющая" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица6.Области.Начальная.Значение = "";
		мТаблица6.Области.Отменяющая.Значение = "Х";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица7Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Если    Область.Имя = "Начальная" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица7.Области.Начальная.Значение = "Х";
		мТаблица7.Области.Отменяющая.Значение = "";
		мТаблица7.Области.Дополнительная.Значение = "";
	ИначеЕсли Область.Имя = "Отменяющая" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица7.Области.Начальная.Значение = "";
		мТаблица7.Области.Отменяющая.Значение = "Х";
		мТаблица7.Области.Дополнительная.Значение = "";
	ИначеЕсли Область.Имя = "Дополнительная" Тогда
		СтандартнаяОбработка = Ложь;
		мТаблица7.Области.Начальная.Значение = "";
		мТаблица7.Области.Отменяющая.Значение = "";
		мТаблица7.Области.Дополнительная.Значение = "Х";
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, ИдГруппы)
	
	Если СтруктураГруппы.Количество() > мСтруктураИсхКолвоСтрокРазделов[ИдГруппы] Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Инд = 1 По мСтруктураИсхКолвоСтрокРазделов[ИдГруппы] Цикл
		СтрокаГруппы = СтруктураГруппы[Инд - 1];
		Для каждого Колонка Из СтруктураГруппы.Колонки Цикл
			
			Если ЗначениеЗаполнено(СтрокаГруппы[Колонка.Имя]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;		
	
	КонецЦикла;

	Возврат Истина;
	
КонецФункции // ТаблицаМногострочнойЧастиПуста

Функция ПолучитьГривны(Число)
	
	Значение = Цел(Число);
	
	Если Значение = 0 Тогда
		Если Число = 0 Тогда
		    Значение = "";
		Иначе	
			Значение = "0";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции // ПолучитьГривны()

Функция ПолучитьКопейки(Число)
	
	Модуль = ?(Число < 0, -Число, Число);
	
	Значение = (Модуль - Цел(Модуль)) * 100;
	
	Если Значение = 0 Тогда
		Если Число = 0 Тогда
		    Значение = " -";
		Иначе	
			Значение = "00";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции // ПолучитьГривны()

Процедура КаталогДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)

 	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = НСтр("ru='Выберите каталог сохранения pfz файлов';uk='Виберіть каталог збереження pfz файлів'");

	Если Диалог.Выбрать() Тогда
		КаталогДанных = Диалог.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСуществованиеКаталога()
	
	Результат = Ложь;
	
	КаталогНаДиске = Новый Файл(КаталогДанных);
	Если (КаталогДанных <> Неопределено) И (КаталогДанных <> "") И (КаталогНаДиске.Существует()) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтказПриПроверкеРеквизитовДляВыгрузкиDBF()

	Отказ = Ложь;
	СтруктураГруппы = Неопределено;
	// проверка реквизитов Таблиц 5-7
	ТекИдГруппы = мИдГруппы5; 
	мСтруктураМногострочныхРазделов.Свойство(ТекИдГруппы, СтруктураГруппы);
	Если НЕ ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, ТекИдГруппы) Тогда		
		Для каждого Строка Из СтруктураГруппы Цикл
			Если    Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "ДРФО"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "Фамилия"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "Имя"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "Категория"])Тогда
			
				Отказ = Истина;
				Сообщить(НСтр("ru = 'Таблица '; uk = 'Таблиця'") + Сред(ТекИдГруппы,2,1)                + ", "
				       + НСТР("ru = 'строка '; uk = 'рядок '")     + (СтруктураГруппы.Индекс(Строка) + 1) + ": " 
					   + НСТР("ru = 'не заполнен код ДРФО или Категория или фамилия или имя сотрудника!'; uk = 'не заповнений код ДРФО або Категорія або призвище або ім''я співробітника!'"));
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекИдГруппы = мИдГруппы6; 
	мСтруктураМногострочныхРазделов.Свойство(ТекИдГруппы, СтруктураГруппы);
	Если НЕ ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, ТекИдГруппы) Тогда		
		Для каждого Строка Из СтруктураГруппы Цикл
			Если    Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "ДРФО"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "ФИО"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "Имя"]) Тогда
			
				Отказ = Истина;
				Сообщить(НСтр("ru = 'Таблица '; uk = 'Таблиця'") + Сред(ТекИдГруппы,2,1)                + ", "
				       + НСТР("ru = 'строка '; uk = 'рядок '")     + (СтруктураГруппы.Индекс(Строка) + 1) + ": " 
					   + НСТР("ru = 'не заполнен код ДРФО или фамилия или имя сотрудника!'; uk = 'не заповнений код ДРФО або призвище або ім''я співробітника!'"));
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекИдГруппы = мИдГруппы7; 
	мСтруктураМногострочныхРазделов.Свойство(ТекИдГруппы, СтруктураГруппы);
	Если НЕ ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, ТекИдГруппы) Тогда		
		Для каждого Строка Из СтруктураГруппы Цикл
			Если    Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "ДРФО"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "ФИО"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "Имя"])
				ИЛИ Не ЗначениеЗаполнено(Строка[ТекИдГруппы + "КодОснования"]) Тогда
			
				Отказ = Истина;
				Сообщить(НСтр("ru = 'Таблица '; uk = 'Таблиця'") + Сред(ТекИдГруппы,2,1)                + ", "
				       + НСТР("ru = 'строка '; uk = 'рядок '")     + (СтруктураГруппы.Индекс(Строка) + 1) + ": " 
					   + НСТР("ru = 'не заполнен код ДРФО или фамилия или имя сотрудника; или код основания учета спецстажа!'; uk = 'не заповнений код ДРФО або призвище або ім''я співробітника; або код підстави обліку спецстажу!'"));
			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции // ()

Процедура ВыгрузитьЛистВDBF(СтруктураПараметровЛиста)
	
	Перем ИмяТабличногоПоля;
	Перем ИмяФайла;
	
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	
	ДокЭкспорт = Новый XBase;
	ДокЭкспорт.Кодировка = КодировкаXBase.ANSI; //windows
	
	Если ИмяТабличногоПоля = "ПолеТабличногоДокументаПереченьТаблиц" Тогда
		
		// не выгружаем
		СтруктураПараметровЛиста.Вставить("ИмяФайла", ИмяФайла);
		Возврат;
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица1" Тогда
		
		// не выгружаем
		СтруктураПараметровЛиста.Вставить("ИмяФайла", ИмяФайла);
		Возврат;
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица5" Тогда
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы5, СтруктураГруппы);
	
		Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, мИдГруппы5) Тогда		
			ДокЭкспорт.ЗакрытьФайл();
			СтруктураПараметровЛиста.Вставить("ИмяФайла", ИмяФайла);
			Возврат;
		КонецЕсли;
		
		ИмяФайлаБезРасширения = "E04T05" + ВерсияВыгрузки;
		ИмяФайла              = ИмяФайлаБезРасширения+ ".DBF";
		
		ДокЭкспорт.поля.Добавить("PERIOD_M",	"N", 2);
		ДокЭкспорт.поля.Добавить("PERIOD_Y",	"N", 4);
		
		ДокЭкспорт.поля.Добавить("ROWNUM",		"N", 6);
		ДокЭкспорт.поля.Добавить("UKR_GROMAD",	"N", 1);
		
		ДокЭкспорт.поля.Добавить("ZO",			"N", 2);
		
		ДокЭкспорт.поля.Добавить("DOG_CPH",     "N", 1);
		
		ДокЭкспорт.поля.Добавить("NUMIDENT",	"C", 10);
		ДокЭкспорт.поля.Добавить("LN",			"C", 100);
		ДокЭкспорт.поля.Добавить("NM",			"C", 100);
		ДокЭкспорт.поля.Добавить("FTN",			"C", 100);
		ДокЭкспорт.поля.Добавить("START_DT",	"N", 2);
		ДокЭкспорт.поля.Добавить("END_DT",		"N", 2);
		
		ДокЭкспорт.поля.Добавить("NRM_DT",		"C", 8);
		
		ДокЭкспорт.поля.Добавить("PID_ZV",		"C", 150);
		
		
		ДокЭкспорт.СоздатьФайл(КаталогДанных + "\" + ИмяФайла);
		ДокЭкспорт.АвтоСохранение = Истина;
		Если ДокЭкспорт.Первая() Тогда
			ДокЭкспорт.Очистить();
		КонецЕсли;
		
		КоличествоСтрок = 1;
		Для каждого СтрокаГруппы Из СтруктураГруппы Цикл
			
			ДокЭкспорт.Добавить();
			
			докЭкспорт.PERIOD_M 	= Месяц(мДатаНачалаПериодаОтчета);
			докЭкспорт.PERIOD_Y 	= Год(мДатаНачалаПериодаОтчета);
			
			докЭкспорт.ROWNUM 	= КоличествоСтрок;
			докЭкспорт.UKR_GROMAD 	= СтрокаГруппы.Т5_Гражданин;
			
			докЭкспорт.ZO 	= СтрокаГруппы.Т5_Категория;
			
			докЭкспорт.DOG_CPH 	= СтрокаГруппы.Т5_ГПХ;
			
			докЭкспорт.NUMIDENT = СтрокаГруппы.Т5_ДРФО;
			докЭкспорт.LN		= СтрокаГруппы.Т5_Фамилия;
			докЭкспорт.NM		= СтрокаГруппы.Т5_Имя;
			докЭкспорт.FTN		= СтрокаГруппы.Т5_Отчество;
			докЭкспорт.START_DT = ?(ЗначениеЗаполнено(СтрокаГруппы.Т5_ДатаНач), День(СтрокаГруппы.Т5_ДатаНач),"");
			докЭкспорт.END_DT   = ?(ЗначениеЗаполнено(СтрокаГруппы.Т5_ДатаКон), День(СтрокаГруппы.Т5_ДатаКон),"");
			
			докЭкспорт.NRM_DT	= ?(ЗначениеЗаполнено(СтрокаГруппы.Т5_ДатаСозданияРМ), Формат(СтрокаГруппы.Т5_ДатаСозданияРМ, "ДФ=ddMMyyyy"),"");
			
			докЭкспорт.PID_ZV		= СтрокаГруппы.Т5_Причина;
			
			КоличествоСтрок = КоличествоСтрок + 1;

		КонецЦикла;
			
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица6" Тогда
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы6, СтруктураГруппы);
	
		Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, мИдГруппы6) Тогда		
			ДокЭкспорт.ЗакрытьФайл();
			СтруктураПараметровЛиста.Вставить("ИмяФайла", ИмяФайла);
			Возврат;
		КонецЕсли;
		
		ИмяФайлаБезРасширения = "E04T06" + ВерсияВыгрузки;
		ИмяФайла              = ИмяФайлаБезРасширения+ ".DBF";
		
		ДокЭкспорт.поля.Добавить("PERIOD_M",		"N", 2);
		ДокЭкспорт.поля.Добавить("PERIOD_Y",		"N", 4);
		
		ДокЭкспорт.поля.Добавить("ROWNUM",		"N", 6);
		ДокЭкспорт.поля.Добавить("UKR_GROMAD",	"N", 1);
		ДокЭкспорт.поля.Добавить("ST",			"N", 1);
		
		ДокЭкспорт.поля.Добавить("NUMIDENT",	"C", 10);
		ДокЭкспорт.поля.Добавить("LN",			"C", 100);
		ДокЭкспорт.поля.Добавить("NM",			"C", 100);
		ДокЭкспорт.поля.Добавить("FTN",			"C", 100);
		ДокЭкспорт.поля.Добавить("ZO",			"N", 2);
		
		ДокЭкспорт.поля.Добавить("PAY_TP",		"N", 3);

		ДокЭкспорт.поля.Добавить("PAY_MNTH",	"N", 2);
		ДокЭкспорт.поля.Добавить("PAY_YEAR",	"N", 4);
		
		ДокЭкспорт.поля.Добавить("KD_NP",		"N", 3);
		ДокЭкспорт.поля.Добавить("KD_NZP",		"N", 3);
		
		ДокЭкспорт.поля.Добавить("KD_PTV",		"N", 3);
		ДокЭкспорт.поля.Добавить("KD_VP",		"N", 3);
		
		ДокЭкспорт.поля.Добавить("SUM_TOTAL",	"N", 16,2);
		ДокЭкспорт.поля.Добавить("SUM_MAX",		"N", 16,2);
		ДокЭкспорт.поля.Добавить("SUM_INS",		"N", 16,2);
		ДокЭкспорт.поля.Добавить("OTK",			"N", 1);
		ДокЭкспорт.поля.Добавить("EXP",			"N", 1);
		
		ДокЭкспорт.поля.Добавить("NRM",			"N", 1);
		
		ДокЭкспорт.СоздатьФайл(КаталогДанных + "\" + ИмяФайла);
		ДокЭкспорт.АвтоСохранение = Истина;
		Если ДокЭкспорт.Первая() Тогда
			ДокЭкспорт.Очистить();
		КонецЕсли;
		
		КоличествоСтрок = 1;
		Для каждого СтрокаГруппы Из СтруктураГруппы Цикл
			
			ДокЭкспорт.Добавить();
			
			докЭкспорт.PERIOD_M 	= Месяц(мДатаНачалаПериодаОтчета);
			докЭкспорт.PERIOD_Y 	= Год(мДатаНачалаПериодаОтчета);
			
			докЭкспорт.ROWNUM 		= КоличествоСтрок;
			докЭкспорт.UKR_GROMAD 	= СтрокаГруппы.Т6_Гражданин;
			докЭкспорт.ST		 	= ?(ВРЕГ(СтрокаГруппы.Т6_МЖ) = "Ч", 1, 0);
			
			докЭкспорт.NUMIDENT = СтрокаГруппы.Т6_ДРФО;
			докЭкспорт.LN		= СтрокаГруппы.Т6_ФИО;
			докЭкспорт.NM		= СтрокаГруппы.Т6_Имя;
			докЭкспорт.FTN		= СтрокаГруппы.Т6_Отчество;
			докЭкспорт.ZO		= СтрокаГруппы.Т6_Категория;
			докЭкспорт.PAY_TP		= СтрокаГруппы.Т6_ТипСтавки;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.Т6_МесяцГод) Тогда
				докЭкспорт.PAY_MNTH 	= Месяц(СтрокаГруппы.Т6_МесяцГод);
				докЭкспорт.PAY_YEAR 	= Год(СтрокаГруппы.Т6_МесяцГод);
			КонецЕсли;
			
			докЭкспорт.KD_NP		= СтрокаГруппы.Т6_КвоБольничных;
			докЭкспорт.KD_NZP		= СтрокаГруппы.Т6_КвоБезЗП;
			
			докЭкспорт.KD_PTV	= СтрокаГруппы.Т6_КвоТрудОтношений;
			докЭкспорт.KD_VP	= СтрокаГруппы.Т6_КвоДекрет;
			
			докЭкспорт.SUM_TOTAL= СтрокаГруппы.Т6_СуммаНачислено;
			докЭкспорт.SUM_MAX	= СтрокаГруппы.Т6_СуммаНачисленоМаксБаза;
			докЭкспорт.SUM_INS	= СтрокаГруппы.Т6_СуммаВзносов;
			докЭкспорт.OTK		= СтрокаГруппы.Т6_ТрудКнижка;
			докЭкспорт.EXP		= СтрокаГруппы.Т6_СпецСтаж;
			
			докЭкспорт.NRM		= СтрокаГруппы.Т6_НовоеРМ;
			
			КоличествоСтрок = КоличествоСтрок + 1;

		КонецЦикла;
		
	ИначеЕсли ИмяТабличногоПоля = "ПолеТабличногоДокументаТаблица7" Тогда
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(мИдГруппы7, СтруктураГруппы);
	
		Если ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, мИдГруппы7) Тогда		
			ДокЭкспорт.ЗакрытьФайл();
			СтруктураПараметровЛиста.Вставить("ИмяФайла", ИмяФайла);
			Возврат;
		КонецЕсли;
		
		ИмяФайлаБезРасширения = "E04T07" + ВерсияВыгрузки;
		ИмяФайла              = ИмяФайлаБезРасширения+ ".DBF";
		
		ДокЭкспорт.поля.Добавить("PERIOD_M",	"N", 2);
		ДокЭкспорт.поля.Добавить("PERIOD_Y",	"N", 4);
		
		ДокЭкспорт.поля.Добавить("ROWNUM",		"N", 6);
		ДокЭкспорт.поля.Добавить("UKR_GROMAD",	"N", 1);
		
		ДокЭкспорт.поля.Добавить("NUMIDENT",	"C", 10);
		ДокЭкспорт.поля.Добавить("LN",			"C", 100);
		ДокЭкспорт.поля.Добавить("NM",			"C", 100);
		ДокЭкспорт.поля.Добавить("FTN",			"C", 100);
		
		ДокЭкспорт.поля.Добавить("C_PID",		"C", 9);
		
		ДокЭкспорт.поля.Добавить("START_DT",	"N", 2);
		ДокЭкспорт.поля.Добавить("STOP_DT",		"N", 2);
		
		ДокЭкспорт.поля.Добавить("DAYS",		"N", 4);
		
		ДокЭкспорт.поля.Добавить("HH",			"N", 4);
		ДокЭкспорт.поля.Добавить("MM",			"N", 2);
		ДокЭкспорт.поля.Добавить("NORMA",		"N", 6);
		
		ДокЭкспорт.поля.Добавить("NUM_NAK",		"C", 8);
		ДокЭкспорт.поля.Добавить("DT_NAK",		"N", 8);
		
		ДокЭкспорт.поля.Добавить("SEAZON",		"N", 1);
		
		ДокЭкспорт.СоздатьФайл(КаталогДанных + "\" + ИмяФайла);
		ДокЭкспорт.АвтоСохранение = Истина;
		Если ДокЭкспорт.Первая() Тогда
			ДокЭкспорт.Очистить();
		КонецЕсли;
		
		КоличествоСтрок = 1;
		Для каждого СтрокаГруппы Из СтруктураГруппы Цикл
			
			ДокЭкспорт.Добавить();
			
			докЭкспорт.PERIOD_M 	= Месяц(мДатаНачалаПериодаОтчета);
			докЭкспорт.PERIOD_Y 	= Год(мДатаНачалаПериодаОтчета);
			
			докЭкспорт.ROWNUM 	= КоличествоСтрок;
			докЭкспорт.UKR_GROMAD 	= СтрокаГруппы.Т7_Гражданин;
			
			докЭкспорт.NUMIDENT = СтрокаГруппы.Т7_ДРФО;
			докЭкспорт.LN		= СтрокаГруппы.Т7_ФИО;
			докЭкспорт.NM		= СтрокаГруппы.Т7_Имя;
			докЭкспорт.FTN		= СтрокаГруппы.Т7_Отчество;
			докЭкспорт.C_PID	= СтрокаГруппы.Т7_КодОснования;
			докЭкспорт.DAYS		= СтрокаГруппы.Т7_Дней;
			докЭкспорт.START_DT	= День(СтрокаГруппы.Т7_ДатаНач);
			докЭкспорт.STOP_DT	= День(СтрокаГруппы.Т7_ДатаКон);
			
			докЭкспорт.HH		= СтрокаГруппы.Т7_Часов;
			докЭкспорт.MM		= СтрокаГруппы.Т7_Минут;
			докЭкспорт.SEAZON	= СтрокаГруппы.Т7_Сезон;
			докЭкспорт.NORMA	= СтрокаГруппы.Т7_Норма;
			
			докЭкспорт.NUM_NAK	= СтрокаГруппы.Т7_ПриказНомер;
			Попытка
			докЭкспорт.DT_NAK	= Число(Формат(СтрокаГруппы.Т7_ПриказДата, "ДФ=ddMMyyyy"));
			Исключение
			КонецПопытки;
			
			КоличествоСтрок = КоличествоСтрок + 1;

		КонецЦикла;
		
	КонецЕсли;	

	ДокЭкспорт.ЗакрытьФайл();
	СтруктураПараметровЛиста.Вставить("ИмяФайла", ИмяФайла);
	
КонецПроцедуры // ВывестиНаПечатьЛист()

Процедура КоманднаяПанельДействийdbf(Кнопка)
	
	Перем ИмяФайла, ДокЭкспорт;
	
	Если Модифицированность И НЕ Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьСуществованиеКаталога() Тогда
		Предупреждение(НСтр("ru='Необходимо указать существуюций каталог для сохранения файлов DBF!'; uk='Необхідно вказати каталог існуючий каталог для збереження файлів DBF!'"));
		Возврат;
	КонецЕсли;
	
	Если НайтиФайлы(КаталогДанных, "E04T*.DBF").Количество() > 0 Тогда
		Если НЕ Вопрос(НСтр("ru = 'Все DBF-файлы в каталоге сохранения будут удалены! Продолжить?'; uk = 'Усі DBF-файли в каталозі збереження будут видалені! Продовжити?'"), РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			УдалитьФайлы(КаталогДанных, "E04T*.DBF");
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		 
	КонецЕсли;
	
	ОбновитьСтруктуруМногострочныхРазделов();
	
	Если ОтказПриПроверкеРеквизитовДляВыгрузкиDBF() Тогда
		Если НЕ Вопрос(Нстр("ru = 'При проверке заполнения отчета обнаружены ошибки!
                             |Продолжить выгрузку отчета?'; uk = 'При перевірці заповнення звіту виявлені помилки!
                             |Продовжити вивантаження звіту?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	// Иницилизация докумета сохранения выгрузки
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	НовыйДок.Очистить = Истина;
	НовыйДок.Комментарий = Комментарий;	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(мСохраненныйДок);
	ГлобСтруктФайловВыгрузки = Новый Структура;
	ФормаВыгрузки = НовыйДок.ПолучитьФорму(, ЭтотОбъект);
	
	СтруктураПараметров = Новый Структура();
	СчетчикДокОсн = 0;
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		СчетчикДокОсн = СчетчикДокОсн + 1;
		
		СтруктураПараметров.Вставить("ИмяФайла",   		  "");
		СтруктураПараметров.Вставить("ИмяТабличногоПоля", СтрокаУровня1.ИмяПоляТабличногоДокум);
		
		ВыгрузитьЛистВDBF(СтруктураПараметров);
		
		СтруктураПараметров.Свойство("ИмяФайла",  ИмяФайла);
		
		Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
			// таблица не выгружалась
			Продолжить;
		КонецЕсли;
		
		ФормаВыгрузки.СформироватьИЗаписать(СпДокОсн, КаталогДанных +"\"+ИмяФайла, СчетчикДокОсн, , ,"DBF");	
		ГлобСтруктФайловВыгрузки.Вставить("FileName" + Лев(ИмяФайла, СтрДлина(ИмяФайла)-4), Новый ДвоичныеДанные(КаталогДанных +"\" + ИмяФайла));
		
	КонецЦикла;
	
	Предупреждение(Нстр("ru = 'Выгрузка выполнена успешно!'; uk = 'Вивантаження виконане вдало!'"));
	
КонецПроцедуры

Процедура КаталогДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КомандаСистемы("explorer " + КаталогДанных);
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица1Выбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Врег(Область.Имя) = ВРег("НужныИзмененияВПерсонификацииДа") Тогда
		мСлужебныеДанные.Области.OPERADD.Значение = 1;
		ЗаполнитьОтображениеДанныхВТаблицах();		
	ИначеЕсли Врег(Область.Имя) = Врег("НужныИзмененияВПерсонификацииНет") Тогда
		мСлужебныеДанные.Области.OPERADD.Значение = 0;
		ЗаполнитьОтображениеДанныхВТаблицах();		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеТабличногоДокументаСлужебныеДанныеПриИзмененииСодержимогоОбласти(Элемент, Область)
	ЗаполнитьОтображениеДанныхВТаблицах();
КонецПроцедуры

Процедура ПолеТабличногоДокументаТаблица1R29C9НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ДопустимыеСтатусы = Новый СписокЗначений();
	ДопустимыеСтатусы.Добавить("Платник збору на загальних підставах");
	ДопустимыеСтатусы.Добавить("Платник єдиного податку");
	ДопустимыеСтатусы.Добавить("Платник спец. патенту");
	ДопустимыеСтатусы.Добавить("Платник фіксованого податку");
	ДопустимыеСтатусы.Добавить("Платник фіксованого сільськогосподарського податку");
	
	Элемент.СписокВыбора  = ДопустимыеСтатусы;
	
КонецПроцедуры

Функция СформироватьДанныеДляЗвит1С() Экспорт 
	
	мСохраненныйДок   = Неопределено;	
	мСкопированаФорма = Неопределено;
	
	ПередОткрытием(Ложь, Истина);
	ПриОткрытии();
	
	Очистить();
	ЗаполнитьСведенияОбОрганизации();
	ЗаполнитьАвто();
	Расчет();

	Если мМенеджерЗвит1С.ФлагОтладки Тогда
		ЭтаФорма.ОткрытьМодально();  
	КонецЕсли;
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	// расшифровка
	Попытка
		ВЫПОЛНИТЬ("СписокСохранения.Вставить(""РасшифровкаОтчета"", СпП)");
	Исключение КонецПопытки;
	
	ПоказателиОтчета = Новый Структура();
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если СтраницаПанели.Имя = "ВидыРасчетов" Тогда
		    Продолжить;
		КонецЕсли;
		
		ИмяТекТабличногоПоля    = "ПолеТабличногоДокумента" + СтраницаПанели.Имя;
		ТекТабличноеПоле        = ЭлементыФормы[ИмяТекТабличногоПоля];
		ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле, Истина);
		ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	КонецЦикла;

	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

Процедура ПолеТабличногоДокументаТаблица6Т6_0001МЖНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить("Ч", "Чоловік");
	ВариантыВыбора.Добавить("Ж", "Жінка");
	Результат = ВыбратьИзСписка(ВариантыВыбора, мТаблица6, ВариантыВыбора.НайтиПоЗначению(Элемент.Значение));
	Если Не Результат = Неопределено Тогда
		Элемент.Значение = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеремещениеБольничныхНажатие(Элемент)
	ИмяКнопки = Элемент.Имя;
	
	Позиция_ = Найти(ИмяКнопки, "_");
	Если Позиция_ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТЧИз = Сред(ИмяКнопки, 3, Позиция_ - 3);
	ИмяТЧВ  = Сред(ИмяКнопки, Позиция_ + 1);
	
	СтрокаИЗ = ЭлементыФормы[ИмяТЧИз].ТекущиеДанные;
	
	Если НЕ СтрокаИЗ = Неопределено Тогда
		
		СтрокаВ = ЭтаФорма[ИмяТЧВ].Добавить();
		СтрокаВ.ВидРасчета = СтрокаИЗ.ВидРасчета;
		
		ЭтаФорма[ИмяТЧИз].Удалить(СтрокаИЗ);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодразделениеПриИзменении(Элемент)
	
	Если НЕ Подразделение = мПодразделение Тогда
	
		Сообщить(НСтр("ru = 'Необходимо перезаполнить отчет!'; uk = 'Необхідно перезаповнити звіт!'"), СтатусСообщения.Внимание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мПодразделение = Подразделение;
	
КонецПроцедуры

Функция УсловиеНаПодразделение(ИмяТаблицы = "", Запрос = Неопределено)

	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		// установим дополнительные параметры в запросе
		Если НЕ Запрос = Неопределено Тогда
		
			Запрос.УстановитьПараметр("Подразделение",     Подразделение);	
			Запрос.УстановитьПараметр("ДатаПодразделения", мДатаКонцаПериодаОтчета);	
		
		КонецЕсли;
		
		// сформируем текст фильтра
		Возврат  " И " + ?(ЗначениеЗаполнено(ИмяТаблицы), ИмяТаблицы + ".", "")+ "Сотрудник В (ВЫБРАТЬ
								   |				    ТекРаботники.Сотрудник
		                      	   |			  ИЗ
		                      	   |			 		РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаПодразделения, Организация = &Организация) КАК ТекРаботники
		                      	   |			  ГДЕ
		                      	   |						(ТекРаботники.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение) ИЛИ ТекРаботники.ПодразделениеОрганизации = &Подразделение)
								   |			  )
								   |";
	Иначе
		
		Возврат ""							   
		
	КонецЕсли;

КонецФункции // ()

// добавляем знак "БК" если вместо ДРФО указана серия/номер паспорта
Функция ОбработатьДРФО(Знач ДРФО)
	
	ДРФО = СОКРЛП(ДРФО);
	ДРФО = ВРЕГ(ДРФО);
	
	Если СтрДлина(ДРФО) = 8 Тогда
		
		Симв1 = Сред(ДРФО, 1, 1);
		Симв2 = Сред(ДРФО, 2, 1);
		Симв3 = Сред(ДРФО, 3);
		Если  Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв1) > 0
			И Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв2) > 0 Тогда
		
			Для Сч = 3 по 8 Цикл
				Если Найти("0123456789", Сред(ДРФО, Сч, 1)) = 0 Тогда
					// не соответствует формату паспорта
					Возврат ДРФО;
				КонецЕсли;
			КонецЦикла;	
			
			// к номеру паспорта добавляем "БК"
			Возврат "БК" + ДРФО;
			
		Иначе
			
			// не соответствует формату паспорта
			Возврат ДРФО;
			
		КонецЕсли;
		
	Иначе
		
		// не соответствует формату паспорта
		Возврат ДРФО;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Список выбора поля выбора "Единица измерения"
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1,       НСтр("ru='в гривнях';uk='у гривнях'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000,    НСтр("ru='в тысячах гривень';uk='у тисячах гривень'"));
ЭлементыФормы.ПолеВыбораЕдиницаИзмерения.СписокВыбора.Добавить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, НСтр("ru='в миллионах гривень';uk='у мільйонах гривень'"));


// Список выбора поля выбора "ВариантЗаполнения"
ЭлементыФормы.ПолеВыбораВариантЗаполненияТаблица1.СписокВыбора.Добавить(1, НСтр("ru='не заполнять автоматически';uk='не заповнювати автоматично'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияТаблица1.СписокВыбора.Добавить(2, НСтр("ru='заполнять автоматически с корректировкой';uk='заповнювати автоматично з коригуванням'"));
ЭлементыФормы.ПолеВыбораВариантЗаполненияТаблица1.СписокВыбора.Добавить(3, НСтр("ru='заполнять автоматически без корректировки';uk='заповнювати автоматично без коригування'"));

ОписаниеТиповЧисло = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
ОписаниеТиповЧисло0 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0);
ОписаниеТиповЧисло2 = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2,0);
ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
ОписаниеТиповСтрока10  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10);
МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));


мИдГруппы5  = "Т5_";
мИдГруппы6  = "Т6_";
мИдГруппы7  = "Т7_";

КолИсхСтрокИдГруппы5  = 1;
КолИсхСтрокИдГруппы6  = 1;
КолИсхСтрокИдГруппы7  = 1;

СтруктураГруппы5 = Новый ТаблицаЗначений;
СтруктураГруппы5.Колонки.Добавить("Т5_Гражданин",ОписаниеТиповЧисло0);
СтруктураГруппы5.Колонки.Добавить("Т5_Категория",ОписаниеТиповЧисло0);

СтруктураГруппы5.Колонки.Добавить("Т5_ГПХ",ОписаниеТиповЧисло0);

СтруктураГруппы5.Колонки.Добавить("Т5_ДРФО",    ОписаниеТиповСтрока10);
СтруктураГруппы5.Колонки.Добавить("Т5_Фамилия", ОписаниеТиповСтрока);
СтруктураГруппы5.Колонки.Добавить("Т5_Имя",     ОписаниеТиповСтрока);
СтруктураГруппы5.Колонки.Добавить("Т5_Отчество",ОписаниеТиповСтрока);
СтруктураГруппы5.Колонки.Добавить("Т5_ДатаНач", ОписаниеТиповДата);
СтруктураГруппы5.Колонки.Добавить("Т5_ДатаКон", ОписаниеТиповДата);
СтруктураГруппы5.Колонки.Добавить("Т5_ДатаСозданияРМ", ОписаниеТиповДата);
СтруктураГруппы5.Колонки.Добавить("Т5_Причина", ОписаниеТиповСтрока);

СтруктураГруппы6 = Новый ТаблицаЗначений;
СтруктураГруппы6.Колонки.Добавить("Т6_Гражданин",      ОписаниеТиповЧисло0);
СтруктураГруппы6.Колонки.Добавить("Т6_МЖ",		       ОписаниеТиповСтрока10);
СтруктураГруппы6.Колонки.Добавить("Т6_ДРФО",           ОписаниеТиповСтрока10);
СтруктураГруппы6.Колонки.Добавить("Т6_ФИО", 		   ОписаниеТиповСтрока);//ТОЛЬКО ФАМИЛИЯ!!!!
СтруктураГруппы6.Колонки.Добавить("Т6_Имя", 		   ОписаниеТиповСтрока);
СтруктураГруппы6.Колонки.Добавить("Т6_Отчество", 	   ОписаниеТиповСтрока);
СтруктураГруппы6.Колонки.Добавить("Т6_Категория",      ОписаниеТиповЧисло0);
СтруктураГруппы6.Колонки.Добавить("Т6_ТипСтавки",      ОписаниеТиповЧисло0);
СтруктураГруппы6.Колонки.Добавить("Т6_МесяцГод",       ОписаниеТиповДата);
СтруктураГруппы6.Колонки.Добавить("Т6_КвоБольничных",  ОписаниеТиповЧисло2);
СтруктураГруппы6.Колонки.Добавить("Т6_КвоБезЗП",       ОписаниеТиповЧисло2);
СтруктураГруппы6.Колонки.Добавить("Т6_КвоТрудОтношений", ОписаниеТиповЧисло2);

СтруктураГруппы6.Колонки.Добавить("Т6_КвоДекрет", 		ОписаниеТиповЧисло2);

СтруктураГруппы6.Колонки.Добавить("Т6_СуммаНачислено", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("Т6_СуммаНачисленоМаксБаза", ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("Т6_СуммаВзносов",   ОписаниеТиповЧисло);
СтруктураГруппы6.Колонки.Добавить("Т6_ТрудКнижка",     ОписаниеТиповЧисло0);
СтруктураГруппы6.Колонки.Добавить("Т6_СпецСтаж",       ОписаниеТиповЧисло0);
СтруктураГруппы6.Колонки.Добавить("Т6_НовоеРМ",        ОписаниеТиповЧисло0);

СтруктураГруппы7 = Новый ТаблицаЗначений;
СтруктураГруппы7.Колонки.Добавить("Т7_Гражданин",    ОписаниеТиповЧисло0);
СтруктураГруппы7.Колонки.Добавить("Т7_ДРФО",         ОписаниеТиповСтрока10);
СтруктураГруппы7.Колонки.Добавить("Т7_ФИО", 		 ОписаниеТиповСтрока);//ТОЛЬКО ФАМИЛИЯ!!!!
СтруктураГруппы7.Колонки.Добавить("Т7_Имя", 		 ОписаниеТиповСтрока);
СтруктураГруппы7.Колонки.Добавить("Т7_Отчество", 	 ОписаниеТиповСтрока);
СтруктураГруппы7.Колонки.Добавить("Т7_КодОснования", ОписаниеТиповСтрока);
СтруктураГруппы7.Колонки.Добавить("Т7_ДатаНач",   	 ОписаниеТиповДата);
СтруктураГруппы7.Колонки.Добавить("Т7_ДатаКон",   	 ОписаниеТиповДата);
СтруктураГруппы7.Колонки.Добавить("Т7_Дней",      	 ОписаниеТиповЧисло0);
//СтруктураГруппы7.Колонки.Добавить("Т7_НормоСмен", 	 ОписаниеТиповЧисло0);
СтруктураГруппы7.Колонки.Добавить("Т7_Часов",     	 ОписаниеТиповЧисло0);
СтруктураГруппы7.Колонки.Добавить("Т7_Минут",     	 ОписаниеТиповЧисло0);
СтруктураГруппы7.Колонки.Добавить("Т7_Норма",     	 ОписаниеТиповЧисло0);
СтруктураГруппы7.Колонки.Добавить("Т7_ПриказНомер",	 ОписаниеТиповСтрока10);
СтруктураГруппы7.Колонки.Добавить("Т7_ПриказДата",	 ОписаниеТиповДата);
СтруктураГруппы7.Колонки.Добавить("Т7_Сезон",     	 ОписаниеТиповЧисло0);

// структура многострочных разделов формы
мСтруктураМногострочныхРазделов = Новый Структура;
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы5, СтруктураГруппы5);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы6, СтруктураГруппы6);
мСтруктураМногострочныхРазделов.Вставить(мИдГруппы7, СтруктураГруппы7);

// структура исходных строк (минимального кол-ва) многострочных разделов формы
мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы5, КолИсхСтрокИдГруппы5);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы6, КолИсхСтрокИдГруппы6);
мСтруктураИсхКолвоСтрокРазделов.Вставить(мИдГруппы7, КолИсхСтрокИдГруппы7);
 
ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  	  // ЖЕЛТЫЙ
ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);     // Белый, Ввод запрещен

// структура цветов раскраски автозаполняемых ячеек
мСтруктураЦветовРаскраски = Новый Структура;
мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

мСоставПоказателей = "СоставПоказателей2013Мес9";

// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
//
// Версия формы
мВерсияФормы = "01/09/2013";
мПечатныеФормы = Новый СписокЗначений;

ЕстьДуплекс = ВосстановитьЗначение("РегламентированныеОтчеты_ЕстьДуплекс");
Если НЕ ТипЗнч(ЕстьДуплекс) = Тип("Булево") Тогда
	ЕстьДуплекс = Ложь;	
КонецЕсли;

ВерсияВыгрузки = "H";